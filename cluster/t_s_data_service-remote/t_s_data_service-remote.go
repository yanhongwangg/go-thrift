// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"rpc"
	"cluster"
)

var _ = rpc.GoUnusedProtection__
var _ = cluster.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  long querySingleSeries(SingleSeriesQueryRequest request)")
  fmt.Fprintln(os.Stderr, "  string fetchSingleSeries(Node header, long readerId)")
  fmt.Fprintln(os.Stderr, "  long querySingleSeriesByTimestamp(SingleSeriesQueryRequest request)")
  fmt.Fprintln(os.Stderr, "  string fetchSingleSeriesByTimestamp(Node header, long readerId, long timestamp)")
  fmt.Fprintln(os.Stderr, "  void endQuery(Node header, Node thisNode, long queryId)")
  fmt.Fprintln(os.Stderr, "   getAllPaths(Node header,  path)")
  fmt.Fprintln(os.Stderr, "   getAllDevices(Node header,  path)")
  fmt.Fprintln(os.Stderr, "   getNodeList(Node header, string path, int nodeLevel)")
  fmt.Fprintln(os.Stderr, "   getChildNodePathInNextLevel(Node header, string path)")
  fmt.Fprintln(os.Stderr, "  string getAllMeasurementSchema(Node header, string planBinary)")
  fmt.Fprintln(os.Stderr, "   getAggrResult(GetAggrResultRequest request)")
  fmt.Fprintln(os.Stderr, "   getUnregisteredTimeseries(Node header,  timeseriesList)")
  fmt.Fprintln(os.Stderr, "  PullSnapshotResp pullSnapshot(PullSnapshotRequest request)")
  fmt.Fprintln(os.Stderr, "  long getGroupByExecutor(GroupByRequest request)")
  fmt.Fprintln(os.Stderr, "   getGroupByResult(Node header, long executorId, long startTime, long endTime)")
  fmt.Fprintln(os.Stderr, "  PullSchemaResp pullTimeSeriesSchema(PullSchemaRequest request)")
  fmt.Fprintln(os.Stderr, "  PullSchemaResp pullMeasurementSchema(PullSchemaRequest request)")
  fmt.Fprintln(os.Stderr, "  string previousFill(PreviousFillRequest request)")
  fmt.Fprintln(os.Stderr, "  string last(LastQueryRequest request)")
  fmt.Fprintln(os.Stderr, "  int getPathCount(Node header,  pathsToQuery, int level)")
  fmt.Fprintln(os.Stderr, "  bool onSnapshotApplied(Node header,  slots)")
  fmt.Fprintln(os.Stderr, "  HeartBeatResponse sendHeartbeat(HeartBeatRequest request)")
  fmt.Fprintln(os.Stderr, "  long startElection(ElectionRequest request)")
  fmt.Fprintln(os.Stderr, "  long appendEntries(AppendEntriesRequest request)")
  fmt.Fprintln(os.Stderr, "  long appendEntry(AppendEntryRequest request)")
  fmt.Fprintln(os.Stderr, "  void sendSnapshot(SendSnapshotRequest request)")
  fmt.Fprintln(os.Stderr, "  TSStatus executeNonQueryPlan(ExecutNonQueryReq request)")
  fmt.Fprintln(os.Stderr, "  long requestCommitIndex(Node header)")
  fmt.Fprintln(os.Stderr, "  string readFile(string filePath, i64 offset, i32 length)")
  fmt.Fprintln(os.Stderr, "  bool matchTerm(long index, long term, Node header)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := cluster.NewTSDataServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "querySingleSeries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QuerySingleSeries requires 1 args")
      flag.Usage()
    }
    arg141 := flag.Arg(1)
    mbTrans142 := thrift.NewTMemoryBufferLen(len(arg141))
    defer mbTrans142.Close()
    _, err143 := mbTrans142.WriteString(arg141)
    if err143 != nil {
      Usage()
      return
    }
    factory144 := thrift.NewTJSONProtocolFactory()
    jsProt145 := factory144.GetProtocol(mbTrans142)
    argvalue0 := cluster.NewSingleSeriesQueryRequest()
    err146 := argvalue0.Read(jsProt145)
    if err146 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QuerySingleSeries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchSingleSeries":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "FetchSingleSeries requires 2 args")
      flag.Usage()
    }
    arg147 := flag.Arg(1)
    mbTrans148 := thrift.NewTMemoryBufferLen(len(arg147))
    defer mbTrans148.Close()
    _, err149 := mbTrans148.WriteString(arg147)
    if err149 != nil {
      Usage()
      return
    }
    factory150 := thrift.NewTJSONProtocolFactory()
    jsProt151 := factory150.GetProtocol(mbTrans148)
    argvalue0 := cluster.NewNode()
    err152 := argvalue0.Read(jsProt151)
    if err152 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err153 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err153 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    fmt.Print(client.FetchSingleSeries(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "querySingleSeriesByTimestamp":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "QuerySingleSeriesByTimestamp requires 1 args")
      flag.Usage()
    }
    arg154 := flag.Arg(1)
    mbTrans155 := thrift.NewTMemoryBufferLen(len(arg154))
    defer mbTrans155.Close()
    _, err156 := mbTrans155.WriteString(arg154)
    if err156 != nil {
      Usage()
      return
    }
    factory157 := thrift.NewTJSONProtocolFactory()
    jsProt158 := factory157.GetProtocol(mbTrans155)
    argvalue0 := cluster.NewSingleSeriesQueryRequest()
    err159 := argvalue0.Read(jsProt158)
    if err159 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.QuerySingleSeriesByTimestamp(context.Background(), value0))
    fmt.Print("\n")
    break
  case "fetchSingleSeriesByTimestamp":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "FetchSingleSeriesByTimestamp requires 3 args")
      flag.Usage()
    }
    arg160 := flag.Arg(1)
    mbTrans161 := thrift.NewTMemoryBufferLen(len(arg160))
    defer mbTrans161.Close()
    _, err162 := mbTrans161.WriteString(arg160)
    if err162 != nil {
      Usage()
      return
    }
    factory163 := thrift.NewTJSONProtocolFactory()
    jsProt164 := factory163.GetProtocol(mbTrans161)
    argvalue0 := cluster.NewNode()
    err165 := argvalue0.Read(jsProt164)
    if err165 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err166 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err166 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    argvalue2, err167 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err167 != nil {
      Usage()
      return
    }
    value2 := cluster.Long(argvalue2)
    fmt.Print(client.FetchSingleSeriesByTimestamp(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "endQuery":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "EndQuery requires 3 args")
      flag.Usage()
    }
    arg168 := flag.Arg(1)
    mbTrans169 := thrift.NewTMemoryBufferLen(len(arg168))
    defer mbTrans169.Close()
    _, err170 := mbTrans169.WriteString(arg168)
    if err170 != nil {
      Usage()
      return
    }
    factory171 := thrift.NewTJSONProtocolFactory()
    jsProt172 := factory171.GetProtocol(mbTrans169)
    argvalue0 := cluster.NewNode()
    err173 := argvalue0.Read(jsProt172)
    if err173 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg174 := flag.Arg(2)
    mbTrans175 := thrift.NewTMemoryBufferLen(len(arg174))
    defer mbTrans175.Close()
    _, err176 := mbTrans175.WriteString(arg174)
    if err176 != nil {
      Usage()
      return
    }
    factory177 := thrift.NewTJSONProtocolFactory()
    jsProt178 := factory177.GetProtocol(mbTrans175)
    argvalue1 := cluster.NewNode()
    err179 := argvalue1.Read(jsProt178)
    if err179 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    argvalue2, err180 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err180 != nil {
      Usage()
      return
    }
    value2 := cluster.Long(argvalue2)
    fmt.Print(client.EndQuery(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getAllPaths":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllPaths requires 2 args")
      flag.Usage()
    }
    arg181 := flag.Arg(1)
    mbTrans182 := thrift.NewTMemoryBufferLen(len(arg181))
    defer mbTrans182.Close()
    _, err183 := mbTrans182.WriteString(arg181)
    if err183 != nil {
      Usage()
      return
    }
    factory184 := thrift.NewTJSONProtocolFactory()
    jsProt185 := factory184.GetProtocol(mbTrans182)
    argvalue0 := cluster.NewNode()
    err186 := argvalue0.Read(jsProt185)
    if err186 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg187 := flag.Arg(2)
    mbTrans188 := thrift.NewTMemoryBufferLen(len(arg187))
    defer mbTrans188.Close()
    _, err189 := mbTrans188.WriteString(arg187)
    if err189 != nil { 
      Usage()
      return
    }
    factory190 := thrift.NewTJSONProtocolFactory()
    jsProt191 := factory190.GetProtocol(mbTrans188)
    containerStruct1 := cluster.NewTSDataServiceGetAllPathsArgs()
    err192 := containerStruct1.ReadField2(jsProt191)
    if err192 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Path
    value1 := argvalue1
    fmt.Print(client.GetAllPaths(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllDevices":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllDevices requires 2 args")
      flag.Usage()
    }
    arg193 := flag.Arg(1)
    mbTrans194 := thrift.NewTMemoryBufferLen(len(arg193))
    defer mbTrans194.Close()
    _, err195 := mbTrans194.WriteString(arg193)
    if err195 != nil {
      Usage()
      return
    }
    factory196 := thrift.NewTJSONProtocolFactory()
    jsProt197 := factory196.GetProtocol(mbTrans194)
    argvalue0 := cluster.NewNode()
    err198 := argvalue0.Read(jsProt197)
    if err198 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg199 := flag.Arg(2)
    mbTrans200 := thrift.NewTMemoryBufferLen(len(arg199))
    defer mbTrans200.Close()
    _, err201 := mbTrans200.WriteString(arg199)
    if err201 != nil { 
      Usage()
      return
    }
    factory202 := thrift.NewTJSONProtocolFactory()
    jsProt203 := factory202.GetProtocol(mbTrans200)
    containerStruct1 := cluster.NewTSDataServiceGetAllDevicesArgs()
    err204 := containerStruct1.ReadField2(jsProt203)
    if err204 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Path
    value1 := argvalue1
    fmt.Print(client.GetAllDevices(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getNodeList":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetNodeList requires 3 args")
      flag.Usage()
    }
    arg205 := flag.Arg(1)
    mbTrans206 := thrift.NewTMemoryBufferLen(len(arg205))
    defer mbTrans206.Close()
    _, err207 := mbTrans206.WriteString(arg205)
    if err207 != nil {
      Usage()
      return
    }
    factory208 := thrift.NewTJSONProtocolFactory()
    jsProt209 := factory208.GetProtocol(mbTrans206)
    argvalue0 := cluster.NewNode()
    err210 := argvalue0.Read(jsProt209)
    if err210 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    tmp2, err212 := (strconv.Atoi(flag.Arg(3)))
    if err212 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := cluster.Int(argvalue2)
    fmt.Print(client.GetNodeList(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "getChildNodePathInNextLevel":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetChildNodePathInNextLevel requires 2 args")
      flag.Usage()
    }
    arg213 := flag.Arg(1)
    mbTrans214 := thrift.NewTMemoryBufferLen(len(arg213))
    defer mbTrans214.Close()
    _, err215 := mbTrans214.WriteString(arg213)
    if err215 != nil {
      Usage()
      return
    }
    factory216 := thrift.NewTJSONProtocolFactory()
    jsProt217 := factory216.GetProtocol(mbTrans214)
    argvalue0 := cluster.NewNode()
    err218 := argvalue0.Read(jsProt217)
    if err218 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := flag.Arg(2)
    value1 := argvalue1
    fmt.Print(client.GetChildNodePathInNextLevel(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAllMeasurementSchema":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetAllMeasurementSchema requires 2 args")
      flag.Usage()
    }
    arg220 := flag.Arg(1)
    mbTrans221 := thrift.NewTMemoryBufferLen(len(arg220))
    defer mbTrans221.Close()
    _, err222 := mbTrans221.WriteString(arg220)
    if err222 != nil {
      Usage()
      return
    }
    factory223 := thrift.NewTJSONProtocolFactory()
    jsProt224 := factory223.GetProtocol(mbTrans221)
    argvalue0 := cluster.NewNode()
    err225 := argvalue0.Read(jsProt224)
    if err225 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1 := []byte(flag.Arg(2))
    value1 := argvalue1
    fmt.Print(client.GetAllMeasurementSchema(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "getAggrResult":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetAggrResult_ requires 1 args")
      flag.Usage()
    }
    arg227 := flag.Arg(1)
    mbTrans228 := thrift.NewTMemoryBufferLen(len(arg227))
    defer mbTrans228.Close()
    _, err229 := mbTrans228.WriteString(arg227)
    if err229 != nil {
      Usage()
      return
    }
    factory230 := thrift.NewTJSONProtocolFactory()
    jsProt231 := factory230.GetProtocol(mbTrans228)
    argvalue0 := cluster.NewGetAggrResultRequest()
    err232 := argvalue0.Read(jsProt231)
    if err232 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetAggrResult_(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getUnregisteredTimeseries":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "GetUnregisteredTimeseries requires 2 args")
      flag.Usage()
    }
    arg233 := flag.Arg(1)
    mbTrans234 := thrift.NewTMemoryBufferLen(len(arg233))
    defer mbTrans234.Close()
    _, err235 := mbTrans234.WriteString(arg233)
    if err235 != nil {
      Usage()
      return
    }
    factory236 := thrift.NewTJSONProtocolFactory()
    jsProt237 := factory236.GetProtocol(mbTrans234)
    argvalue0 := cluster.NewNode()
    err238 := argvalue0.Read(jsProt237)
    if err238 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg239 := flag.Arg(2)
    mbTrans240 := thrift.NewTMemoryBufferLen(len(arg239))
    defer mbTrans240.Close()
    _, err241 := mbTrans240.WriteString(arg239)
    if err241 != nil { 
      Usage()
      return
    }
    factory242 := thrift.NewTJSONProtocolFactory()
    jsProt243 := factory242.GetProtocol(mbTrans240)
    containerStruct1 := cluster.NewTSDataServiceGetUnregisteredTimeseriesArgs()
    err244 := containerStruct1.ReadField2(jsProt243)
    if err244 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.TimeseriesList
    value1 := argvalue1
    fmt.Print(client.GetUnregisteredTimeseries(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "pullSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PullSnapshot requires 1 args")
      flag.Usage()
    }
    arg245 := flag.Arg(1)
    mbTrans246 := thrift.NewTMemoryBufferLen(len(arg245))
    defer mbTrans246.Close()
    _, err247 := mbTrans246.WriteString(arg245)
    if err247 != nil {
      Usage()
      return
    }
    factory248 := thrift.NewTJSONProtocolFactory()
    jsProt249 := factory248.GetProtocol(mbTrans246)
    argvalue0 := cluster.NewPullSnapshotRequest()
    err250 := argvalue0.Read(jsProt249)
    if err250 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PullSnapshot(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupByExecutor":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroupByExecutor requires 1 args")
      flag.Usage()
    }
    arg251 := flag.Arg(1)
    mbTrans252 := thrift.NewTMemoryBufferLen(len(arg251))
    defer mbTrans252.Close()
    _, err253 := mbTrans252.WriteString(arg251)
    if err253 != nil {
      Usage()
      return
    }
    factory254 := thrift.NewTJSONProtocolFactory()
    jsProt255 := factory254.GetProtocol(mbTrans252)
    argvalue0 := cluster.NewGroupByRequest()
    err256 := argvalue0.Read(jsProt255)
    if err256 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetGroupByExecutor(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getGroupByResult":
    if flag.NArg() - 1 != 4 {
      fmt.Fprintln(os.Stderr, "GetGroupByResult_ requires 4 args")
      flag.Usage()
    }
    arg257 := flag.Arg(1)
    mbTrans258 := thrift.NewTMemoryBufferLen(len(arg257))
    defer mbTrans258.Close()
    _, err259 := mbTrans258.WriteString(arg257)
    if err259 != nil {
      Usage()
      return
    }
    factory260 := thrift.NewTJSONProtocolFactory()
    jsProt261 := factory260.GetProtocol(mbTrans258)
    argvalue0 := cluster.NewNode()
    err262 := argvalue0.Read(jsProt261)
    if err262 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    argvalue1, err263 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err263 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    argvalue2, err264 := (strconv.ParseInt(flag.Arg(3), 10, 64))
    if err264 != nil {
      Usage()
      return
    }
    value2 := cluster.Long(argvalue2)
    argvalue3, err265 := (strconv.ParseInt(flag.Arg(4), 10, 64))
    if err265 != nil {
      Usage()
      return
    }
    value3 := cluster.Long(argvalue3)
    fmt.Print(client.GetGroupByResult_(context.Background(), value0, value1, value2, value3))
    fmt.Print("\n")
    break
  case "pullTimeSeriesSchema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PullTimeSeriesSchema requires 1 args")
      flag.Usage()
    }
    arg266 := flag.Arg(1)
    mbTrans267 := thrift.NewTMemoryBufferLen(len(arg266))
    defer mbTrans267.Close()
    _, err268 := mbTrans267.WriteString(arg266)
    if err268 != nil {
      Usage()
      return
    }
    factory269 := thrift.NewTJSONProtocolFactory()
    jsProt270 := factory269.GetProtocol(mbTrans267)
    argvalue0 := cluster.NewPullSchemaRequest()
    err271 := argvalue0.Read(jsProt270)
    if err271 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PullTimeSeriesSchema(context.Background(), value0))
    fmt.Print("\n")
    break
  case "pullMeasurementSchema":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PullMeasurementSchema requires 1 args")
      flag.Usage()
    }
    arg272 := flag.Arg(1)
    mbTrans273 := thrift.NewTMemoryBufferLen(len(arg272))
    defer mbTrans273.Close()
    _, err274 := mbTrans273.WriteString(arg272)
    if err274 != nil {
      Usage()
      return
    }
    factory275 := thrift.NewTJSONProtocolFactory()
    jsProt276 := factory275.GetProtocol(mbTrans273)
    argvalue0 := cluster.NewPullSchemaRequest()
    err277 := argvalue0.Read(jsProt276)
    if err277 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PullMeasurementSchema(context.Background(), value0))
    fmt.Print("\n")
    break
  case "previousFill":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "PreviousFill requires 1 args")
      flag.Usage()
    }
    arg278 := flag.Arg(1)
    mbTrans279 := thrift.NewTMemoryBufferLen(len(arg278))
    defer mbTrans279.Close()
    _, err280 := mbTrans279.WriteString(arg278)
    if err280 != nil {
      Usage()
      return
    }
    factory281 := thrift.NewTJSONProtocolFactory()
    jsProt282 := factory281.GetProtocol(mbTrans279)
    argvalue0 := cluster.NewPreviousFillRequest()
    err283 := argvalue0.Read(jsProt282)
    if err283 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.PreviousFill(context.Background(), value0))
    fmt.Print("\n")
    break
  case "last":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Last requires 1 args")
      flag.Usage()
    }
    arg284 := flag.Arg(1)
    mbTrans285 := thrift.NewTMemoryBufferLen(len(arg284))
    defer mbTrans285.Close()
    _, err286 := mbTrans285.WriteString(arg284)
    if err286 != nil {
      Usage()
      return
    }
    factory287 := thrift.NewTJSONProtocolFactory()
    jsProt288 := factory287.GetProtocol(mbTrans285)
    argvalue0 := cluster.NewLastQueryRequest()
    err289 := argvalue0.Read(jsProt288)
    if err289 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Last(context.Background(), value0))
    fmt.Print("\n")
    break
  case "getPathCount":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "GetPathCount requires 3 args")
      flag.Usage()
    }
    arg290 := flag.Arg(1)
    mbTrans291 := thrift.NewTMemoryBufferLen(len(arg290))
    defer mbTrans291.Close()
    _, err292 := mbTrans291.WriteString(arg290)
    if err292 != nil {
      Usage()
      return
    }
    factory293 := thrift.NewTJSONProtocolFactory()
    jsProt294 := factory293.GetProtocol(mbTrans291)
    argvalue0 := cluster.NewNode()
    err295 := argvalue0.Read(jsProt294)
    if err295 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg296 := flag.Arg(2)
    mbTrans297 := thrift.NewTMemoryBufferLen(len(arg296))
    defer mbTrans297.Close()
    _, err298 := mbTrans297.WriteString(arg296)
    if err298 != nil { 
      Usage()
      return
    }
    factory299 := thrift.NewTJSONProtocolFactory()
    jsProt300 := factory299.GetProtocol(mbTrans297)
    containerStruct1 := cluster.NewTSDataServiceGetPathCountArgs()
    err301 := containerStruct1.ReadField2(jsProt300)
    if err301 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.PathsToQuery
    value1 := argvalue1
    tmp2, err302 := (strconv.Atoi(flag.Arg(3)))
    if err302 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := cluster.Int(argvalue2)
    fmt.Print(client.GetPathCount(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "onSnapshotApplied":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "OnSnapshotApplied requires 2 args")
      flag.Usage()
    }
    arg303 := flag.Arg(1)
    mbTrans304 := thrift.NewTMemoryBufferLen(len(arg303))
    defer mbTrans304.Close()
    _, err305 := mbTrans304.WriteString(arg303)
    if err305 != nil {
      Usage()
      return
    }
    factory306 := thrift.NewTJSONProtocolFactory()
    jsProt307 := factory306.GetProtocol(mbTrans304)
    argvalue0 := cluster.NewNode()
    err308 := argvalue0.Read(jsProt307)
    if err308 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg309 := flag.Arg(2)
    mbTrans310 := thrift.NewTMemoryBufferLen(len(arg309))
    defer mbTrans310.Close()
    _, err311 := mbTrans310.WriteString(arg309)
    if err311 != nil { 
      Usage()
      return
    }
    factory312 := thrift.NewTJSONProtocolFactory()
    jsProt313 := factory312.GetProtocol(mbTrans310)
    containerStruct1 := cluster.NewTSDataServiceOnSnapshotAppliedArgs()
    err314 := containerStruct1.ReadField2(jsProt313)
    if err314 != nil {
      Usage()
      return
    }
    argvalue1 := containerStruct1.Slots
    value1 := argvalue1
    fmt.Print(client.OnSnapshotApplied(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "sendHeartbeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendHeartbeat requires 1 args")
      flag.Usage()
    }
    arg315 := flag.Arg(1)
    mbTrans316 := thrift.NewTMemoryBufferLen(len(arg315))
    defer mbTrans316.Close()
    _, err317 := mbTrans316.WriteString(arg315)
    if err317 != nil {
      Usage()
      return
    }
    factory318 := thrift.NewTJSONProtocolFactory()
    jsProt319 := factory318.GetProtocol(mbTrans316)
    argvalue0 := cluster.NewHeartBeatRequest()
    err320 := argvalue0.Read(jsProt319)
    if err320 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendHeartbeat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startElection":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartElection requires 1 args")
      flag.Usage()
    }
    arg321 := flag.Arg(1)
    mbTrans322 := thrift.NewTMemoryBufferLen(len(arg321))
    defer mbTrans322.Close()
    _, err323 := mbTrans322.WriteString(arg321)
    if err323 != nil {
      Usage()
      return
    }
    factory324 := thrift.NewTJSONProtocolFactory()
    jsProt325 := factory324.GetProtocol(mbTrans322)
    argvalue0 := cluster.NewElectionRequest()
    err326 := argvalue0.Read(jsProt325)
    if err326 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartElection(context.Background(), value0))
    fmt.Print("\n")
    break
  case "appendEntries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AppendEntries requires 1 args")
      flag.Usage()
    }
    arg327 := flag.Arg(1)
    mbTrans328 := thrift.NewTMemoryBufferLen(len(arg327))
    defer mbTrans328.Close()
    _, err329 := mbTrans328.WriteString(arg327)
    if err329 != nil {
      Usage()
      return
    }
    factory330 := thrift.NewTJSONProtocolFactory()
    jsProt331 := factory330.GetProtocol(mbTrans328)
    argvalue0 := cluster.NewAppendEntriesRequest()
    err332 := argvalue0.Read(jsProt331)
    if err332 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AppendEntries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "appendEntry":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AppendEntry requires 1 args")
      flag.Usage()
    }
    arg333 := flag.Arg(1)
    mbTrans334 := thrift.NewTMemoryBufferLen(len(arg333))
    defer mbTrans334.Close()
    _, err335 := mbTrans334.WriteString(arg333)
    if err335 != nil {
      Usage()
      return
    }
    factory336 := thrift.NewTJSONProtocolFactory()
    jsProt337 := factory336.GetProtocol(mbTrans334)
    argvalue0 := cluster.NewAppendEntryRequest()
    err338 := argvalue0.Read(jsProt337)
    if err338 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AppendEntry(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendSnapshot requires 1 args")
      flag.Usage()
    }
    arg339 := flag.Arg(1)
    mbTrans340 := thrift.NewTMemoryBufferLen(len(arg339))
    defer mbTrans340.Close()
    _, err341 := mbTrans340.WriteString(arg339)
    if err341 != nil {
      Usage()
      return
    }
    factory342 := thrift.NewTJSONProtocolFactory()
    jsProt343 := factory342.GetProtocol(mbTrans340)
    argvalue0 := cluster.NewSendSnapshotRequest()
    err344 := argvalue0.Read(jsProt343)
    if err344 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendSnapshot(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeNonQueryPlan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteNonQueryPlan requires 1 args")
      flag.Usage()
    }
    arg345 := flag.Arg(1)
    mbTrans346 := thrift.NewTMemoryBufferLen(len(arg345))
    defer mbTrans346.Close()
    _, err347 := mbTrans346.WriteString(arg345)
    if err347 != nil {
      Usage()
      return
    }
    factory348 := thrift.NewTJSONProtocolFactory()
    jsProt349 := factory348.GetProtocol(mbTrans346)
    argvalue0 := cluster.NewExecutNonQueryReq()
    err350 := argvalue0.Read(jsProt349)
    if err350 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteNonQueryPlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestCommitIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequestCommitIndex requires 1 args")
      flag.Usage()
    }
    arg351 := flag.Arg(1)
    mbTrans352 := thrift.NewTMemoryBufferLen(len(arg351))
    defer mbTrans352.Close()
    _, err353 := mbTrans352.WriteString(arg351)
    if err353 != nil {
      Usage()
      return
    }
    factory354 := thrift.NewTJSONProtocolFactory()
    jsProt355 := factory354.GetProtocol(mbTrans352)
    argvalue0 := cluster.NewNode()
    err356 := argvalue0.Read(jsProt355)
    if err356 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequestCommitIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "readFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReadFile requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err358 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err358 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err359 := (strconv.Atoi(flag.Arg(3)))
    if err359 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.ReadFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "matchTerm":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "MatchTerm requires 3 args")
      flag.Usage()
    }
    argvalue0, err360 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err360 != nil {
      Usage()
      return
    }
    value0 := cluster.Long(argvalue0)
    argvalue1, err361 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err361 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    arg362 := flag.Arg(3)
    mbTrans363 := thrift.NewTMemoryBufferLen(len(arg362))
    defer mbTrans363.Close()
    _, err364 := mbTrans363.WriteString(arg362)
    if err364 != nil {
      Usage()
      return
    }
    factory365 := thrift.NewTJSONProtocolFactory()
    jsProt366 := factory365.GetProtocol(mbTrans363)
    argvalue2 := cluster.NewNode()
    err367 := argvalue2.Read(jsProt366)
    if err367 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.MatchTerm(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
