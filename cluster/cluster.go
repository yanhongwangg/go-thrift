// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package cluster

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"rpc"

)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

var _ = rpc.GoUnusedProtection__
type Int int32

func IntPtr(v Int) *Int { return &v }

type Short int16

func ShortPtr(v Short) *Short { return &v }

type Long int64

func LongPtr(v Long) *Long { return &v }

// Attributes:
//  - Term
//  - CommitLogIndex
//  - CommitLogTerm
//  - Leader
//  - RequireIdentifier
//  - RegenerateIdentifier
//  - PartitionTableBytes
//  - Header
type HeartBeatRequest struct {
  Term Long `thrift:"term,1,required" db:"term" json:"term"`
  CommitLogIndex Long `thrift:"commitLogIndex,2,required" db:"commitLogIndex" json:"commitLogIndex"`
  CommitLogTerm Long `thrift:"commitLogTerm,3,required" db:"commitLogTerm" json:"commitLogTerm"`
  Leader *Node `thrift:"leader,4,required" db:"leader" json:"leader"`
  RequireIdentifier bool `thrift:"requireIdentifier,5,required" db:"requireIdentifier" json:"requireIdentifier"`
  RegenerateIdentifier bool `thrift:"regenerateIdentifier,6,required" db:"regenerateIdentifier" json:"regenerateIdentifier"`
  PartitionTableBytes []byte `thrift:"partitionTableBytes,7" db:"partitionTableBytes" json:"partitionTableBytes,omitempty"`
  Header *Node `thrift:"header,8" db:"header" json:"header,omitempty"`
}

func NewHeartBeatRequest() *HeartBeatRequest {
  return &HeartBeatRequest{}
}


func (p *HeartBeatRequest) GetTerm() Long {
  return p.Term
}

func (p *HeartBeatRequest) GetCommitLogIndex() Long {
  return p.CommitLogIndex
}

func (p *HeartBeatRequest) GetCommitLogTerm() Long {
  return p.CommitLogTerm
}
var HeartBeatRequest_Leader_DEFAULT *Node
func (p *HeartBeatRequest) GetLeader() *Node {
  if !p.IsSetLeader() {
    return HeartBeatRequest_Leader_DEFAULT
  }
return p.Leader
}

func (p *HeartBeatRequest) GetRequireIdentifier() bool {
  return p.RequireIdentifier
}

func (p *HeartBeatRequest) GetRegenerateIdentifier() bool {
  return p.RegenerateIdentifier
}
var HeartBeatRequest_PartitionTableBytes_DEFAULT []byte

func (p *HeartBeatRequest) GetPartitionTableBytes() []byte {
  return p.PartitionTableBytes
}
var HeartBeatRequest_Header_DEFAULT *Node
func (p *HeartBeatRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return HeartBeatRequest_Header_DEFAULT
  }
return p.Header
}
func (p *HeartBeatRequest) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *HeartBeatRequest) IsSetPartitionTableBytes() bool {
  return p.PartitionTableBytes != nil
}

func (p *HeartBeatRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *HeartBeatRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTerm bool = false;
  var issetCommitLogIndex bool = false;
  var issetCommitLogTerm bool = false;
  var issetLeader bool = false;
  var issetRequireIdentifier bool = false;
  var issetRegenerateIdentifier bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetTerm = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetCommitLogIndex = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetCommitLogTerm = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetLeader = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetRequireIdentifier = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetRegenerateIdentifier = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTerm{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Term is not set"));
  }
  if !issetCommitLogIndex{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CommitLogIndex is not set"));
  }
  if !issetCommitLogTerm{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field CommitLogTerm is not set"));
  }
  if !issetLeader{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Leader is not set"));
  }
  if !issetRequireIdentifier{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequireIdentifier is not set"));
  }
  if !issetRegenerateIdentifier{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RegenerateIdentifier is not set"));
  }
  return nil
}

func (p *HeartBeatRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Long(v)
  p.Term = temp
}
  return nil
}

func (p *HeartBeatRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Long(v)
  p.CommitLogIndex = temp
}
  return nil
}

func (p *HeartBeatRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Long(v)
  p.CommitLogTerm = temp
}
  return nil
}

func (p *HeartBeatRequest)  ReadField4(iprot thrift.TProtocol) error {
  p.Leader = &Node{}
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *HeartBeatRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.RequireIdentifier = v
}
  return nil
}

func (p *HeartBeatRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RegenerateIdentifier = v
}
  return nil
}

func (p *HeartBeatRequest)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.PartitionTableBytes = v
}
  return nil
}

func (p *HeartBeatRequest)  ReadField8(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *HeartBeatRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HeartBeatRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartBeatRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term: ", p), err) }
  return err
}

func (p *HeartBeatRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commitLogIndex", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:commitLogIndex: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommitLogIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commitLogIndex (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:commitLogIndex: ", p), err) }
  return err
}

func (p *HeartBeatRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("commitLogTerm", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:commitLogTerm: ", p), err) }
  if err := oprot.WriteI64(int64(p.CommitLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.commitLogTerm (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:commitLogTerm: ", p), err) }
  return err
}

func (p *HeartBeatRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:leader: ", p), err) }
  return err
}

func (p *HeartBeatRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requireIdentifier", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:requireIdentifier: ", p), err) }
  if err := oprot.WriteBool(bool(p.RequireIdentifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requireIdentifier (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:requireIdentifier: ", p), err) }
  return err
}

func (p *HeartBeatRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("regenerateIdentifier", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:regenerateIdentifier: ", p), err) }
  if err := oprot.WriteBool(bool(p.RegenerateIdentifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.regenerateIdentifier (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:regenerateIdentifier: ", p), err) }
  return err
}

func (p *HeartBeatRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetPartitionTableBytes() {
    if err := oprot.WriteFieldBegin("partitionTableBytes", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:partitionTableBytes: ", p), err) }
    if err := oprot.WriteBinary(p.PartitionTableBytes); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partitionTableBytes (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:partitionTableBytes: ", p), err) }
  }
  return err
}

func (p *HeartBeatRequest) writeField8(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeader() {
    if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:header: ", p), err) }
    if err := p.Header.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:header: ", p), err) }
  }
  return err
}

func (p *HeartBeatRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartBeatRequest(%+v)", *p)
}

// Attributes:
//  - Term
//  - LastLogIndex
//  - LastLogTerm
//  - Follower
//  - FollowerIdentifier
//  - RequirePartitionTable
//  - Header
type HeartBeatResponse struct {
  Term Long `thrift:"term,1,required" db:"term" json:"term"`
  LastLogIndex *Long `thrift:"lastLogIndex,2" db:"lastLogIndex" json:"lastLogIndex,omitempty"`
  LastLogTerm *Long `thrift:"lastLogTerm,3" db:"lastLogTerm" json:"lastLogTerm,omitempty"`
  Follower *Node `thrift:"follower,4" db:"follower" json:"follower,omitempty"`
  FollowerIdentifier *Int `thrift:"followerIdentifier,5" db:"followerIdentifier" json:"followerIdentifier,omitempty"`
  RequirePartitionTable bool `thrift:"requirePartitionTable,6,required" db:"requirePartitionTable" json:"requirePartitionTable"`
  Header *Node `thrift:"header,7" db:"header" json:"header,omitempty"`
}

func NewHeartBeatResponse() *HeartBeatResponse {
  return &HeartBeatResponse{}
}


func (p *HeartBeatResponse) GetTerm() Long {
  return p.Term
}
var HeartBeatResponse_LastLogIndex_DEFAULT Long
func (p *HeartBeatResponse) GetLastLogIndex() Long {
  if !p.IsSetLastLogIndex() {
    return HeartBeatResponse_LastLogIndex_DEFAULT
  }
return *p.LastLogIndex
}
var HeartBeatResponse_LastLogTerm_DEFAULT Long
func (p *HeartBeatResponse) GetLastLogTerm() Long {
  if !p.IsSetLastLogTerm() {
    return HeartBeatResponse_LastLogTerm_DEFAULT
  }
return *p.LastLogTerm
}
var HeartBeatResponse_Follower_DEFAULT *Node
func (p *HeartBeatResponse) GetFollower() *Node {
  if !p.IsSetFollower() {
    return HeartBeatResponse_Follower_DEFAULT
  }
return p.Follower
}
var HeartBeatResponse_FollowerIdentifier_DEFAULT Int
func (p *HeartBeatResponse) GetFollowerIdentifier() Int {
  if !p.IsSetFollowerIdentifier() {
    return HeartBeatResponse_FollowerIdentifier_DEFAULT
  }
return *p.FollowerIdentifier
}

func (p *HeartBeatResponse) GetRequirePartitionTable() bool {
  return p.RequirePartitionTable
}
var HeartBeatResponse_Header_DEFAULT *Node
func (p *HeartBeatResponse) GetHeader() *Node {
  if !p.IsSetHeader() {
    return HeartBeatResponse_Header_DEFAULT
  }
return p.Header
}
func (p *HeartBeatResponse) IsSetLastLogIndex() bool {
  return p.LastLogIndex != nil
}

func (p *HeartBeatResponse) IsSetLastLogTerm() bool {
  return p.LastLogTerm != nil
}

func (p *HeartBeatResponse) IsSetFollower() bool {
  return p.Follower != nil
}

func (p *HeartBeatResponse) IsSetFollowerIdentifier() bool {
  return p.FollowerIdentifier != nil
}

func (p *HeartBeatResponse) IsSetHeader() bool {
  return p.Header != nil
}

func (p *HeartBeatResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTerm bool = false;
  var issetRequirePartitionTable bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetTerm = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetRequirePartitionTable = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTerm{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Term is not set"));
  }
  if !issetRequirePartitionTable{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequirePartitionTable is not set"));
  }
  return nil
}

func (p *HeartBeatResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Long(v)
  p.Term = temp
}
  return nil
}

func (p *HeartBeatResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Long(v)
  p.LastLogIndex = &temp
}
  return nil
}

func (p *HeartBeatResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Long(v)
  p.LastLogTerm = &temp
}
  return nil
}

func (p *HeartBeatResponse)  ReadField4(iprot thrift.TProtocol) error {
  p.Follower = &Node{}
  if err := p.Follower.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Follower), err)
  }
  return nil
}

func (p *HeartBeatResponse)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Int(v)
  p.FollowerIdentifier = &temp
}
  return nil
}

func (p *HeartBeatResponse)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.RequirePartitionTable = v
}
  return nil
}

func (p *HeartBeatResponse)  ReadField7(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *HeartBeatResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("HeartBeatResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *HeartBeatResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term: ", p), err) }
  return err
}

func (p *HeartBeatResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastLogIndex() {
    if err := oprot.WriteFieldBegin("lastLogIndex", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastLogIndex: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LastLogIndex)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastLogIndex (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastLogIndex: ", p), err) }
  }
  return err
}

func (p *HeartBeatResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetLastLogTerm() {
    if err := oprot.WriteFieldBegin("lastLogTerm", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastLogTerm: ", p), err) }
    if err := oprot.WriteI64(int64(*p.LastLogTerm)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lastLogTerm (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastLogTerm: ", p), err) }
  }
  return err
}

func (p *HeartBeatResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetFollower() {
    if err := oprot.WriteFieldBegin("follower", thrift.STRUCT, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:follower: ", p), err) }
    if err := p.Follower.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Follower), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:follower: ", p), err) }
  }
  return err
}

func (p *HeartBeatResponse) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetFollowerIdentifier() {
    if err := oprot.WriteFieldBegin("followerIdentifier", thrift.I32, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:followerIdentifier: ", p), err) }
    if err := oprot.WriteI32(int32(*p.FollowerIdentifier)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.followerIdentifier (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:followerIdentifier: ", p), err) }
  }
  return err
}

func (p *HeartBeatResponse) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requirePartitionTable", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:requirePartitionTable: ", p), err) }
  if err := oprot.WriteBool(bool(p.RequirePartitionTable)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requirePartitionTable (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:requirePartitionTable: ", p), err) }
  return err
}

func (p *HeartBeatResponse) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeader() {
    if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:header: ", p), err) }
    if err := p.Header.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:header: ", p), err) }
  }
  return err
}

func (p *HeartBeatResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("HeartBeatResponse(%+v)", *p)
}

// Attributes:
//  - Term
//  - LastLogTerm
//  - LastLogIndex
//  - Elector
//  - Header
//  - DataLogLastIndex
//  - DataLogLastTerm
type ElectionRequest struct {
  Term Long `thrift:"term,1,required" db:"term" json:"term"`
  LastLogTerm Long `thrift:"lastLogTerm,2,required" db:"lastLogTerm" json:"lastLogTerm"`
  LastLogIndex Long `thrift:"lastLogIndex,3,required" db:"lastLogIndex" json:"lastLogIndex"`
  Elector *Node `thrift:"elector,4,required" db:"elector" json:"elector"`
  Header *Node `thrift:"header,5" db:"header" json:"header,omitempty"`
  DataLogLastIndex *Long `thrift:"dataLogLastIndex,6" db:"dataLogLastIndex" json:"dataLogLastIndex,omitempty"`
  DataLogLastTerm *Long `thrift:"dataLogLastTerm,7" db:"dataLogLastTerm" json:"dataLogLastTerm,omitempty"`
}

func NewElectionRequest() *ElectionRequest {
  return &ElectionRequest{}
}


func (p *ElectionRequest) GetTerm() Long {
  return p.Term
}

func (p *ElectionRequest) GetLastLogTerm() Long {
  return p.LastLogTerm
}

func (p *ElectionRequest) GetLastLogIndex() Long {
  return p.LastLogIndex
}
var ElectionRequest_Elector_DEFAULT *Node
func (p *ElectionRequest) GetElector() *Node {
  if !p.IsSetElector() {
    return ElectionRequest_Elector_DEFAULT
  }
return p.Elector
}
var ElectionRequest_Header_DEFAULT *Node
func (p *ElectionRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return ElectionRequest_Header_DEFAULT
  }
return p.Header
}
var ElectionRequest_DataLogLastIndex_DEFAULT Long
func (p *ElectionRequest) GetDataLogLastIndex() Long {
  if !p.IsSetDataLogLastIndex() {
    return ElectionRequest_DataLogLastIndex_DEFAULT
  }
return *p.DataLogLastIndex
}
var ElectionRequest_DataLogLastTerm_DEFAULT Long
func (p *ElectionRequest) GetDataLogLastTerm() Long {
  if !p.IsSetDataLogLastTerm() {
    return ElectionRequest_DataLogLastTerm_DEFAULT
  }
return *p.DataLogLastTerm
}
func (p *ElectionRequest) IsSetElector() bool {
  return p.Elector != nil
}

func (p *ElectionRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *ElectionRequest) IsSetDataLogLastIndex() bool {
  return p.DataLogLastIndex != nil
}

func (p *ElectionRequest) IsSetDataLogLastTerm() bool {
  return p.DataLogLastTerm != nil
}

func (p *ElectionRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTerm bool = false;
  var issetLastLogTerm bool = false;
  var issetLastLogIndex bool = false;
  var issetElector bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetTerm = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetLastLogTerm = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetLastLogIndex = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetElector = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTerm{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Term is not set"));
  }
  if !issetLastLogTerm{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LastLogTerm is not set"));
  }
  if !issetLastLogIndex{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LastLogIndex is not set"));
  }
  if !issetElector{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Elector is not set"));
  }
  return nil
}

func (p *ElectionRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Long(v)
  p.Term = temp
}
  return nil
}

func (p *ElectionRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Long(v)
  p.LastLogTerm = temp
}
  return nil
}

func (p *ElectionRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Long(v)
  p.LastLogIndex = temp
}
  return nil
}

func (p *ElectionRequest)  ReadField4(iprot thrift.TProtocol) error {
  p.Elector = &Node{}
  if err := p.Elector.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Elector), err)
  }
  return nil
}

func (p *ElectionRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *ElectionRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Long(v)
  p.DataLogLastIndex = &temp
}
  return nil
}

func (p *ElectionRequest)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Long(v)
  p.DataLogLastTerm = &temp
}
  return nil
}

func (p *ElectionRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ElectionRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ElectionRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term: ", p), err) }
  return err
}

func (p *ElectionRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastLogTerm", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lastLogTerm: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastLogTerm (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lastLogTerm: ", p), err) }
  return err
}

func (p *ElectionRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lastLogIndex", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:lastLogIndex: ", p), err) }
  if err := oprot.WriteI64(int64(p.LastLogIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lastLogIndex (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:lastLogIndex: ", p), err) }
  return err
}

func (p *ElectionRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("elector", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:elector: ", p), err) }
  if err := p.Elector.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Elector), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:elector: ", p), err) }
  return err
}

func (p *ElectionRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeader() {
    if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:header: ", p), err) }
    if err := p.Header.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:header: ", p), err) }
  }
  return err
}

func (p *ElectionRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDataLogLastIndex() {
    if err := oprot.WriteFieldBegin("dataLogLastIndex", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dataLogLastIndex: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DataLogLastIndex)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dataLogLastIndex (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dataLogLastIndex: ", p), err) }
  }
  return err
}

func (p *ElectionRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetDataLogLastTerm() {
    if err := oprot.WriteFieldBegin("dataLogLastTerm", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dataLogLastTerm: ", p), err) }
    if err := oprot.WriteI64(int64(*p.DataLogLastTerm)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.dataLogLastTerm (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dataLogLastTerm: ", p), err) }
  }
  return err
}

func (p *ElectionRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ElectionRequest(%+v)", *p)
}

// Attributes:
//  - Term
//  - Leader
//  - PrevLogIndex
//  - PrevLogTerm
//  - LeaderCommit
//  - Entry
//  - Header
type AppendEntryRequest struct {
  Term Long `thrift:"term,1,required" db:"term" json:"term"`
  Leader *Node `thrift:"leader,2,required" db:"leader" json:"leader"`
  PrevLogIndex Long `thrift:"prevLogIndex,3,required" db:"prevLogIndex" json:"prevLogIndex"`
  PrevLogTerm Long `thrift:"prevLogTerm,4,required" db:"prevLogTerm" json:"prevLogTerm"`
  LeaderCommit Long `thrift:"leaderCommit,5,required" db:"leaderCommit" json:"leaderCommit"`
  Entry []byte `thrift:"entry,6,required" db:"entry" json:"entry"`
  Header *Node `thrift:"header,7" db:"header" json:"header,omitempty"`
}

func NewAppendEntryRequest() *AppendEntryRequest {
  return &AppendEntryRequest{}
}


func (p *AppendEntryRequest) GetTerm() Long {
  return p.Term
}
var AppendEntryRequest_Leader_DEFAULT *Node
func (p *AppendEntryRequest) GetLeader() *Node {
  if !p.IsSetLeader() {
    return AppendEntryRequest_Leader_DEFAULT
  }
return p.Leader
}

func (p *AppendEntryRequest) GetPrevLogIndex() Long {
  return p.PrevLogIndex
}

func (p *AppendEntryRequest) GetPrevLogTerm() Long {
  return p.PrevLogTerm
}

func (p *AppendEntryRequest) GetLeaderCommit() Long {
  return p.LeaderCommit
}

func (p *AppendEntryRequest) GetEntry() []byte {
  return p.Entry
}
var AppendEntryRequest_Header_DEFAULT *Node
func (p *AppendEntryRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return AppendEntryRequest_Header_DEFAULT
  }
return p.Header
}
func (p *AppendEntryRequest) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *AppendEntryRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *AppendEntryRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTerm bool = false;
  var issetLeader bool = false;
  var issetPrevLogIndex bool = false;
  var issetPrevLogTerm bool = false;
  var issetLeaderCommit bool = false;
  var issetEntry bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetTerm = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetLeader = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetPrevLogIndex = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetPrevLogTerm = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetLeaderCommit = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetEntry = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTerm{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Term is not set"));
  }
  if !issetLeader{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Leader is not set"));
  }
  if !issetPrevLogIndex{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrevLogIndex is not set"));
  }
  if !issetPrevLogTerm{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrevLogTerm is not set"));
  }
  if !issetLeaderCommit{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LeaderCommit is not set"));
  }
  if !issetEntry{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Entry is not set"));
  }
  return nil
}

func (p *AppendEntryRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Long(v)
  p.Term = temp
}
  return nil
}

func (p *AppendEntryRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Leader = &Node{}
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *AppendEntryRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Long(v)
  p.PrevLogIndex = temp
}
  return nil
}

func (p *AppendEntryRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Long(v)
  p.PrevLogTerm = temp
}
  return nil
}

func (p *AppendEntryRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Long(v)
  p.LeaderCommit = temp
}
  return nil
}

func (p *AppendEntryRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Entry = v
}
  return nil
}

func (p *AppendEntryRequest)  ReadField7(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *AppendEntryRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AppendEntryRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AppendEntryRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term: ", p), err) }
  return err
}

func (p *AppendEntryRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *AppendEntryRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prevLogIndex", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:prevLogIndex: ", p), err) }
  if err := oprot.WriteI64(int64(p.PrevLogIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prevLogIndex (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:prevLogIndex: ", p), err) }
  return err
}

func (p *AppendEntryRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prevLogTerm", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:prevLogTerm: ", p), err) }
  if err := oprot.WriteI64(int64(p.PrevLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prevLogTerm (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:prevLogTerm: ", p), err) }
  return err
}

func (p *AppendEntryRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("leaderCommit", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:leaderCommit: ", p), err) }
  if err := oprot.WriteI64(int64(p.LeaderCommit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leaderCommit (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:leaderCommit: ", p), err) }
  return err
}

func (p *AppendEntryRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entry", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:entry: ", p), err) }
  if err := oprot.WriteBinary(p.Entry); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.entry (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:entry: ", p), err) }
  return err
}

func (p *AppendEntryRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeader() {
    if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:header: ", p), err) }
    if err := p.Header.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:header: ", p), err) }
  }
  return err
}

func (p *AppendEntryRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendEntryRequest(%+v)", *p)
}

// Attributes:
//  - Term
//  - Leader
//  - Entries
//  - PrevLogIndex
//  - PrevLogTerm
//  - LeaderCommit
//  - Header
type AppendEntriesRequest struct {
  Term Long `thrift:"term,1,required" db:"term" json:"term"`
  Leader *Node `thrift:"leader,2,required" db:"leader" json:"leader"`
  Entries [][]byte `thrift:"entries,3,required" db:"entries" json:"entries"`
  PrevLogIndex Long `thrift:"prevLogIndex,4,required" db:"prevLogIndex" json:"prevLogIndex"`
  PrevLogTerm Long `thrift:"prevLogTerm,5,required" db:"prevLogTerm" json:"prevLogTerm"`
  LeaderCommit Long `thrift:"leaderCommit,6,required" db:"leaderCommit" json:"leaderCommit"`
  Header *Node `thrift:"header,7" db:"header" json:"header,omitempty"`
}

func NewAppendEntriesRequest() *AppendEntriesRequest {
  return &AppendEntriesRequest{}
}


func (p *AppendEntriesRequest) GetTerm() Long {
  return p.Term
}
var AppendEntriesRequest_Leader_DEFAULT *Node
func (p *AppendEntriesRequest) GetLeader() *Node {
  if !p.IsSetLeader() {
    return AppendEntriesRequest_Leader_DEFAULT
  }
return p.Leader
}

func (p *AppendEntriesRequest) GetEntries() [][]byte {
  return p.Entries
}

func (p *AppendEntriesRequest) GetPrevLogIndex() Long {
  return p.PrevLogIndex
}

func (p *AppendEntriesRequest) GetPrevLogTerm() Long {
  return p.PrevLogTerm
}

func (p *AppendEntriesRequest) GetLeaderCommit() Long {
  return p.LeaderCommit
}
var AppendEntriesRequest_Header_DEFAULT *Node
func (p *AppendEntriesRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return AppendEntriesRequest_Header_DEFAULT
  }
return p.Header
}
func (p *AppendEntriesRequest) IsSetLeader() bool {
  return p.Leader != nil
}

func (p *AppendEntriesRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *AppendEntriesRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTerm bool = false;
  var issetLeader bool = false;
  var issetEntries bool = false;
  var issetPrevLogIndex bool = false;
  var issetPrevLogTerm bool = false;
  var issetLeaderCommit bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetTerm = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetLeader = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetEntries = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetPrevLogIndex = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetPrevLogTerm = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetLeaderCommit = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTerm{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Term is not set"));
  }
  if !issetLeader{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Leader is not set"));
  }
  if !issetEntries{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Entries is not set"));
  }
  if !issetPrevLogIndex{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrevLogIndex is not set"));
  }
  if !issetPrevLogTerm{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrevLogTerm is not set"));
  }
  if !issetLeaderCommit{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field LeaderCommit is not set"));
  }
  return nil
}

func (p *AppendEntriesRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Long(v)
  p.Term = temp
}
  return nil
}

func (p *AppendEntriesRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Leader = &Node{}
  if err := p.Leader.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Leader), err)
  }
  return nil
}

func (p *AppendEntriesRequest)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Entries =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Entries = append(p.Entries, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *AppendEntriesRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Long(v)
  p.PrevLogIndex = temp
}
  return nil
}

func (p *AppendEntriesRequest)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Long(v)
  p.PrevLogTerm = temp
}
  return nil
}

func (p *AppendEntriesRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Long(v)
  p.LeaderCommit = temp
}
  return nil
}

func (p *AppendEntriesRequest)  ReadField7(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *AppendEntriesRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AppendEntriesRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AppendEntriesRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:term: ", p), err) }
  return err
}

func (p *AppendEntriesRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("leader", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:leader: ", p), err) }
  if err := p.Leader.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Leader), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:leader: ", p), err) }
  return err
}

func (p *AppendEntriesRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("entries", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:entries: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Entries)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Entries {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:entries: ", p), err) }
  return err
}

func (p *AppendEntriesRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prevLogIndex", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:prevLogIndex: ", p), err) }
  if err := oprot.WriteI64(int64(p.PrevLogIndex)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prevLogIndex (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:prevLogIndex: ", p), err) }
  return err
}

func (p *AppendEntriesRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prevLogTerm", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:prevLogTerm: ", p), err) }
  if err := oprot.WriteI64(int64(p.PrevLogTerm)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.prevLogTerm (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:prevLogTerm: ", p), err) }
  return err
}

func (p *AppendEntriesRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("leaderCommit", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:leaderCommit: ", p), err) }
  if err := oprot.WriteI64(int64(p.LeaderCommit)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.leaderCommit (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:leaderCommit: ", p), err) }
  return err
}

func (p *AppendEntriesRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeader() {
    if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:header: ", p), err) }
    if err := p.Header.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:header: ", p), err) }
  }
  return err
}

func (p *AppendEntriesRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AppendEntriesRequest(%+v)", *p)
}

// Attributes:
//  - RespNum
//  - PartitionTableBytes
//  - CheckStatusResponse
type AddNodeResponse struct {
  RespNum Int `thrift:"respNum,1,required" db:"respNum" json:"respNum"`
  PartitionTableBytes []byte `thrift:"partitionTableBytes,2" db:"partitionTableBytes" json:"partitionTableBytes,omitempty"`
  CheckStatusResponse *CheckStatusResponse `thrift:"checkStatusResponse,3" db:"checkStatusResponse" json:"checkStatusResponse,omitempty"`
}

func NewAddNodeResponse() *AddNodeResponse {
  return &AddNodeResponse{}
}


func (p *AddNodeResponse) GetRespNum() Int {
  return p.RespNum
}
var AddNodeResponse_PartitionTableBytes_DEFAULT []byte

func (p *AddNodeResponse) GetPartitionTableBytes() []byte {
  return p.PartitionTableBytes
}
var AddNodeResponse_CheckStatusResponse_DEFAULT *CheckStatusResponse
func (p *AddNodeResponse) GetCheckStatusResponse() *CheckStatusResponse {
  if !p.IsSetCheckStatusResponse() {
    return AddNodeResponse_CheckStatusResponse_DEFAULT
  }
return p.CheckStatusResponse
}
func (p *AddNodeResponse) IsSetPartitionTableBytes() bool {
  return p.PartitionTableBytes != nil
}

func (p *AddNodeResponse) IsSetCheckStatusResponse() bool {
  return p.CheckStatusResponse != nil
}

func (p *AddNodeResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRespNum bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetRespNum = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRespNum{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RespNum is not set"));
  }
  return nil
}

func (p *AddNodeResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Int(v)
  p.RespNum = temp
}
  return nil
}

func (p *AddNodeResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PartitionTableBytes = v
}
  return nil
}

func (p *AddNodeResponse)  ReadField3(iprot thrift.TProtocol) error {
  p.CheckStatusResponse = &CheckStatusResponse{}
  if err := p.CheckStatusResponse.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CheckStatusResponse), err)
  }
  return nil
}

func (p *AddNodeResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AddNodeResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AddNodeResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("respNum", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:respNum: ", p), err) }
  if err := oprot.WriteI32(int32(p.RespNum)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.respNum (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:respNum: ", p), err) }
  return err
}

func (p *AddNodeResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetPartitionTableBytes() {
    if err := oprot.WriteFieldBegin("partitionTableBytes", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:partitionTableBytes: ", p), err) }
    if err := oprot.WriteBinary(p.PartitionTableBytes); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.partitionTableBytes (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:partitionTableBytes: ", p), err) }
  }
  return err
}

func (p *AddNodeResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetCheckStatusResponse() {
    if err := oprot.WriteFieldBegin("checkStatusResponse", thrift.STRUCT, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:checkStatusResponse: ", p), err) }
    if err := p.CheckStatusResponse.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CheckStatusResponse), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:checkStatusResponse: ", p), err) }
  }
  return err
}

func (p *AddNodeResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AddNodeResponse(%+v)", *p)
}

// Attributes:
//  - IP
//  - MetaPort
//  - NodeIdentifier
//  - DataPort
type Node struct {
  IP string `thrift:"ip,1,required" db:"ip" json:"ip"`
  MetaPort Int `thrift:"metaPort,2,required" db:"metaPort" json:"metaPort"`
  NodeIdentifier Int `thrift:"nodeIdentifier,3,required" db:"nodeIdentifier" json:"nodeIdentifier"`
  DataPort Int `thrift:"dataPort,4,required" db:"dataPort" json:"dataPort"`
}

func NewNode() *Node {
  return &Node{}
}


func (p *Node) GetIP() string {
  return p.IP
}

func (p *Node) GetMetaPort() Int {
  return p.MetaPort
}

func (p *Node) GetNodeIdentifier() Int {
  return p.NodeIdentifier
}

func (p *Node) GetDataPort() Int {
  return p.DataPort
}
func (p *Node) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetIP bool = false;
  var issetMetaPort bool = false;
  var issetNodeIdentifier bool = false;
  var issetDataPort bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetIP = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetMetaPort = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetNodeIdentifier = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetDataPort = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetIP{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field IP is not set"));
  }
  if !issetMetaPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field MetaPort is not set"));
  }
  if !issetNodeIdentifier{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NodeIdentifier is not set"));
  }
  if !issetDataPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataPort is not set"));
  }
  return nil
}

func (p *Node)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *Node)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Int(v)
  p.MetaPort = temp
}
  return nil
}

func (p *Node)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Int(v)
  p.NodeIdentifier = temp
}
  return nil
}

func (p *Node)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Int(v)
  p.DataPort = temp
}
  return nil
}

func (p *Node) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Node"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Node) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("ip", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ip: ", p), err) }
  if err := oprot.WriteString(string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ip: ", p), err) }
  return err
}

func (p *Node) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("metaPort", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:metaPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.MetaPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.metaPort (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:metaPort: ", p), err) }
  return err
}

func (p *Node) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nodeIdentifier", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nodeIdentifier: ", p), err) }
  if err := oprot.WriteI32(int32(p.NodeIdentifier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nodeIdentifier (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nodeIdentifier: ", p), err) }
  return err
}

func (p *Node) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataPort", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dataPort: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataPort)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataPort (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dataPort: ", p), err) }
  return err
}

func (p *Node) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Node(%+v)", *p)
}

// Attributes:
//  - PartitionInterval
//  - HashSalt
//  - ReplicationNumber
//  - SeedNodeList
//  - ClusterName
type StartUpStatus struct {
  PartitionInterval Long `thrift:"partitionInterval,1,required" db:"partitionInterval" json:"partitionInterval"`
  HashSalt Int `thrift:"hashSalt,2,required" db:"hashSalt" json:"hashSalt"`
  ReplicationNumber Int `thrift:"replicationNumber,3,required" db:"replicationNumber" json:"replicationNumber"`
  SeedNodeList []*Node `thrift:"seedNodeList,4,required" db:"seedNodeList" json:"seedNodeList"`
  ClusterName string `thrift:"clusterName,5,required" db:"clusterName" json:"clusterName"`
}

func NewStartUpStatus() *StartUpStatus {
  return &StartUpStatus{}
}


func (p *StartUpStatus) GetPartitionInterval() Long {
  return p.PartitionInterval
}

func (p *StartUpStatus) GetHashSalt() Int {
  return p.HashSalt
}

func (p *StartUpStatus) GetReplicationNumber() Int {
  return p.ReplicationNumber
}

func (p *StartUpStatus) GetSeedNodeList() []*Node {
  return p.SeedNodeList
}

func (p *StartUpStatus) GetClusterName() string {
  return p.ClusterName
}
func (p *StartUpStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPartitionInterval bool = false;
  var issetHashSalt bool = false;
  var issetReplicationNumber bool = false;
  var issetSeedNodeList bool = false;
  var issetClusterName bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPartitionInterval = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetHashSalt = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetReplicationNumber = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetSeedNodeList = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetClusterName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPartitionInterval{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartitionInterval is not set"));
  }
  if !issetHashSalt{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HashSalt is not set"));
  }
  if !issetReplicationNumber{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReplicationNumber is not set"));
  }
  if !issetSeedNodeList{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SeedNodeList is not set"));
  }
  if !issetClusterName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClusterName is not set"));
  }
  return nil
}

func (p *StartUpStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Long(v)
  p.PartitionInterval = temp
}
  return nil
}

func (p *StartUpStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Int(v)
  p.HashSalt = temp
}
  return nil
}

func (p *StartUpStatus)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Int(v)
  p.ReplicationNumber = temp
}
  return nil
}

func (p *StartUpStatus)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*Node, 0, size)
  p.SeedNodeList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &Node{}
    if err := _elem1.Read(iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.SeedNodeList = append(p.SeedNodeList, _elem1)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *StartUpStatus)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ClusterName = v
}
  return nil
}

func (p *StartUpStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StartUpStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartUpStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partitionInterval", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partitionInterval: ", p), err) }
  if err := oprot.WriteI64(int64(p.PartitionInterval)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partitionInterval (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partitionInterval: ", p), err) }
  return err
}

func (p *StartUpStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hashSalt", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hashSalt: ", p), err) }
  if err := oprot.WriteI32(int32(p.HashSalt)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hashSalt (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hashSalt: ", p), err) }
  return err
}

func (p *StartUpStatus) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("replicationNumber", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replicationNumber: ", p), err) }
  if err := oprot.WriteI32(int32(p.ReplicationNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replicationNumber (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replicationNumber: ", p), err) }
  return err
}

func (p *StartUpStatus) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seedNodeList", thrift.LIST, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:seedNodeList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SeedNodeList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SeedNodeList {
    if err := v.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:seedNodeList: ", p), err) }
  return err
}

func (p *StartUpStatus) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clusterName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:clusterName: ", p), err) }
  if err := oprot.WriteString(string(p.ClusterName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clusterName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:clusterName: ", p), err) }
  return err
}

func (p *StartUpStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartUpStatus(%+v)", *p)
}

// Attributes:
//  - PartitionalIntervalEquals
//  - HashSaltEquals
//  - ReplicationNumEquals
//  - SeedNodeEquals
//  - ClusterNameEquals
type CheckStatusResponse struct {
  PartitionalIntervalEquals bool `thrift:"partitionalIntervalEquals,1,required" db:"partitionalIntervalEquals" json:"partitionalIntervalEquals"`
  HashSaltEquals bool `thrift:"hashSaltEquals,2,required" db:"hashSaltEquals" json:"hashSaltEquals"`
  ReplicationNumEquals bool `thrift:"replicationNumEquals,3,required" db:"replicationNumEquals" json:"replicationNumEquals"`
  SeedNodeEquals bool `thrift:"seedNodeEquals,4,required" db:"seedNodeEquals" json:"seedNodeEquals"`
  ClusterNameEquals bool `thrift:"clusterNameEquals,5,required" db:"clusterNameEquals" json:"clusterNameEquals"`
}

func NewCheckStatusResponse() *CheckStatusResponse {
  return &CheckStatusResponse{}
}


func (p *CheckStatusResponse) GetPartitionalIntervalEquals() bool {
  return p.PartitionalIntervalEquals
}

func (p *CheckStatusResponse) GetHashSaltEquals() bool {
  return p.HashSaltEquals
}

func (p *CheckStatusResponse) GetReplicationNumEquals() bool {
  return p.ReplicationNumEquals
}

func (p *CheckStatusResponse) GetSeedNodeEquals() bool {
  return p.SeedNodeEquals
}

func (p *CheckStatusResponse) GetClusterNameEquals() bool {
  return p.ClusterNameEquals
}
func (p *CheckStatusResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPartitionalIntervalEquals bool = false;
  var issetHashSaltEquals bool = false;
  var issetReplicationNumEquals bool = false;
  var issetSeedNodeEquals bool = false;
  var issetClusterNameEquals bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPartitionalIntervalEquals = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetHashSaltEquals = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetReplicationNumEquals = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetSeedNodeEquals = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetClusterNameEquals = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPartitionalIntervalEquals{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PartitionalIntervalEquals is not set"));
  }
  if !issetHashSaltEquals{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field HashSaltEquals is not set"));
  }
  if !issetReplicationNumEquals{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ReplicationNumEquals is not set"));
  }
  if !issetSeedNodeEquals{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SeedNodeEquals is not set"));
  }
  if !issetClusterNameEquals{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ClusterNameEquals is not set"));
  }
  return nil
}

func (p *CheckStatusResponse)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PartitionalIntervalEquals = v
}
  return nil
}

func (p *CheckStatusResponse)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HashSaltEquals = v
}
  return nil
}

func (p *CheckStatusResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ReplicationNumEquals = v
}
  return nil
}

func (p *CheckStatusResponse)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.SeedNodeEquals = v
}
  return nil
}

func (p *CheckStatusResponse)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ClusterNameEquals = v
}
  return nil
}

func (p *CheckStatusResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("CheckStatusResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *CheckStatusResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partitionalIntervalEquals", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:partitionalIntervalEquals: ", p), err) }
  if err := oprot.WriteBool(bool(p.PartitionalIntervalEquals)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partitionalIntervalEquals (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:partitionalIntervalEquals: ", p), err) }
  return err
}

func (p *CheckStatusResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("hashSaltEquals", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:hashSaltEquals: ", p), err) }
  if err := oprot.WriteBool(bool(p.HashSaltEquals)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hashSaltEquals (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:hashSaltEquals: ", p), err) }
  return err
}

func (p *CheckStatusResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("replicationNumEquals", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:replicationNumEquals: ", p), err) }
  if err := oprot.WriteBool(bool(p.ReplicationNumEquals)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.replicationNumEquals (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:replicationNumEquals: ", p), err) }
  return err
}

func (p *CheckStatusResponse) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("seedNodeEquals", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:seedNodeEquals: ", p), err) }
  if err := oprot.WriteBool(bool(p.SeedNodeEquals)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.seedNodeEquals (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:seedNodeEquals: ", p), err) }
  return err
}

func (p *CheckStatusResponse) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("clusterNameEquals", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:clusterNameEquals: ", p), err) }
  if err := oprot.WriteBool(bool(p.ClusterNameEquals)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clusterNameEquals (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:clusterNameEquals: ", p), err) }
  return err
}

func (p *CheckStatusResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("CheckStatusResponse(%+v)", *p)
}

// Attributes:
//  - SnapshotBytes
//  - Header
type SendSnapshotRequest struct {
  SnapshotBytes []byte `thrift:"snapshotBytes,1,required" db:"snapshotBytes" json:"snapshotBytes"`
  Header *Node `thrift:"header,2" db:"header" json:"header,omitempty"`
}

func NewSendSnapshotRequest() *SendSnapshotRequest {
  return &SendSnapshotRequest{}
}


func (p *SendSnapshotRequest) GetSnapshotBytes() []byte {
  return p.SnapshotBytes
}
var SendSnapshotRequest_Header_DEFAULT *Node
func (p *SendSnapshotRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return SendSnapshotRequest_Header_DEFAULT
  }
return p.Header
}
func (p *SendSnapshotRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *SendSnapshotRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSnapshotBytes bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetSnapshotBytes = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSnapshotBytes{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SnapshotBytes is not set"));
  }
  return nil
}

func (p *SendSnapshotRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SnapshotBytes = v
}
  return nil
}

func (p *SendSnapshotRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *SendSnapshotRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SendSnapshotRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SendSnapshotRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("snapshotBytes", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:snapshotBytes: ", p), err) }
  if err := oprot.WriteBinary(p.SnapshotBytes); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.snapshotBytes (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:snapshotBytes: ", p), err) }
  return err
}

func (p *SendSnapshotRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeader() {
    if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:header: ", p), err) }
    if err := p.Header.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:header: ", p), err) }
  }
  return err
}

func (p *SendSnapshotRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SendSnapshotRequest(%+v)", *p)
}

// Attributes:
//  - RequiredSlots
//  - Header
//  - RequireReadOnly
type PullSnapshotRequest struct {
  RequiredSlots []Int `thrift:"requiredSlots,1,required" db:"requiredSlots" json:"requiredSlots"`
  Header *Node `thrift:"header,2" db:"header" json:"header,omitempty"`
  RequireReadOnly bool `thrift:"requireReadOnly,3,required" db:"requireReadOnly" json:"requireReadOnly"`
}

func NewPullSnapshotRequest() *PullSnapshotRequest {
  return &PullSnapshotRequest{}
}


func (p *PullSnapshotRequest) GetRequiredSlots() []Int {
  return p.RequiredSlots
}
var PullSnapshotRequest_Header_DEFAULT *Node
func (p *PullSnapshotRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return PullSnapshotRequest_Header_DEFAULT
  }
return p.Header
}

func (p *PullSnapshotRequest) GetRequireReadOnly() bool {
  return p.RequireReadOnly
}
func (p *PullSnapshotRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *PullSnapshotRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetRequiredSlots bool = false;
  var issetRequireReadOnly bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetRequiredSlots = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetRequireReadOnly = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetRequiredSlots{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequiredSlots is not set"));
  }
  if !issetRequireReadOnly{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field RequireReadOnly is not set"));
  }
  return nil
}

func (p *PullSnapshotRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]Int, 0, size)
  p.RequiredSlots =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 Int
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Int(v)
    _elem2 = temp
}
    p.RequiredSlots = append(p.RequiredSlots, _elem2)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PullSnapshotRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *PullSnapshotRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.RequireReadOnly = v
}
  return nil
}

func (p *PullSnapshotRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PullSnapshotRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PullSnapshotRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requiredSlots", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:requiredSlots: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.RequiredSlots)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.RequiredSlots {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:requiredSlots: ", p), err) }
  return err
}

func (p *PullSnapshotRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeader() {
    if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:header: ", p), err) }
    if err := p.Header.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:header: ", p), err) }
  }
  return err
}

func (p *PullSnapshotRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requireReadOnly", thrift.BOOL, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:requireReadOnly: ", p), err) }
  if err := oprot.WriteBool(bool(p.RequireReadOnly)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.requireReadOnly (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:requireReadOnly: ", p), err) }
  return err
}

func (p *PullSnapshotRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PullSnapshotRequest(%+v)", *p)
}

// Attributes:
//  - SnapshotBytes
type PullSnapshotResp struct {
  SnapshotBytes map[Int][]byte `thrift:"snapshotBytes,1" db:"snapshotBytes" json:"snapshotBytes,omitempty"`
}

func NewPullSnapshotResp() *PullSnapshotResp {
  return &PullSnapshotResp{}
}

var PullSnapshotResp_SnapshotBytes_DEFAULT map[Int][]byte

func (p *PullSnapshotResp) GetSnapshotBytes() map[Int][]byte {
  return p.SnapshotBytes
}
func (p *PullSnapshotResp) IsSetSnapshotBytes() bool {
  return p.SnapshotBytes != nil
}

func (p *PullSnapshotResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *PullSnapshotResp)  ReadField1(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[Int][]byte, size)
  p.SnapshotBytes =  tMap
  for i := 0; i < size; i ++ {
var _key3 Int
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Int(v)
    _key3 = temp
}
var _val4 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val4 = v
}
    p.SnapshotBytes[_key3] = _val4
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *PullSnapshotResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PullSnapshotResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PullSnapshotResp) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSnapshotBytes() {
    if err := oprot.WriteFieldBegin("snapshotBytes", thrift.MAP, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:snapshotBytes: ", p), err) }
    if err := oprot.WriteMapBegin(thrift.I32, thrift.STRING, len(p.SnapshotBytes)); err != nil {
      return thrift.PrependError("error writing map begin: ", err)
    }
    for k, v := range p.SnapshotBytes {
      if err := oprot.WriteI32(int32(k)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteMapEnd(); err != nil {
      return thrift.PrependError("error writing map end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:snapshotBytes: ", p), err) }
  }
  return err
}

func (p *PullSnapshotResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PullSnapshotResp(%+v)", *p)
}

// Attributes:
//  - PlanBytes
//  - Header
type ExecutNonQueryReq struct {
  PlanBytes []byte `thrift:"planBytes,1,required" db:"planBytes" json:"planBytes"`
  Header *Node `thrift:"header,2" db:"header" json:"header,omitempty"`
}

func NewExecutNonQueryReq() *ExecutNonQueryReq {
  return &ExecutNonQueryReq{}
}


func (p *ExecutNonQueryReq) GetPlanBytes() []byte {
  return p.PlanBytes
}
var ExecutNonQueryReq_Header_DEFAULT *Node
func (p *ExecutNonQueryReq) GetHeader() *Node {
  if !p.IsSetHeader() {
    return ExecutNonQueryReq_Header_DEFAULT
  }
return p.Header
}
func (p *ExecutNonQueryReq) IsSetHeader() bool {
  return p.Header != nil
}

func (p *ExecutNonQueryReq) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPlanBytes bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPlanBytes = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPlanBytes{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PlanBytes is not set"));
  }
  return nil
}

func (p *ExecutNonQueryReq)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.PlanBytes = v
}
  return nil
}

func (p *ExecutNonQueryReq)  ReadField2(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *ExecutNonQueryReq) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ExecutNonQueryReq"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ExecutNonQueryReq) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("planBytes", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:planBytes: ", p), err) }
  if err := oprot.WriteBinary(p.PlanBytes); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.planBytes (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:planBytes: ", p), err) }
  return err
}

func (p *ExecutNonQueryReq) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeader() {
    if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:header: ", p), err) }
    if err := p.Header.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:header: ", p), err) }
  }
  return err
}

func (p *ExecutNonQueryReq) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ExecutNonQueryReq(%+v)", *p)
}

// Attributes:
//  - PrefixPaths
//  - Header
type PullSchemaRequest struct {
  PrefixPaths []string `thrift:"prefixPaths,1,required" db:"prefixPaths" json:"prefixPaths"`
  Header *Node `thrift:"header,2" db:"header" json:"header,omitempty"`
}

func NewPullSchemaRequest() *PullSchemaRequest {
  return &PullSchemaRequest{}
}


func (p *PullSchemaRequest) GetPrefixPaths() []string {
  return p.PrefixPaths
}
var PullSchemaRequest_Header_DEFAULT *Node
func (p *PullSchemaRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return PullSchemaRequest_Header_DEFAULT
  }
return p.Header
}
func (p *PullSchemaRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *PullSchemaRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPrefixPaths bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPrefixPaths = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPrefixPaths{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field PrefixPaths is not set"));
  }
  return nil
}

func (p *PullSchemaRequest)  ReadField1(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PrefixPaths =  tSlice
  for i := 0; i < size; i ++ {
var _elem5 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem5 = v
}
    p.PrefixPaths = append(p.PrefixPaths, _elem5)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *PullSchemaRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *PullSchemaRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PullSchemaRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PullSchemaRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("prefixPaths", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:prefixPaths: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PrefixPaths)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PrefixPaths {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:prefixPaths: ", p), err) }
  return err
}

func (p *PullSchemaRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetHeader() {
    if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:header: ", p), err) }
    if err := p.Header.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:header: ", p), err) }
  }
  return err
}

func (p *PullSchemaRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PullSchemaRequest(%+v)", *p)
}

// Attributes:
//  - SchemaBytes
type PullSchemaResp struct {
  SchemaBytes []byte `thrift:"schemaBytes,1,required" db:"schemaBytes" json:"schemaBytes"`
}

func NewPullSchemaResp() *PullSchemaResp {
  return &PullSchemaResp{}
}


func (p *PullSchemaResp) GetSchemaBytes() []byte {
  return p.SchemaBytes
}
func (p *PullSchemaResp) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetSchemaBytes bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetSchemaBytes = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetSchemaBytes{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field SchemaBytes is not set"));
  }
  return nil
}

func (p *PullSchemaResp)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.SchemaBytes = v
}
  return nil
}

func (p *PullSchemaResp) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PullSchemaResp"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PullSchemaResp) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("schemaBytes", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:schemaBytes: ", p), err) }
  if err := oprot.WriteBinary(p.SchemaBytes); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.schemaBytes (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:schemaBytes: ", p), err) }
  return err
}

func (p *PullSchemaResp) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PullSchemaResp(%+v)", *p)
}

// Attributes:
//  - Path
//  - TimeFilterBytes
//  - ValueFilterBytes
//  - QueryId
//  - Requester
//  - Header
//  - DataTypeOrdinal
//  - DeviceMeasurements
type SingleSeriesQueryRequest struct {
  Path string `thrift:"path,1,required" db:"path" json:"path"`
  TimeFilterBytes []byte `thrift:"timeFilterBytes,2" db:"timeFilterBytes" json:"timeFilterBytes,omitempty"`
  ValueFilterBytes []byte `thrift:"valueFilterBytes,3" db:"valueFilterBytes" json:"valueFilterBytes,omitempty"`
  QueryId Long `thrift:"queryId,4,required" db:"queryId" json:"queryId"`
  Requester *Node `thrift:"requester,5,required" db:"requester" json:"requester"`
  Header *Node `thrift:"header,6,required" db:"header" json:"header"`
  DataTypeOrdinal Int `thrift:"dataTypeOrdinal,7,required" db:"dataTypeOrdinal" json:"dataTypeOrdinal"`
  DeviceMeasurements []string `thrift:"deviceMeasurements,8,required" db:"deviceMeasurements" json:"deviceMeasurements"`
}

func NewSingleSeriesQueryRequest() *SingleSeriesQueryRequest {
  return &SingleSeriesQueryRequest{}
}


func (p *SingleSeriesQueryRequest) GetPath() string {
  return p.Path
}
var SingleSeriesQueryRequest_TimeFilterBytes_DEFAULT []byte

func (p *SingleSeriesQueryRequest) GetTimeFilterBytes() []byte {
  return p.TimeFilterBytes
}
var SingleSeriesQueryRequest_ValueFilterBytes_DEFAULT []byte

func (p *SingleSeriesQueryRequest) GetValueFilterBytes() []byte {
  return p.ValueFilterBytes
}

func (p *SingleSeriesQueryRequest) GetQueryId() Long {
  return p.QueryId
}
var SingleSeriesQueryRequest_Requester_DEFAULT *Node
func (p *SingleSeriesQueryRequest) GetRequester() *Node {
  if !p.IsSetRequester() {
    return SingleSeriesQueryRequest_Requester_DEFAULT
  }
return p.Requester
}
var SingleSeriesQueryRequest_Header_DEFAULT *Node
func (p *SingleSeriesQueryRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return SingleSeriesQueryRequest_Header_DEFAULT
  }
return p.Header
}

func (p *SingleSeriesQueryRequest) GetDataTypeOrdinal() Int {
  return p.DataTypeOrdinal
}

func (p *SingleSeriesQueryRequest) GetDeviceMeasurements() []string {
  return p.DeviceMeasurements
}
func (p *SingleSeriesQueryRequest) IsSetTimeFilterBytes() bool {
  return p.TimeFilterBytes != nil
}

func (p *SingleSeriesQueryRequest) IsSetValueFilterBytes() bool {
  return p.ValueFilterBytes != nil
}

func (p *SingleSeriesQueryRequest) IsSetRequester() bool {
  return p.Requester != nil
}

func (p *SingleSeriesQueryRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *SingleSeriesQueryRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPath bool = false;
  var issetQueryId bool = false;
  var issetRequester bool = false;
  var issetHeader bool = false;
  var issetDataTypeOrdinal bool = false;
  var issetDeviceMeasurements bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPath = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetQueryId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetRequester = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetHeader = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
        issetDataTypeOrdinal = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
        issetDeviceMeasurements = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPath{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Path is not set"));
  }
  if !issetQueryId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryId is not set"));
  }
  if !issetRequester{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Requester is not set"));
  }
  if !issetHeader{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Header is not set"));
  }
  if !issetDataTypeOrdinal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataTypeOrdinal is not set"));
  }
  if !issetDeviceMeasurements{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DeviceMeasurements is not set"));
  }
  return nil
}

func (p *SingleSeriesQueryRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *SingleSeriesQueryRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.TimeFilterBytes = v
}
  return nil
}

func (p *SingleSeriesQueryRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ValueFilterBytes = v
}
  return nil
}

func (p *SingleSeriesQueryRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Long(v)
  p.QueryId = temp
}
  return nil
}

func (p *SingleSeriesQueryRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.Requester = &Node{}
  if err := p.Requester.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Requester), err)
  }
  return nil
}

func (p *SingleSeriesQueryRequest)  ReadField6(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *SingleSeriesQueryRequest)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Int(v)
  p.DataTypeOrdinal = temp
}
  return nil
}

func (p *SingleSeriesQueryRequest)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.DeviceMeasurements =  tSet
  for i := 0; i < size; i ++ {
var _elem6 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem6 = v
}
    p.DeviceMeasurements = append(p.DeviceMeasurements, _elem6)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *SingleSeriesQueryRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SingleSeriesQueryRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SingleSeriesQueryRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  return err
}

func (p *SingleSeriesQueryRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeFilterBytes() {
    if err := oprot.WriteFieldBegin("timeFilterBytes", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeFilterBytes: ", p), err) }
    if err := oprot.WriteBinary(p.TimeFilterBytes); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeFilterBytes (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeFilterBytes: ", p), err) }
  }
  return err
}

func (p *SingleSeriesQueryRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetValueFilterBytes() {
    if err := oprot.WriteFieldBegin("valueFilterBytes", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:valueFilterBytes: ", p), err) }
    if err := oprot.WriteBinary(p.ValueFilterBytes); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.valueFilterBytes (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:valueFilterBytes: ", p), err) }
  }
  return err
}

func (p *SingleSeriesQueryRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queryId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:queryId: ", p), err) }
  if err := oprot.WriteI64(int64(p.QueryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queryId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:queryId: ", p), err) }
  return err
}

func (p *SingleSeriesQueryRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requester", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:requester: ", p), err) }
  if err := p.Requester.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Requester), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:requester: ", p), err) }
  return err
}

func (p *SingleSeriesQueryRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:header: ", p), err) }
  return err
}

func (p *SingleSeriesQueryRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataTypeOrdinal", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dataTypeOrdinal: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataTypeOrdinal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataTypeOrdinal (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dataTypeOrdinal: ", p), err) }
  return err
}

func (p *SingleSeriesQueryRequest) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceMeasurements", thrift.SET, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:deviceMeasurements: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.DeviceMeasurements)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.DeviceMeasurements); i++ {
    for j := i+1; j<len(p.DeviceMeasurements); j++ {
      if reflect.DeepEqual(p.DeviceMeasurements[i],p.DeviceMeasurements[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.DeviceMeasurements[i]))
      }
    }
  }
  for _, v := range p.DeviceMeasurements {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:deviceMeasurements: ", p), err) }
  return err
}

func (p *SingleSeriesQueryRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SingleSeriesQueryRequest(%+v)", *p)
}

// Attributes:
//  - Path
//  - QueryTime
//  - BeforeRange
//  - QueryId
//  - Requester
//  - Header
//  - DataTypeOrdinal
//  - DeviceMeasurements
type PreviousFillRequest struct {
  Path string `thrift:"path,1,required" db:"path" json:"path"`
  QueryTime Long `thrift:"queryTime,2,required" db:"queryTime" json:"queryTime"`
  BeforeRange Long `thrift:"beforeRange,3,required" db:"beforeRange" json:"beforeRange"`
  QueryId Long `thrift:"queryId,4,required" db:"queryId" json:"queryId"`
  Requester *Node `thrift:"requester,5,required" db:"requester" json:"requester"`
  Header *Node `thrift:"header,6,required" db:"header" json:"header"`
  DataTypeOrdinal Int `thrift:"dataTypeOrdinal,7,required" db:"dataTypeOrdinal" json:"dataTypeOrdinal"`
  DeviceMeasurements []string `thrift:"deviceMeasurements,8,required" db:"deviceMeasurements" json:"deviceMeasurements"`
}

func NewPreviousFillRequest() *PreviousFillRequest {
  return &PreviousFillRequest{}
}


func (p *PreviousFillRequest) GetPath() string {
  return p.Path
}

func (p *PreviousFillRequest) GetQueryTime() Long {
  return p.QueryTime
}

func (p *PreviousFillRequest) GetBeforeRange() Long {
  return p.BeforeRange
}

func (p *PreviousFillRequest) GetQueryId() Long {
  return p.QueryId
}
var PreviousFillRequest_Requester_DEFAULT *Node
func (p *PreviousFillRequest) GetRequester() *Node {
  if !p.IsSetRequester() {
    return PreviousFillRequest_Requester_DEFAULT
  }
return p.Requester
}
var PreviousFillRequest_Header_DEFAULT *Node
func (p *PreviousFillRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return PreviousFillRequest_Header_DEFAULT
  }
return p.Header
}

func (p *PreviousFillRequest) GetDataTypeOrdinal() Int {
  return p.DataTypeOrdinal
}

func (p *PreviousFillRequest) GetDeviceMeasurements() []string {
  return p.DeviceMeasurements
}
func (p *PreviousFillRequest) IsSetRequester() bool {
  return p.Requester != nil
}

func (p *PreviousFillRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *PreviousFillRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPath bool = false;
  var issetQueryTime bool = false;
  var issetBeforeRange bool = false;
  var issetQueryId bool = false;
  var issetRequester bool = false;
  var issetHeader bool = false;
  var issetDataTypeOrdinal bool = false;
  var issetDeviceMeasurements bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPath = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetQueryTime = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetBeforeRange = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetQueryId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetRequester = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetHeader = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
        issetDataTypeOrdinal = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
        issetDeviceMeasurements = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPath{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Path is not set"));
  }
  if !issetQueryTime{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryTime is not set"));
  }
  if !issetBeforeRange{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field BeforeRange is not set"));
  }
  if !issetQueryId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryId is not set"));
  }
  if !issetRequester{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Requester is not set"));
  }
  if !issetHeader{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Header is not set"));
  }
  if !issetDataTypeOrdinal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataTypeOrdinal is not set"));
  }
  if !issetDeviceMeasurements{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DeviceMeasurements is not set"));
  }
  return nil
}

func (p *PreviousFillRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *PreviousFillRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Long(v)
  p.QueryTime = temp
}
  return nil
}

func (p *PreviousFillRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Long(v)
  p.BeforeRange = temp
}
  return nil
}

func (p *PreviousFillRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Long(v)
  p.QueryId = temp
}
  return nil
}

func (p *PreviousFillRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.Requester = &Node{}
  if err := p.Requester.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Requester), err)
  }
  return nil
}

func (p *PreviousFillRequest)  ReadField6(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *PreviousFillRequest)  ReadField7(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  temp := Int(v)
  p.DataTypeOrdinal = temp
}
  return nil
}

func (p *PreviousFillRequest)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.DeviceMeasurements =  tSet
  for i := 0; i < size; i ++ {
var _elem7 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem7 = v
}
    p.DeviceMeasurements = append(p.DeviceMeasurements, _elem7)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *PreviousFillRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("PreviousFillRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *PreviousFillRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  return err
}

func (p *PreviousFillRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queryTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:queryTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.QueryTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queryTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:queryTime: ", p), err) }
  return err
}

func (p *PreviousFillRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("beforeRange", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:beforeRange: ", p), err) }
  if err := oprot.WriteI64(int64(p.BeforeRange)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.beforeRange (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:beforeRange: ", p), err) }
  return err
}

func (p *PreviousFillRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queryId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:queryId: ", p), err) }
  if err := oprot.WriteI64(int64(p.QueryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queryId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:queryId: ", p), err) }
  return err
}

func (p *PreviousFillRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requester", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:requester: ", p), err) }
  if err := p.Requester.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Requester), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:requester: ", p), err) }
  return err
}

func (p *PreviousFillRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:header: ", p), err) }
  return err
}

func (p *PreviousFillRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataTypeOrdinal", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dataTypeOrdinal: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataTypeOrdinal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataTypeOrdinal (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dataTypeOrdinal: ", p), err) }
  return err
}

func (p *PreviousFillRequest) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceMeasurements", thrift.SET, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:deviceMeasurements: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.DeviceMeasurements)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.DeviceMeasurements); i++ {
    for j := i+1; j<len(p.DeviceMeasurements); j++ {
      if reflect.DeepEqual(p.DeviceMeasurements[i],p.DeviceMeasurements[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.DeviceMeasurements[i]))
      }
    }
  }
  for _, v := range p.DeviceMeasurements {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:deviceMeasurements: ", p), err) }
  return err
}

func (p *PreviousFillRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("PreviousFillRequest(%+v)", *p)
}

type TNodeStatus struct {
}

func NewTNodeStatus() *TNodeStatus {
  return &TNodeStatus{}
}

func (p *TNodeStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TNodeStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TNodeStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TNodeStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TNodeStatus(%+v)", *p)
}

// Attributes:
//  - Path
//  - Aggregations
//  - DataTypeOrdinal
//  - TimeFilterBytes
//  - Header
//  - QueryId
//  - Requestor
//  - DeviceMeasurements
type GetAggrResultRequest struct {
  Path string `thrift:"path,1,required" db:"path" json:"path"`
  Aggregations []string `thrift:"aggregations,2,required" db:"aggregations" json:"aggregations"`
  DataTypeOrdinal Int `thrift:"dataTypeOrdinal,3,required" db:"dataTypeOrdinal" json:"dataTypeOrdinal"`
  TimeFilterBytes []byte `thrift:"timeFilterBytes,4" db:"timeFilterBytes" json:"timeFilterBytes,omitempty"`
  Header *Node `thrift:"header,5,required" db:"header" json:"header"`
  QueryId Long `thrift:"queryId,6,required" db:"queryId" json:"queryId"`
  Requestor *Node `thrift:"requestor,7,required" db:"requestor" json:"requestor"`
  DeviceMeasurements []string `thrift:"deviceMeasurements,8,required" db:"deviceMeasurements" json:"deviceMeasurements"`
}

func NewGetAggrResultRequest() *GetAggrResultRequest {
  return &GetAggrResultRequest{}
}


func (p *GetAggrResultRequest) GetPath() string {
  return p.Path
}

func (p *GetAggrResultRequest) GetAggregations() []string {
  return p.Aggregations
}

func (p *GetAggrResultRequest) GetDataTypeOrdinal() Int {
  return p.DataTypeOrdinal
}
var GetAggrResultRequest_TimeFilterBytes_DEFAULT []byte

func (p *GetAggrResultRequest) GetTimeFilterBytes() []byte {
  return p.TimeFilterBytes
}
var GetAggrResultRequest_Header_DEFAULT *Node
func (p *GetAggrResultRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return GetAggrResultRequest_Header_DEFAULT
  }
return p.Header
}

func (p *GetAggrResultRequest) GetQueryId() Long {
  return p.QueryId
}
var GetAggrResultRequest_Requestor_DEFAULT *Node
func (p *GetAggrResultRequest) GetRequestor() *Node {
  if !p.IsSetRequestor() {
    return GetAggrResultRequest_Requestor_DEFAULT
  }
return p.Requestor
}

func (p *GetAggrResultRequest) GetDeviceMeasurements() []string {
  return p.DeviceMeasurements
}
func (p *GetAggrResultRequest) IsSetTimeFilterBytes() bool {
  return p.TimeFilterBytes != nil
}

func (p *GetAggrResultRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GetAggrResultRequest) IsSetRequestor() bool {
  return p.Requestor != nil
}

func (p *GetAggrResultRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPath bool = false;
  var issetAggregations bool = false;
  var issetDataTypeOrdinal bool = false;
  var issetHeader bool = false;
  var issetQueryId bool = false;
  var issetRequestor bool = false;
  var issetDeviceMeasurements bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPath = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetAggregations = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetDataTypeOrdinal = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetHeader = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetQueryId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
        issetRequestor = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
        issetDeviceMeasurements = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPath{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Path is not set"));
  }
  if !issetAggregations{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Aggregations is not set"));
  }
  if !issetDataTypeOrdinal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataTypeOrdinal is not set"));
  }
  if !issetHeader{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Header is not set"));
  }
  if !issetQueryId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryId is not set"));
  }
  if !issetRequestor{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Requestor is not set"));
  }
  if !issetDeviceMeasurements{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DeviceMeasurements is not set"));
  }
  return nil
}

func (p *GetAggrResultRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *GetAggrResultRequest)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Aggregations =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.Aggregations = append(p.Aggregations, _elem8)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GetAggrResultRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Int(v)
  p.DataTypeOrdinal = temp
}
  return nil
}

func (p *GetAggrResultRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TimeFilterBytes = v
}
  return nil
}

func (p *GetAggrResultRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GetAggrResultRequest)  ReadField6(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  temp := Long(v)
  p.QueryId = temp
}
  return nil
}

func (p *GetAggrResultRequest)  ReadField7(iprot thrift.TProtocol) error {
  p.Requestor = &Node{}
  if err := p.Requestor.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Requestor), err)
  }
  return nil
}

func (p *GetAggrResultRequest)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.DeviceMeasurements =  tSet
  for i := 0; i < size; i ++ {
var _elem9 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem9 = v
}
    p.DeviceMeasurements = append(p.DeviceMeasurements, _elem9)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GetAggrResultRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GetAggrResultRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GetAggrResultRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  return err
}

func (p *GetAggrResultRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aggregations", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:aggregations: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Aggregations)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Aggregations {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:aggregations: ", p), err) }
  return err
}

func (p *GetAggrResultRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataTypeOrdinal", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dataTypeOrdinal: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataTypeOrdinal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataTypeOrdinal (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dataTypeOrdinal: ", p), err) }
  return err
}

func (p *GetAggrResultRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeFilterBytes() {
    if err := oprot.WriteFieldBegin("timeFilterBytes", thrift.STRING, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:timeFilterBytes: ", p), err) }
    if err := oprot.WriteBinary(p.TimeFilterBytes); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeFilterBytes (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:timeFilterBytes: ", p), err) }
  }
  return err
}

func (p *GetAggrResultRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:header: ", p), err) }
  return err
}

func (p *GetAggrResultRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queryId", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:queryId: ", p), err) }
  if err := oprot.WriteI64(int64(p.QueryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queryId (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:queryId: ", p), err) }
  return err
}

func (p *GetAggrResultRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestor", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:requestor: ", p), err) }
  if err := p.Requestor.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Requestor), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:requestor: ", p), err) }
  return err
}

func (p *GetAggrResultRequest) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceMeasurements", thrift.SET, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:deviceMeasurements: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.DeviceMeasurements)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.DeviceMeasurements); i++ {
    for j := i+1; j<len(p.DeviceMeasurements); j++ {
      if reflect.DeepEqual(p.DeviceMeasurements[i],p.DeviceMeasurements[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.DeviceMeasurements[i]))
      }
    }
  }
  for _, v := range p.DeviceMeasurements {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:deviceMeasurements: ", p), err) }
  return err
}

func (p *GetAggrResultRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GetAggrResultRequest(%+v)", *p)
}

// Attributes:
//  - Path
//  - DataTypeOrdinal
//  - TimeFilterBytes
//  - QueryId
//  - AggregationTypeOrdinals
//  - Header
//  - Requestor
//  - DeviceMeasurements
type GroupByRequest struct {
  Path string `thrift:"path,1,required" db:"path" json:"path"`
  DataTypeOrdinal Int `thrift:"dataTypeOrdinal,2,required" db:"dataTypeOrdinal" json:"dataTypeOrdinal"`
  TimeFilterBytes []byte `thrift:"timeFilterBytes,3" db:"timeFilterBytes" json:"timeFilterBytes,omitempty"`
  QueryId Long `thrift:"queryId,4,required" db:"queryId" json:"queryId"`
  AggregationTypeOrdinals []Int `thrift:"aggregationTypeOrdinals,5,required" db:"aggregationTypeOrdinals" json:"aggregationTypeOrdinals"`
  Header *Node `thrift:"header,6,required" db:"header" json:"header"`
  Requestor *Node `thrift:"requestor,7,required" db:"requestor" json:"requestor"`
  DeviceMeasurements []string `thrift:"deviceMeasurements,8,required" db:"deviceMeasurements" json:"deviceMeasurements"`
}

func NewGroupByRequest() *GroupByRequest {
  return &GroupByRequest{}
}


func (p *GroupByRequest) GetPath() string {
  return p.Path
}

func (p *GroupByRequest) GetDataTypeOrdinal() Int {
  return p.DataTypeOrdinal
}
var GroupByRequest_TimeFilterBytes_DEFAULT []byte

func (p *GroupByRequest) GetTimeFilterBytes() []byte {
  return p.TimeFilterBytes
}

func (p *GroupByRequest) GetQueryId() Long {
  return p.QueryId
}

func (p *GroupByRequest) GetAggregationTypeOrdinals() []Int {
  return p.AggregationTypeOrdinals
}
var GroupByRequest_Header_DEFAULT *Node
func (p *GroupByRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return GroupByRequest_Header_DEFAULT
  }
return p.Header
}
var GroupByRequest_Requestor_DEFAULT *Node
func (p *GroupByRequest) GetRequestor() *Node {
  if !p.IsSetRequestor() {
    return GroupByRequest_Requestor_DEFAULT
  }
return p.Requestor
}

func (p *GroupByRequest) GetDeviceMeasurements() []string {
  return p.DeviceMeasurements
}
func (p *GroupByRequest) IsSetTimeFilterBytes() bool {
  return p.TimeFilterBytes != nil
}

func (p *GroupByRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *GroupByRequest) IsSetRequestor() bool {
  return p.Requestor != nil
}

func (p *GroupByRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPath bool = false;
  var issetDataTypeOrdinal bool = false;
  var issetQueryId bool = false;
  var issetAggregationTypeOrdinals bool = false;
  var issetHeader bool = false;
  var issetRequestor bool = false;
  var issetDeviceMeasurements bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPath = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetDataTypeOrdinal = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetQueryId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetAggregationTypeOrdinals = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetHeader = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(iprot); err != nil {
          return err
        }
        issetRequestor = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField8(iprot); err != nil {
          return err
        }
        issetDeviceMeasurements = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPath{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Path is not set"));
  }
  if !issetDataTypeOrdinal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataTypeOrdinal is not set"));
  }
  if !issetQueryId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryId is not set"));
  }
  if !issetAggregationTypeOrdinals{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field AggregationTypeOrdinals is not set"));
  }
  if !issetHeader{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Header is not set"));
  }
  if !issetRequestor{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Requestor is not set"));
  }
  if !issetDeviceMeasurements{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DeviceMeasurements is not set"));
  }
  return nil
}

func (p *GroupByRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *GroupByRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Int(v)
  p.DataTypeOrdinal = temp
}
  return nil
}

func (p *GroupByRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TimeFilterBytes = v
}
  return nil
}

func (p *GroupByRequest)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Long(v)
  p.QueryId = temp
}
  return nil
}

func (p *GroupByRequest)  ReadField5(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]Int, 0, size)
  p.AggregationTypeOrdinals =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 Int
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Int(v)
    _elem10 = temp
}
    p.AggregationTypeOrdinals = append(p.AggregationTypeOrdinals, _elem10)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *GroupByRequest)  ReadField6(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *GroupByRequest)  ReadField7(iprot thrift.TProtocol) error {
  p.Requestor = &Node{}
  if err := p.Requestor.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Requestor), err)
  }
  return nil
}

func (p *GroupByRequest)  ReadField8(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.DeviceMeasurements =  tSet
  for i := 0; i < size; i ++ {
var _elem11 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem11 = v
}
    p.DeviceMeasurements = append(p.DeviceMeasurements, _elem11)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *GroupByRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("GroupByRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
    if err := p.writeField7(oprot); err != nil { return err }
    if err := p.writeField8(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *GroupByRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  return err
}

func (p *GroupByRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataTypeOrdinal", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataTypeOrdinal: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataTypeOrdinal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataTypeOrdinal (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataTypeOrdinal: ", p), err) }
  return err
}

func (p *GroupByRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeFilterBytes() {
    if err := oprot.WriteFieldBegin("timeFilterBytes", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeFilterBytes: ", p), err) }
    if err := oprot.WriteBinary(p.TimeFilterBytes); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeFilterBytes (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeFilterBytes: ", p), err) }
  }
  return err
}

func (p *GroupByRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queryId", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:queryId: ", p), err) }
  if err := oprot.WriteI64(int64(p.QueryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queryId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:queryId: ", p), err) }
  return err
}

func (p *GroupByRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("aggregationTypeOrdinals", thrift.LIST, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:aggregationTypeOrdinals: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.AggregationTypeOrdinals)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AggregationTypeOrdinals {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:aggregationTypeOrdinals: ", p), err) }
  return err
}

func (p *GroupByRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:header: ", p), err) }
  return err
}

func (p *GroupByRequest) writeField7(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestor", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:requestor: ", p), err) }
  if err := p.Requestor.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Requestor), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:requestor: ", p), err) }
  return err
}

func (p *GroupByRequest) writeField8(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceMeasurements", thrift.SET, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:deviceMeasurements: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.DeviceMeasurements)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.DeviceMeasurements); i++ {
    for j := i+1; j<len(p.DeviceMeasurements); j++ {
      if reflect.DeepEqual(p.DeviceMeasurements[i],p.DeviceMeasurements[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.DeviceMeasurements[i]))
      }
    }
  }
  for _, v := range p.DeviceMeasurements {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:deviceMeasurements: ", p), err) }
  return err
}

func (p *GroupByRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("GroupByRequest(%+v)", *p)
}

// Attributes:
//  - Path
//  - DataTypeOrdinal
//  - QueryId
//  - DeviceMeasurements
//  - Header
//  - Requestor
type LastQueryRequest struct {
  Path string `thrift:"path,1,required" db:"path" json:"path"`
  DataTypeOrdinal Int `thrift:"dataTypeOrdinal,2,required" db:"dataTypeOrdinal" json:"dataTypeOrdinal"`
  QueryId Long `thrift:"queryId,3,required" db:"queryId" json:"queryId"`
  DeviceMeasurements []string `thrift:"deviceMeasurements,4,required" db:"deviceMeasurements" json:"deviceMeasurements"`
  Header *Node `thrift:"header,5,required" db:"header" json:"header"`
  Requestor *Node `thrift:"requestor,6,required" db:"requestor" json:"requestor"`
}

func NewLastQueryRequest() *LastQueryRequest {
  return &LastQueryRequest{}
}


func (p *LastQueryRequest) GetPath() string {
  return p.Path
}

func (p *LastQueryRequest) GetDataTypeOrdinal() Int {
  return p.DataTypeOrdinal
}

func (p *LastQueryRequest) GetQueryId() Long {
  return p.QueryId
}

func (p *LastQueryRequest) GetDeviceMeasurements() []string {
  return p.DeviceMeasurements
}
var LastQueryRequest_Header_DEFAULT *Node
func (p *LastQueryRequest) GetHeader() *Node {
  if !p.IsSetHeader() {
    return LastQueryRequest_Header_DEFAULT
  }
return p.Header
}
var LastQueryRequest_Requestor_DEFAULT *Node
func (p *LastQueryRequest) GetRequestor() *Node {
  if !p.IsSetRequestor() {
    return LastQueryRequest_Requestor_DEFAULT
  }
return p.Requestor
}
func (p *LastQueryRequest) IsSetHeader() bool {
  return p.Header != nil
}

func (p *LastQueryRequest) IsSetRequestor() bool {
  return p.Requestor != nil
}

func (p *LastQueryRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetPath bool = false;
  var issetDataTypeOrdinal bool = false;
  var issetQueryId bool = false;
  var issetDeviceMeasurements bool = false;
  var issetHeader bool = false;
  var issetRequestor bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetPath = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetDataTypeOrdinal = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetQueryId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetDeviceMeasurements = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetHeader = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
        issetRequestor = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetPath{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Path is not set"));
  }
  if !issetDataTypeOrdinal{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DataTypeOrdinal is not set"));
  }
  if !issetQueryId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field QueryId is not set"));
  }
  if !issetDeviceMeasurements{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field DeviceMeasurements is not set"));
  }
  if !issetHeader{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Header is not set"));
  }
  if !issetRequestor{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Requestor is not set"));
  }
  return nil
}

func (p *LastQueryRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *LastQueryRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Int(v)
  p.DataTypeOrdinal = temp
}
  return nil
}

func (p *LastQueryRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Long(v)
  p.QueryId = temp
}
  return nil
}

func (p *LastQueryRequest)  ReadField4(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.DeviceMeasurements =  tSet
  for i := 0; i < size; i ++ {
var _elem12 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem12 = v
}
    p.DeviceMeasurements = append(p.DeviceMeasurements, _elem12)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *LastQueryRequest)  ReadField5(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *LastQueryRequest)  ReadField6(iprot thrift.TProtocol) error {
  p.Requestor = &Node{}
  if err := p.Requestor.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Requestor), err)
  }
  return nil
}

func (p *LastQueryRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("LastQueryRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LastQueryRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:path: ", p), err) }
  return err
}

func (p *LastQueryRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataTypeOrdinal", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataTypeOrdinal: ", p), err) }
  if err := oprot.WriteI32(int32(p.DataTypeOrdinal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataTypeOrdinal (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataTypeOrdinal: ", p), err) }
  return err
}

func (p *LastQueryRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queryId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:queryId: ", p), err) }
  if err := oprot.WriteI64(int64(p.QueryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queryId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:queryId: ", p), err) }
  return err
}

func (p *LastQueryRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("deviceMeasurements", thrift.SET, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:deviceMeasurements: ", p), err) }
  if err := oprot.WriteSetBegin(thrift.STRING, len(p.DeviceMeasurements)); err != nil {
    return thrift.PrependError("error writing set begin: ", err)
  }
  for i := 0; i<len(p.DeviceMeasurements); i++ {
    for j := i+1; j<len(p.DeviceMeasurements); j++ {
      if reflect.DeepEqual(p.DeviceMeasurements[i],p.DeviceMeasurements[j]) { 
        return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.DeviceMeasurements[i]))
      }
    }
  }
  for _, v := range p.DeviceMeasurements {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteSetEnd(); err != nil {
    return thrift.PrependError("error writing set end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:deviceMeasurements: ", p), err) }
  return err
}

func (p *LastQueryRequest) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:header: ", p), err) }
  return err
}

func (p *LastQueryRequest) writeField6(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("requestor", thrift.STRUCT, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:requestor: ", p), err) }
  if err := p.Requestor.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Requestor), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:requestor: ", p), err) }
  return err
}

func (p *LastQueryRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LastQueryRequest(%+v)", *p)
}

type RaftService interface {
  // Leader will call this method to all followers to ensure its authority.
  // <br>For the receiver,
  // The method will check the authority of the leader.
  // 
  // @param request information of the leader
  // @return if the leader is valid, HeartBeatResponse.term will set -1, and the follower will tell
  // leader its lastLogIndex; otherwise, the follower will tell the fake leader its term.
  // 
  // 
  // Parameters:
  //  - Request
  SendHeartbeat(ctx context.Context, request *HeartBeatRequest) (r *HeartBeatResponse, err error)
  // If a node wants to be a leader, it'll call the method to other nodes to get a vote.
  // <br>For the receiver,
  // The method will check whether the node can be a leader.
  // 
  // @param voteRequest a candidate that wants to be a leader.
  // @return -1 means agree, otherwise return the voter's term
  // 
  // 
  // Parameters:
  //  - Request
  StartElection(ctx context.Context, request *ElectionRequest) (r Long, err error)
  // Leader will call this method to send a batch of entries to all followers.
  // <br>For the receiver,
  // The method will check the authority of the leader and if the local log is complete.
  // If the leader is valid and local log is complete, the follower will append these entries to local log.
  // 
  // @param request entries that need to be appended and the information of the leader.
  // @return -1: agree, -2: log index mismatch , otherwise return the follower's term
  // 
  // 
  // Parameters:
  //  - Request
  AppendEntries(ctx context.Context, request *AppendEntriesRequest) (r Long, err error)
  // Leader will call this method to send a entry to all followers.
  // <br>For the receiver,
  // The method will check the authority of the leader and if the local log is complete.
  // If the leader is valid and local log is complete, the follower will append the entry to local log.
  // 
  // @param request entry that needs to be appended and the information of the leader.
  // @return -1: agree, -2: log index mismatch , otherwise return the follower's term
  // 
  // 
  // Parameters:
  //  - Request
  AppendEntry(ctx context.Context, request *AppendEntryRequest) (r Long, err error)
  // Parameters:
  //  - Request
  SendSnapshot(ctx context.Context, request *SendSnapshotRequest) (err error)
  // Execute a binarized non-query PhysicalPlan
  // 
  // 
  // Parameters:
  //  - Request
  ExecuteNonQueryPlan(ctx context.Context, request *ExecutNonQueryReq) (r *rpc.TSStatus, err error)
  // Ask the leader for its commit index, used to check whether the node has caught up with the
  // leader.
  // 
  // 
  // Parameters:
  //  - Header
  RequestCommitIndex(ctx context.Context, header *Node) (r Long, err error)
  // Read a chunk of a file from the client. If the remaining of the file does not have enough
  // bytes, only the remaining will be returned.
  // Notice that when the last chunk of the file is read, the file will be deleted immediately.
  // 
  // 
  // Parameters:
  //  - FilePath
  //  - Offset
  //  - Length
  ReadFile(ctx context.Context, filePath string, offset int64, length int32) (r []byte, err error)
  // Test if a log of "index" and "term" exists.
  // 
  // 
  // Parameters:
  //  - Index
  //  - Term
  //  - Header
  MatchTerm(ctx context.Context, index Long, term Long, header *Node) (r bool, err error)
}

type RaftServiceClient struct {
  c thrift.TClient
}

func NewRaftServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RaftServiceClient {
  return &RaftServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewRaftServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RaftServiceClient {
  return &RaftServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRaftServiceClient(c thrift.TClient) *RaftServiceClient {
  return &RaftServiceClient{
    c: c,
  }
}

func (p *RaftServiceClient) Client_() thrift.TClient {
  return p.c
}
// Leader will call this method to all followers to ensure its authority.
// <br>For the receiver,
// The method will check the authority of the leader.
// 
// @param request information of the leader
// @return if the leader is valid, HeartBeatResponse.term will set -1, and the follower will tell
// leader its lastLogIndex; otherwise, the follower will tell the fake leader its term.
// 
// 
// Parameters:
//  - Request
func (p *RaftServiceClient) SendHeartbeat(ctx context.Context, request *HeartBeatRequest) (r *HeartBeatResponse, err error) {
  var _args13 RaftServiceSendHeartbeatArgs
  _args13.Request = request
  var _result14 RaftServiceSendHeartbeatResult
  if err = p.Client_().Call(ctx, "sendHeartbeat", &_args13, &_result14); err != nil {
    return
  }
  return _result14.GetSuccess(), nil
}

// If a node wants to be a leader, it'll call the method to other nodes to get a vote.
// <br>For the receiver,
// The method will check whether the node can be a leader.
// 
// @param voteRequest a candidate that wants to be a leader.
// @return -1 means agree, otherwise return the voter's term
// 
// 
// Parameters:
//  - Request
func (p *RaftServiceClient) StartElection(ctx context.Context, request *ElectionRequest) (r Long, err error) {
  var _args15 RaftServiceStartElectionArgs
  _args15.Request = request
  var _result16 RaftServiceStartElectionResult
  if err = p.Client_().Call(ctx, "startElection", &_args15, &_result16); err != nil {
    return
  }
  return _result16.GetSuccess(), nil
}

// Leader will call this method to send a batch of entries to all followers.
// <br>For the receiver,
// The method will check the authority of the leader and if the local log is complete.
// If the leader is valid and local log is complete, the follower will append these entries to local log.
// 
// @param request entries that need to be appended and the information of the leader.
// @return -1: agree, -2: log index mismatch , otherwise return the follower's term
// 
// 
// Parameters:
//  - Request
func (p *RaftServiceClient) AppendEntries(ctx context.Context, request *AppendEntriesRequest) (r Long, err error) {
  var _args17 RaftServiceAppendEntriesArgs
  _args17.Request = request
  var _result18 RaftServiceAppendEntriesResult
  if err = p.Client_().Call(ctx, "appendEntries", &_args17, &_result18); err != nil {
    return
  }
  return _result18.GetSuccess(), nil
}

// Leader will call this method to send a entry to all followers.
// <br>For the receiver,
// The method will check the authority of the leader and if the local log is complete.
// If the leader is valid and local log is complete, the follower will append the entry to local log.
// 
// @param request entry that needs to be appended and the information of the leader.
// @return -1: agree, -2: log index mismatch , otherwise return the follower's term
// 
// 
// Parameters:
//  - Request
func (p *RaftServiceClient) AppendEntry(ctx context.Context, request *AppendEntryRequest) (r Long, err error) {
  var _args19 RaftServiceAppendEntryArgs
  _args19.Request = request
  var _result20 RaftServiceAppendEntryResult
  if err = p.Client_().Call(ctx, "appendEntry", &_args19, &_result20); err != nil {
    return
  }
  return _result20.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *RaftServiceClient) SendSnapshot(ctx context.Context, request *SendSnapshotRequest) (err error) {
  var _args21 RaftServiceSendSnapshotArgs
  _args21.Request = request
  var _result22 RaftServiceSendSnapshotResult
  if err = p.Client_().Call(ctx, "sendSnapshot", &_args21, &_result22); err != nil {
    return
  }
  return nil
}

// Execute a binarized non-query PhysicalPlan
// 
// 
// Parameters:
//  - Request
func (p *RaftServiceClient) ExecuteNonQueryPlan(ctx context.Context, request *ExecutNonQueryReq) (r *rpc.TSStatus, err error) {
  var _args23 RaftServiceExecuteNonQueryPlanArgs
  _args23.Request = request
  var _result24 RaftServiceExecuteNonQueryPlanResult
  if err = p.Client_().Call(ctx, "executeNonQueryPlan", &_args23, &_result24); err != nil {
    return
  }
  return _result24.GetSuccess(), nil
}

// Ask the leader for its commit index, used to check whether the node has caught up with the
// leader.
// 
// 
// Parameters:
//  - Header
func (p *RaftServiceClient) RequestCommitIndex(ctx context.Context, header *Node) (r Long, err error) {
  var _args25 RaftServiceRequestCommitIndexArgs
  _args25.Header = header
  var _result26 RaftServiceRequestCommitIndexResult
  if err = p.Client_().Call(ctx, "requestCommitIndex", &_args25, &_result26); err != nil {
    return
  }
  return _result26.GetSuccess(), nil
}

// Read a chunk of a file from the client. If the remaining of the file does not have enough
// bytes, only the remaining will be returned.
// Notice that when the last chunk of the file is read, the file will be deleted immediately.
// 
// 
// Parameters:
//  - FilePath
//  - Offset
//  - Length
func (p *RaftServiceClient) ReadFile(ctx context.Context, filePath string, offset int64, length int32) (r []byte, err error) {
  var _args27 RaftServiceReadFileArgs
  _args27.FilePath = filePath
  _args27.Offset = offset
  _args27.Length = length
  var _result28 RaftServiceReadFileResult
  if err = p.Client_().Call(ctx, "readFile", &_args27, &_result28); err != nil {
    return
  }
  return _result28.GetSuccess(), nil
}

// Test if a log of "index" and "term" exists.
// 
// 
// Parameters:
//  - Index
//  - Term
//  - Header
func (p *RaftServiceClient) MatchTerm(ctx context.Context, index Long, term Long, header *Node) (r bool, err error) {
  var _args29 RaftServiceMatchTermArgs
  _args29.Index = index
  _args29.Term = term
  _args29.Header = header
  var _result30 RaftServiceMatchTermResult
  if err = p.Client_().Call(ctx, "matchTerm", &_args29, &_result30); err != nil {
    return
  }
  return _result30.GetSuccess(), nil
}

type RaftServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RaftService
}

func (p *RaftServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RaftServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RaftServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRaftServiceProcessor(handler RaftService) *RaftServiceProcessor {

  self31 := &RaftServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self31.processorMap["sendHeartbeat"] = &raftServiceProcessorSendHeartbeat{handler:handler}
  self31.processorMap["startElection"] = &raftServiceProcessorStartElection{handler:handler}
  self31.processorMap["appendEntries"] = &raftServiceProcessorAppendEntries{handler:handler}
  self31.processorMap["appendEntry"] = &raftServiceProcessorAppendEntry{handler:handler}
  self31.processorMap["sendSnapshot"] = &raftServiceProcessorSendSnapshot{handler:handler}
  self31.processorMap["executeNonQueryPlan"] = &raftServiceProcessorExecuteNonQueryPlan{handler:handler}
  self31.processorMap["requestCommitIndex"] = &raftServiceProcessorRequestCommitIndex{handler:handler}
  self31.processorMap["readFile"] = &raftServiceProcessorReadFile{handler:handler}
  self31.processorMap["matchTerm"] = &raftServiceProcessorMatchTerm{handler:handler}
return self31
}

func (p *RaftServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x32 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x32.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x32

}

type raftServiceProcessorSendHeartbeat struct {
  handler RaftService
}

func (p *raftServiceProcessorSendHeartbeat) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RaftServiceSendHeartbeatArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendHeartbeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RaftServiceSendHeartbeatResult{}
var retval *HeartBeatResponse
  var err2 error
  if retval, err2 = p.handler.SendHeartbeat(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendHeartbeat: " + err2.Error())
    oprot.WriteMessageBegin("sendHeartbeat", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("sendHeartbeat", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type raftServiceProcessorStartElection struct {
  handler RaftService
}

func (p *raftServiceProcessorStartElection) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RaftServiceStartElectionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("startElection", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RaftServiceStartElectionResult{}
var retval Long
  var err2 error
  if retval, err2 = p.handler.StartElection(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startElection: " + err2.Error())
    oprot.WriteMessageBegin("startElection", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("startElection", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type raftServiceProcessorAppendEntries struct {
  handler RaftService
}

func (p *raftServiceProcessorAppendEntries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RaftServiceAppendEntriesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("appendEntries", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RaftServiceAppendEntriesResult{}
var retval Long
  var err2 error
  if retval, err2 = p.handler.AppendEntries(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing appendEntries: " + err2.Error())
    oprot.WriteMessageBegin("appendEntries", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("appendEntries", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type raftServiceProcessorAppendEntry struct {
  handler RaftService
}

func (p *raftServiceProcessorAppendEntry) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RaftServiceAppendEntryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("appendEntry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RaftServiceAppendEntryResult{}
var retval Long
  var err2 error
  if retval, err2 = p.handler.AppendEntry(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing appendEntry: " + err2.Error())
    oprot.WriteMessageBegin("appendEntry", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("appendEntry", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type raftServiceProcessorSendSnapshot struct {
  handler RaftService
}

func (p *raftServiceProcessorSendSnapshot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RaftServiceSendSnapshotArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("sendSnapshot", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RaftServiceSendSnapshotResult{}
  var err2 error
  if err2 = p.handler.SendSnapshot(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing sendSnapshot: " + err2.Error())
    oprot.WriteMessageBegin("sendSnapshot", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("sendSnapshot", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type raftServiceProcessorExecuteNonQueryPlan struct {
  handler RaftService
}

func (p *raftServiceProcessorExecuteNonQueryPlan) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RaftServiceExecuteNonQueryPlanArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("executeNonQueryPlan", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RaftServiceExecuteNonQueryPlanResult{}
var retval *rpc.TSStatus
  var err2 error
  if retval, err2 = p.handler.ExecuteNonQueryPlan(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing executeNonQueryPlan: " + err2.Error())
    oprot.WriteMessageBegin("executeNonQueryPlan", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("executeNonQueryPlan", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type raftServiceProcessorRequestCommitIndex struct {
  handler RaftService
}

func (p *raftServiceProcessorRequestCommitIndex) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RaftServiceRequestCommitIndexArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("requestCommitIndex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RaftServiceRequestCommitIndexResult{}
var retval Long
  var err2 error
  if retval, err2 = p.handler.RequestCommitIndex(ctx, args.Header); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing requestCommitIndex: " + err2.Error())
    oprot.WriteMessageBegin("requestCommitIndex", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("requestCommitIndex", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type raftServiceProcessorReadFile struct {
  handler RaftService
}

func (p *raftServiceProcessorReadFile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RaftServiceReadFileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("readFile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RaftServiceReadFileResult{}
var retval []byte
  var err2 error
  if retval, err2 = p.handler.ReadFile(ctx, args.FilePath, args.Offset, args.Length); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing readFile: " + err2.Error())
    oprot.WriteMessageBegin("readFile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("readFile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type raftServiceProcessorMatchTerm struct {
  handler RaftService
}

func (p *raftServiceProcessorMatchTerm) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RaftServiceMatchTermArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("matchTerm", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RaftServiceMatchTermResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.MatchTerm(ctx, args.Index, args.Term, args.Header); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing matchTerm: " + err2.Error())
    oprot.WriteMessageBegin("matchTerm", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("matchTerm", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type RaftServiceSendHeartbeatArgs struct {
  Request *HeartBeatRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRaftServiceSendHeartbeatArgs() *RaftServiceSendHeartbeatArgs {
  return &RaftServiceSendHeartbeatArgs{}
}

var RaftServiceSendHeartbeatArgs_Request_DEFAULT *HeartBeatRequest
func (p *RaftServiceSendHeartbeatArgs) GetRequest() *HeartBeatRequest {
  if !p.IsSetRequest() {
    return RaftServiceSendHeartbeatArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RaftServiceSendHeartbeatArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RaftServiceSendHeartbeatArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceSendHeartbeatArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &HeartBeatRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RaftServiceSendHeartbeatArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendHeartbeat_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceSendHeartbeatArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RaftServiceSendHeartbeatArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceSendHeartbeatArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftServiceSendHeartbeatResult struct {
  Success *HeartBeatResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftServiceSendHeartbeatResult() *RaftServiceSendHeartbeatResult {
  return &RaftServiceSendHeartbeatResult{}
}

var RaftServiceSendHeartbeatResult_Success_DEFAULT *HeartBeatResponse
func (p *RaftServiceSendHeartbeatResult) GetSuccess() *HeartBeatResponse {
  if !p.IsSetSuccess() {
    return RaftServiceSendHeartbeatResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftServiceSendHeartbeatResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftServiceSendHeartbeatResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceSendHeartbeatResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &HeartBeatResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftServiceSendHeartbeatResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendHeartbeat_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceSendHeartbeatResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftServiceSendHeartbeatResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceSendHeartbeatResult(%+v)", *p)
}

// Attributes:
//  - Request
type RaftServiceStartElectionArgs struct {
  Request *ElectionRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRaftServiceStartElectionArgs() *RaftServiceStartElectionArgs {
  return &RaftServiceStartElectionArgs{}
}

var RaftServiceStartElectionArgs_Request_DEFAULT *ElectionRequest
func (p *RaftServiceStartElectionArgs) GetRequest() *ElectionRequest {
  if !p.IsSetRequest() {
    return RaftServiceStartElectionArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RaftServiceStartElectionArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RaftServiceStartElectionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceStartElectionArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ElectionRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RaftServiceStartElectionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startElection_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceStartElectionArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RaftServiceStartElectionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceStartElectionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftServiceStartElectionResult struct {
  Success *Long `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftServiceStartElectionResult() *RaftServiceStartElectionResult {
  return &RaftServiceStartElectionResult{}
}

var RaftServiceStartElectionResult_Success_DEFAULT Long
func (p *RaftServiceStartElectionResult) GetSuccess() Long {
  if !p.IsSetSuccess() {
    return RaftServiceStartElectionResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RaftServiceStartElectionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftServiceStartElectionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceStartElectionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Long(v)
  p.Success = &temp
}
  return nil
}

func (p *RaftServiceStartElectionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startElection_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceStartElectionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftServiceStartElectionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceStartElectionResult(%+v)", *p)
}

// Attributes:
//  - Request
type RaftServiceAppendEntriesArgs struct {
  Request *AppendEntriesRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRaftServiceAppendEntriesArgs() *RaftServiceAppendEntriesArgs {
  return &RaftServiceAppendEntriesArgs{}
}

var RaftServiceAppendEntriesArgs_Request_DEFAULT *AppendEntriesRequest
func (p *RaftServiceAppendEntriesArgs) GetRequest() *AppendEntriesRequest {
  if !p.IsSetRequest() {
    return RaftServiceAppendEntriesArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RaftServiceAppendEntriesArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RaftServiceAppendEntriesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceAppendEntriesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &AppendEntriesRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RaftServiceAppendEntriesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("appendEntries_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceAppendEntriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RaftServiceAppendEntriesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceAppendEntriesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftServiceAppendEntriesResult struct {
  Success *Long `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftServiceAppendEntriesResult() *RaftServiceAppendEntriesResult {
  return &RaftServiceAppendEntriesResult{}
}

var RaftServiceAppendEntriesResult_Success_DEFAULT Long
func (p *RaftServiceAppendEntriesResult) GetSuccess() Long {
  if !p.IsSetSuccess() {
    return RaftServiceAppendEntriesResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RaftServiceAppendEntriesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftServiceAppendEntriesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceAppendEntriesResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Long(v)
  p.Success = &temp
}
  return nil
}

func (p *RaftServiceAppendEntriesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("appendEntries_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceAppendEntriesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftServiceAppendEntriesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceAppendEntriesResult(%+v)", *p)
}

// Attributes:
//  - Request
type RaftServiceAppendEntryArgs struct {
  Request *AppendEntryRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRaftServiceAppendEntryArgs() *RaftServiceAppendEntryArgs {
  return &RaftServiceAppendEntryArgs{}
}

var RaftServiceAppendEntryArgs_Request_DEFAULT *AppendEntryRequest
func (p *RaftServiceAppendEntryArgs) GetRequest() *AppendEntryRequest {
  if !p.IsSetRequest() {
    return RaftServiceAppendEntryArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RaftServiceAppendEntryArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RaftServiceAppendEntryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceAppendEntryArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &AppendEntryRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RaftServiceAppendEntryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("appendEntry_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceAppendEntryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RaftServiceAppendEntryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceAppendEntryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftServiceAppendEntryResult struct {
  Success *Long `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftServiceAppendEntryResult() *RaftServiceAppendEntryResult {
  return &RaftServiceAppendEntryResult{}
}

var RaftServiceAppendEntryResult_Success_DEFAULT Long
func (p *RaftServiceAppendEntryResult) GetSuccess() Long {
  if !p.IsSetSuccess() {
    return RaftServiceAppendEntryResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RaftServiceAppendEntryResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftServiceAppendEntryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceAppendEntryResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Long(v)
  p.Success = &temp
}
  return nil
}

func (p *RaftServiceAppendEntryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("appendEntry_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceAppendEntryResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftServiceAppendEntryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceAppendEntryResult(%+v)", *p)
}

// Attributes:
//  - Request
type RaftServiceSendSnapshotArgs struct {
  Request *SendSnapshotRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewRaftServiceSendSnapshotArgs() *RaftServiceSendSnapshotArgs {
  return &RaftServiceSendSnapshotArgs{}
}

var RaftServiceSendSnapshotArgs_Request_DEFAULT *SendSnapshotRequest
func (p *RaftServiceSendSnapshotArgs) GetRequest() *SendSnapshotRequest {
  if !p.IsSetRequest() {
    return RaftServiceSendSnapshotArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RaftServiceSendSnapshotArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RaftServiceSendSnapshotArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceSendSnapshotArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &SendSnapshotRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RaftServiceSendSnapshotArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceSendSnapshotArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RaftServiceSendSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceSendSnapshotArgs(%+v)", *p)
}

type RaftServiceSendSnapshotResult struct {
}

func NewRaftServiceSendSnapshotResult() *RaftServiceSendSnapshotResult {
  return &RaftServiceSendSnapshotResult{}
}

func (p *RaftServiceSendSnapshotResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceSendSnapshotResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("sendSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceSendSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceSendSnapshotResult(%+v)", *p)
}

// Attributes:
//  - Request
type RaftServiceExecuteNonQueryPlanArgs struct {
  Request *ExecutNonQueryReq `thrift:"request,1" db:"request" json:"request"`
}

func NewRaftServiceExecuteNonQueryPlanArgs() *RaftServiceExecuteNonQueryPlanArgs {
  return &RaftServiceExecuteNonQueryPlanArgs{}
}

var RaftServiceExecuteNonQueryPlanArgs_Request_DEFAULT *ExecutNonQueryReq
func (p *RaftServiceExecuteNonQueryPlanArgs) GetRequest() *ExecutNonQueryReq {
  if !p.IsSetRequest() {
    return RaftServiceExecuteNonQueryPlanArgs_Request_DEFAULT
  }
return p.Request
}
func (p *RaftServiceExecuteNonQueryPlanArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *RaftServiceExecuteNonQueryPlanArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceExecuteNonQueryPlanArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &ExecutNonQueryReq{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *RaftServiceExecuteNonQueryPlanArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("executeNonQueryPlan_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceExecuteNonQueryPlanArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *RaftServiceExecuteNonQueryPlanArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceExecuteNonQueryPlanArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftServiceExecuteNonQueryPlanResult struct {
  Success *rpc.TSStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftServiceExecuteNonQueryPlanResult() *RaftServiceExecuteNonQueryPlanResult {
  return &RaftServiceExecuteNonQueryPlanResult{}
}

var RaftServiceExecuteNonQueryPlanResult_Success_DEFAULT *rpc.TSStatus
func (p *RaftServiceExecuteNonQueryPlanResult) GetSuccess() *rpc.TSStatus {
  if !p.IsSetSuccess() {
    return RaftServiceExecuteNonQueryPlanResult_Success_DEFAULT
  }
return p.Success
}
func (p *RaftServiceExecuteNonQueryPlanResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftServiceExecuteNonQueryPlanResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceExecuteNonQueryPlanResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &rpc.TSStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RaftServiceExecuteNonQueryPlanResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("executeNonQueryPlan_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceExecuteNonQueryPlanResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftServiceExecuteNonQueryPlanResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceExecuteNonQueryPlanResult(%+v)", *p)
}

// Attributes:
//  - Header
type RaftServiceRequestCommitIndexArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
}

func NewRaftServiceRequestCommitIndexArgs() *RaftServiceRequestCommitIndexArgs {
  return &RaftServiceRequestCommitIndexArgs{}
}

var RaftServiceRequestCommitIndexArgs_Header_DEFAULT *Node
func (p *RaftServiceRequestCommitIndexArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return RaftServiceRequestCommitIndexArgs_Header_DEFAULT
  }
return p.Header
}
func (p *RaftServiceRequestCommitIndexArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *RaftServiceRequestCommitIndexArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceRequestCommitIndexArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *RaftServiceRequestCommitIndexArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestCommitIndex_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceRequestCommitIndexArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *RaftServiceRequestCommitIndexArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceRequestCommitIndexArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftServiceRequestCommitIndexResult struct {
  Success *Long `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftServiceRequestCommitIndexResult() *RaftServiceRequestCommitIndexResult {
  return &RaftServiceRequestCommitIndexResult{}
}

var RaftServiceRequestCommitIndexResult_Success_DEFAULT Long
func (p *RaftServiceRequestCommitIndexResult) GetSuccess() Long {
  if !p.IsSetSuccess() {
    return RaftServiceRequestCommitIndexResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RaftServiceRequestCommitIndexResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftServiceRequestCommitIndexResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceRequestCommitIndexResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Long(v)
  p.Success = &temp
}
  return nil
}

func (p *RaftServiceRequestCommitIndexResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("requestCommitIndex_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceRequestCommitIndexResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftServiceRequestCommitIndexResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceRequestCommitIndexResult(%+v)", *p)
}

// Attributes:
//  - FilePath
//  - Offset
//  - Length
type RaftServiceReadFileArgs struct {
  FilePath string `thrift:"filePath,1" db:"filePath" json:"filePath"`
  Offset int64 `thrift:"offset,2" db:"offset" json:"offset"`
  Length int32 `thrift:"length,3" db:"length" json:"length"`
}

func NewRaftServiceReadFileArgs() *RaftServiceReadFileArgs {
  return &RaftServiceReadFileArgs{}
}


func (p *RaftServiceReadFileArgs) GetFilePath() string {
  return p.FilePath
}

func (p *RaftServiceReadFileArgs) GetOffset() int64 {
  return p.Offset
}

func (p *RaftServiceReadFileArgs) GetLength() int32 {
  return p.Length
}
func (p *RaftServiceReadFileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceReadFileArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FilePath = v
}
  return nil
}

func (p *RaftServiceReadFileArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Offset = v
}
  return nil
}

func (p *RaftServiceReadFileArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Length = v
}
  return nil
}

func (p *RaftServiceReadFileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readFile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceReadFileArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("filePath", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:filePath: ", p), err) }
  if err := oprot.WriteString(string(p.FilePath)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filePath (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:filePath: ", p), err) }
  return err
}

func (p *RaftServiceReadFileArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("offset", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:offset: ", p), err) }
  if err := oprot.WriteI64(int64(p.Offset)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.offset (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:offset: ", p), err) }
  return err
}

func (p *RaftServiceReadFileArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("length", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:length: ", p), err) }
  if err := oprot.WriteI32(int32(p.Length)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.length (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:length: ", p), err) }
  return err
}

func (p *RaftServiceReadFileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceReadFileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftServiceReadFileResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftServiceReadFileResult() *RaftServiceReadFileResult {
  return &RaftServiceReadFileResult{}
}

var RaftServiceReadFileResult_Success_DEFAULT []byte

func (p *RaftServiceReadFileResult) GetSuccess() []byte {
  return p.Success
}
func (p *RaftServiceReadFileResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftServiceReadFileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceReadFileResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *RaftServiceReadFileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("readFile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceReadFileResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftServiceReadFileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceReadFileResult(%+v)", *p)
}

// Attributes:
//  - Index
//  - Term
//  - Header
type RaftServiceMatchTermArgs struct {
  Index Long `thrift:"index,1" db:"index" json:"index"`
  Term Long `thrift:"term,2" db:"term" json:"term"`
  Header *Node `thrift:"header,3" db:"header" json:"header"`
}

func NewRaftServiceMatchTermArgs() *RaftServiceMatchTermArgs {
  return &RaftServiceMatchTermArgs{}
}


func (p *RaftServiceMatchTermArgs) GetIndex() Long {
  return p.Index
}

func (p *RaftServiceMatchTermArgs) GetTerm() Long {
  return p.Term
}
var RaftServiceMatchTermArgs_Header_DEFAULT *Node
func (p *RaftServiceMatchTermArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return RaftServiceMatchTermArgs_Header_DEFAULT
  }
return p.Header
}
func (p *RaftServiceMatchTermArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *RaftServiceMatchTermArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceMatchTermArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := Long(v)
  p.Index = temp
}
  return nil
}

func (p *RaftServiceMatchTermArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Long(v)
  p.Term = temp
}
  return nil
}

func (p *RaftServiceMatchTermArgs)  ReadField3(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *RaftServiceMatchTermArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("matchTerm_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceMatchTermArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("index", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:index: ", p), err) }
  if err := oprot.WriteI64(int64(p.Index)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.index (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:index: ", p), err) }
  return err
}

func (p *RaftServiceMatchTermArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("term", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:term: ", p), err) }
  if err := oprot.WriteI64(int64(p.Term)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.term (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:term: ", p), err) }
  return err
}

func (p *RaftServiceMatchTermArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:header: ", p), err) }
  return err
}

func (p *RaftServiceMatchTermArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceMatchTermArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RaftServiceMatchTermResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRaftServiceMatchTermResult() *RaftServiceMatchTermResult {
  return &RaftServiceMatchTermResult{}
}

var RaftServiceMatchTermResult_Success_DEFAULT bool
func (p *RaftServiceMatchTermResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return RaftServiceMatchTermResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RaftServiceMatchTermResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RaftServiceMatchTermResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RaftServiceMatchTermResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RaftServiceMatchTermResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("matchTerm_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RaftServiceMatchTermResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RaftServiceMatchTermResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RaftServiceMatchTermResult(%+v)", *p)
}


type TSDataService interface {
RaftService

  // Query a time series without value filter.
  // @return a readerId >= 0 if the query succeeds, otherwise the query fails
  // TODO-Cluster: support query multiple series in a request
  // 
  // 
  // Parameters:
  //  - Request
  QuerySingleSeries(ctx context.Context, request *SingleSeriesQueryRequest) (r Long, err error)
  // Fetch at max fetchSize time-value pairs using the resultSetId generated by querySingleSeries.
  // @return a ByteBuffer containing the serialized time-value pairs or an empty buffer if there
  // are not more results.
  // 
  // 
  // Parameters:
  //  - Header
  //  - ReaderId
  FetchSingleSeries(ctx context.Context, header *Node, readerId Long) (r []byte, err error)
  // Query a time series and generate an IReaderByTimestamp.
  // @return a readerId >= 0 if the query succeeds, otherwise the query fails
  // 
  // 
  // Parameters:
  //  - Request
  QuerySingleSeriesByTimestamp(ctx context.Context, request *SingleSeriesQueryRequest) (r Long, err error)
  // Fetch one value at given timestamp using the resultSetId generated by
  // querySingleSeriesByTimestamp.
  // @return a ByteBuffer containing the serialized value or an empty buffer if there
  // are not more results.
  // 
  // 
  // Parameters:
  //  - Header
  //  - ReaderId
  //  - Timestamp
  FetchSingleSeriesByTimestamp(ctx context.Context, header *Node, readerId Long, timestamp Long) (r []byte, err error)
  // Find the local query established for the remote query and release all its resource.
  // 
  // 
  // Parameters:
  //  - Header
  //  - ThisNode
  //  - QueryId
  EndQuery(ctx context.Context, header *Node, thisNode *Node, queryId Long) (err error)
  // Given path patterns (paths with wildcard), return all paths they match.
  // 
  // 
  // Parameters:
  //  - Header
  //  - Path
  GetAllPaths(ctx context.Context, header *Node, path []string) (r []string, err error)
  // Given path patterns (paths with wildcard), return all devices they match.
  // 
  // 
  // Parameters:
  //  - Header
  //  - Path
  GetAllDevices(ctx context.Context, header *Node, path []string) (r []string, err error)
  // Parameters:
  //  - Header
  //  - Path
  //  - NodeLevel
  GetNodeList(ctx context.Context, header *Node, path string, nodeLevel Int) (r []string, err error)
  // Parameters:
  //  - Header
  //  - Path
  GetChildNodePathInNextLevel(ctx context.Context, header *Node, path string) (r []string, err error)
  // Parameters:
  //  - Header
  //  - PlanBinary
  GetAllMeasurementSchema(ctx context.Context, header *Node, planBinary []byte) (r []byte, err error)
  // Parameters:
  //  - Request
  GetAggrResult_(ctx context.Context, request *GetAggrResultRequest) (r [][]byte, err error)
  // Parameters:
  //  - Header
  //  - TimeseriesList
  GetUnregisteredTimeseries(ctx context.Context, header *Node, timeseriesList []string) (r []string, err error)
  // Parameters:
  //  - Request
  PullSnapshot(ctx context.Context, request *PullSnapshotRequest) (r *PullSnapshotResp, err error)
  // Create a GroupByExecutor for a path, executing the given aggregations.
  // @return the executorId
  // 
  // 
  // Parameters:
  //  - Request
  GetGroupByExecutor(ctx context.Context, request *GroupByRequest) (r Long, err error)
  // Fetch the group by result in the interval [startTime, endTime) from the given executor.
  // @return the serialized AggregationResults, each is the result of one of the previously
  // required aggregations, and their orders are the same.
  // 
  // 
  // Parameters:
  //  - Header
  //  - ExecutorId
  //  - StartTime
  //  - EndTime
  GetGroupByResult_(ctx context.Context, header *Node, executorId Long, startTime Long, endTime Long) (r [][]byte, err error)
  // Pull all timeseries schemas prefixed by a given path.
  // 
  // 
  // Parameters:
  //  - Request
  PullTimeSeriesSchema(ctx context.Context, request *PullSchemaRequest) (r *PullSchemaResp, err error)
  // Pull all measurement schemas prefixed by a given path.
  // 
  // 
  // Parameters:
  //  - Request
  PullMeasurementSchema(ctx context.Context, request *PullSchemaRequest) (r *PullSchemaResp, err error)
  // Perform a previous fill and return the timevalue pair in binary.
  // @return a binary TimeValuePair
  // 
  // 
  // Parameters:
  //  - Request
  PreviousFill(ctx context.Context, request *PreviousFillRequest) (r []byte, err error)
  // Query the last point of a series.
  // @return a binary TimeValuePair
  // 
  // 
  // Parameters:
  //  - Request
  Last(ctx context.Context, request *LastQueryRequest) (r []byte, err error)
  // Parameters:
  //  - Header
  //  - PathsToQuery
  //  - Level
  GetPathCount(ctx context.Context, header *Node, pathsToQuery []string, level Int) (r Int, err error)
  // During slot transfer, when a member has pulled snapshot from a group, the member will use this
  // method to inform the group that one replica of such slots has been pulled.
  // 
  // 
  // Parameters:
  //  - Header
  //  - Slots
  OnSnapshotApplied(ctx context.Context, header *Node, slots []Int) (r bool, err error)
}

type TSDataServiceClient struct {
  *RaftServiceClient
}

func NewTSDataServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TSDataServiceClient {
  return &TSDataServiceClient{RaftServiceClient: NewRaftServiceClientFactory(t, f)}}

func NewTSDataServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TSDataServiceClient {
  return &TSDataServiceClient{RaftServiceClient: NewRaftServiceClientProtocol(t, iprot, oprot)}
}

func NewTSDataServiceClient(c thrift.TClient) *TSDataServiceClient {
  return &TSDataServiceClient{
    RaftServiceClient: NewRaftServiceClient(c),
  }
}

// Query a time series without value filter.
// @return a readerId >= 0 if the query succeeds, otherwise the query fails
// TODO-Cluster: support query multiple series in a request
// 
// 
// Parameters:
//  - Request
func (p *TSDataServiceClient) QuerySingleSeries(ctx context.Context, request *SingleSeriesQueryRequest) (r Long, err error) {
  var _args86 TSDataServiceQuerySingleSeriesArgs
  _args86.Request = request
  var _result87 TSDataServiceQuerySingleSeriesResult
  if err = p.Client_().Call(ctx, "querySingleSeries", &_args86, &_result87); err != nil {
    return
  }
  return _result87.GetSuccess(), nil
}

// Fetch at max fetchSize time-value pairs using the resultSetId generated by querySingleSeries.
// @return a ByteBuffer containing the serialized time-value pairs or an empty buffer if there
// are not more results.
// 
// 
// Parameters:
//  - Header
//  - ReaderId
func (p *TSDataServiceClient) FetchSingleSeries(ctx context.Context, header *Node, readerId Long) (r []byte, err error) {
  var _args88 TSDataServiceFetchSingleSeriesArgs
  _args88.Header = header
  _args88.ReaderId = readerId
  var _result89 TSDataServiceFetchSingleSeriesResult
  if err = p.Client_().Call(ctx, "fetchSingleSeries", &_args88, &_result89); err != nil {
    return
  }
  return _result89.GetSuccess(), nil
}

// Query a time series and generate an IReaderByTimestamp.
// @return a readerId >= 0 if the query succeeds, otherwise the query fails
// 
// 
// Parameters:
//  - Request
func (p *TSDataServiceClient) QuerySingleSeriesByTimestamp(ctx context.Context, request *SingleSeriesQueryRequest) (r Long, err error) {
  var _args90 TSDataServiceQuerySingleSeriesByTimestampArgs
  _args90.Request = request
  var _result91 TSDataServiceQuerySingleSeriesByTimestampResult
  if err = p.Client_().Call(ctx, "querySingleSeriesByTimestamp", &_args90, &_result91); err != nil {
    return
  }
  return _result91.GetSuccess(), nil
}

// Fetch one value at given timestamp using the resultSetId generated by
// querySingleSeriesByTimestamp.
// @return a ByteBuffer containing the serialized value or an empty buffer if there
// are not more results.
// 
// 
// Parameters:
//  - Header
//  - ReaderId
//  - Timestamp
func (p *TSDataServiceClient) FetchSingleSeriesByTimestamp(ctx context.Context, header *Node, readerId Long, timestamp Long) (r []byte, err error) {
  var _args92 TSDataServiceFetchSingleSeriesByTimestampArgs
  _args92.Header = header
  _args92.ReaderId = readerId
  _args92.Timestamp = timestamp
  var _result93 TSDataServiceFetchSingleSeriesByTimestampResult
  if err = p.Client_().Call(ctx, "fetchSingleSeriesByTimestamp", &_args92, &_result93); err != nil {
    return
  }
  return _result93.GetSuccess(), nil
}

// Find the local query established for the remote query and release all its resource.
// 
// 
// Parameters:
//  - Header
//  - ThisNode
//  - QueryId
func (p *TSDataServiceClient) EndQuery(ctx context.Context, header *Node, thisNode *Node, queryId Long) (err error) {
  var _args94 TSDataServiceEndQueryArgs
  _args94.Header = header
  _args94.ThisNode = thisNode
  _args94.QueryId = queryId
  var _result95 TSDataServiceEndQueryResult
  if err = p.Client_().Call(ctx, "endQuery", &_args94, &_result95); err != nil {
    return
  }
  return nil
}

// Given path patterns (paths with wildcard), return all paths they match.
// 
// 
// Parameters:
//  - Header
//  - Path
func (p *TSDataServiceClient) GetAllPaths(ctx context.Context, header *Node, path []string) (r []string, err error) {
  var _args96 TSDataServiceGetAllPathsArgs
  _args96.Header = header
  _args96.Path = path
  var _result97 TSDataServiceGetAllPathsResult
  if err = p.Client_().Call(ctx, "getAllPaths", &_args96, &_result97); err != nil {
    return
  }
  return _result97.GetSuccess(), nil
}

// Given path patterns (paths with wildcard), return all devices they match.
// 
// 
// Parameters:
//  - Header
//  - Path
func (p *TSDataServiceClient) GetAllDevices(ctx context.Context, header *Node, path []string) (r []string, err error) {
  var _args98 TSDataServiceGetAllDevicesArgs
  _args98.Header = header
  _args98.Path = path
  var _result99 TSDataServiceGetAllDevicesResult
  if err = p.Client_().Call(ctx, "getAllDevices", &_args98, &_result99); err != nil {
    return
  }
  return _result99.GetSuccess(), nil
}

// Parameters:
//  - Header
//  - Path
//  - NodeLevel
func (p *TSDataServiceClient) GetNodeList(ctx context.Context, header *Node, path string, nodeLevel Int) (r []string, err error) {
  var _args100 TSDataServiceGetNodeListArgs
  _args100.Header = header
  _args100.Path = path
  _args100.NodeLevel = nodeLevel
  var _result101 TSDataServiceGetNodeListResult
  if err = p.Client_().Call(ctx, "getNodeList", &_args100, &_result101); err != nil {
    return
  }
  return _result101.GetSuccess(), nil
}

// Parameters:
//  - Header
//  - Path
func (p *TSDataServiceClient) GetChildNodePathInNextLevel(ctx context.Context, header *Node, path string) (r []string, err error) {
  var _args102 TSDataServiceGetChildNodePathInNextLevelArgs
  _args102.Header = header
  _args102.Path = path
  var _result103 TSDataServiceGetChildNodePathInNextLevelResult
  if err = p.Client_().Call(ctx, "getChildNodePathInNextLevel", &_args102, &_result103); err != nil {
    return
  }
  return _result103.GetSuccess(), nil
}

// Parameters:
//  - Header
//  - PlanBinary
func (p *TSDataServiceClient) GetAllMeasurementSchema(ctx context.Context, header *Node, planBinary []byte) (r []byte, err error) {
  var _args104 TSDataServiceGetAllMeasurementSchemaArgs
  _args104.Header = header
  _args104.PlanBinary = planBinary
  var _result105 TSDataServiceGetAllMeasurementSchemaResult
  if err = p.Client_().Call(ctx, "getAllMeasurementSchema", &_args104, &_result105); err != nil {
    return
  }
  return _result105.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TSDataServiceClient) GetAggrResult_(ctx context.Context, request *GetAggrResultRequest) (r [][]byte, err error) {
  var _args106 TSDataServiceGetAggrResultArgs
  _args106.Request = request
  var _result107 TSDataServiceGetAggrResultResult
  if err = p.Client_().Call(ctx, "getAggrResult", &_args106, &_result107); err != nil {
    return
  }
  return _result107.GetSuccess(), nil
}

// Parameters:
//  - Header
//  - TimeseriesList
func (p *TSDataServiceClient) GetUnregisteredTimeseries(ctx context.Context, header *Node, timeseriesList []string) (r []string, err error) {
  var _args108 TSDataServiceGetUnregisteredTimeseriesArgs
  _args108.Header = header
  _args108.TimeseriesList = timeseriesList
  var _result109 TSDataServiceGetUnregisteredTimeseriesResult
  if err = p.Client_().Call(ctx, "getUnregisteredTimeseries", &_args108, &_result109); err != nil {
    return
  }
  return _result109.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TSDataServiceClient) PullSnapshot(ctx context.Context, request *PullSnapshotRequest) (r *PullSnapshotResp, err error) {
  var _args110 TSDataServicePullSnapshotArgs
  _args110.Request = request
  var _result111 TSDataServicePullSnapshotResult
  if err = p.Client_().Call(ctx, "pullSnapshot", &_args110, &_result111); err != nil {
    return
  }
  return _result111.GetSuccess(), nil
}

// Create a GroupByExecutor for a path, executing the given aggregations.
// @return the executorId
// 
// 
// Parameters:
//  - Request
func (p *TSDataServiceClient) GetGroupByExecutor(ctx context.Context, request *GroupByRequest) (r Long, err error) {
  var _args112 TSDataServiceGetGroupByExecutorArgs
  _args112.Request = request
  var _result113 TSDataServiceGetGroupByExecutorResult
  if err = p.Client_().Call(ctx, "getGroupByExecutor", &_args112, &_result113); err != nil {
    return
  }
  return _result113.GetSuccess(), nil
}

// Fetch the group by result in the interval [startTime, endTime) from the given executor.
// @return the serialized AggregationResults, each is the result of one of the previously
// required aggregations, and their orders are the same.
// 
// 
// Parameters:
//  - Header
//  - ExecutorId
//  - StartTime
//  - EndTime
func (p *TSDataServiceClient) GetGroupByResult_(ctx context.Context, header *Node, executorId Long, startTime Long, endTime Long) (r [][]byte, err error) {
  var _args114 TSDataServiceGetGroupByResultArgs
  _args114.Header = header
  _args114.ExecutorId = executorId
  _args114.StartTime = startTime
  _args114.EndTime = endTime
  var _result115 TSDataServiceGetGroupByResultResult
  if err = p.Client_().Call(ctx, "getGroupByResult", &_args114, &_result115); err != nil {
    return
  }
  return _result115.GetSuccess(), nil
}

// Pull all timeseries schemas prefixed by a given path.
// 
// 
// Parameters:
//  - Request
func (p *TSDataServiceClient) PullTimeSeriesSchema(ctx context.Context, request *PullSchemaRequest) (r *PullSchemaResp, err error) {
  var _args116 TSDataServicePullTimeSeriesSchemaArgs
  _args116.Request = request
  var _result117 TSDataServicePullTimeSeriesSchemaResult
  if err = p.Client_().Call(ctx, "pullTimeSeriesSchema", &_args116, &_result117); err != nil {
    return
  }
  return _result117.GetSuccess(), nil
}

// Pull all measurement schemas prefixed by a given path.
// 
// 
// Parameters:
//  - Request
func (p *TSDataServiceClient) PullMeasurementSchema(ctx context.Context, request *PullSchemaRequest) (r *PullSchemaResp, err error) {
  var _args118 TSDataServicePullMeasurementSchemaArgs
  _args118.Request = request
  var _result119 TSDataServicePullMeasurementSchemaResult
  if err = p.Client_().Call(ctx, "pullMeasurementSchema", &_args118, &_result119); err != nil {
    return
  }
  return _result119.GetSuccess(), nil
}

// Perform a previous fill and return the timevalue pair in binary.
// @return a binary TimeValuePair
// 
// 
// Parameters:
//  - Request
func (p *TSDataServiceClient) PreviousFill(ctx context.Context, request *PreviousFillRequest) (r []byte, err error) {
  var _args120 TSDataServicePreviousFillArgs
  _args120.Request = request
  var _result121 TSDataServicePreviousFillResult
  if err = p.Client_().Call(ctx, "previousFill", &_args120, &_result121); err != nil {
    return
  }
  return _result121.GetSuccess(), nil
}

// Query the last point of a series.
// @return a binary TimeValuePair
// 
// 
// Parameters:
//  - Request
func (p *TSDataServiceClient) Last(ctx context.Context, request *LastQueryRequest) (r []byte, err error) {
  var _args122 TSDataServiceLastArgs
  _args122.Request = request
  var _result123 TSDataServiceLastResult
  if err = p.Client_().Call(ctx, "last", &_args122, &_result123); err != nil {
    return
  }
  return _result123.GetSuccess(), nil
}

// Parameters:
//  - Header
//  - PathsToQuery
//  - Level
func (p *TSDataServiceClient) GetPathCount(ctx context.Context, header *Node, pathsToQuery []string, level Int) (r Int, err error) {
  var _args124 TSDataServiceGetPathCountArgs
  _args124.Header = header
  _args124.PathsToQuery = pathsToQuery
  _args124.Level = level
  var _result125 TSDataServiceGetPathCountResult
  if err = p.Client_().Call(ctx, "getPathCount", &_args124, &_result125); err != nil {
    return
  }
  return _result125.GetSuccess(), nil
}

// During slot transfer, when a member has pulled snapshot from a group, the member will use this
// method to inform the group that one replica of such slots has been pulled.
// 
// 
// Parameters:
//  - Header
//  - Slots
func (p *TSDataServiceClient) OnSnapshotApplied(ctx context.Context, header *Node, slots []Int) (r bool, err error) {
  var _args126 TSDataServiceOnSnapshotAppliedArgs
  _args126.Header = header
  _args126.Slots = slots
  var _result127 TSDataServiceOnSnapshotAppliedResult
  if err = p.Client_().Call(ctx, "onSnapshotApplied", &_args126, &_result127); err != nil {
    return
  }
  return _result127.GetSuccess(), nil
}

type TSDataServiceProcessor struct {
  *RaftServiceProcessor
}

func NewTSDataServiceProcessor(handler TSDataService) *TSDataServiceProcessor {
  self128 := &TSDataServiceProcessor{NewRaftServiceProcessor(handler)}
  self128.AddToProcessorMap("querySingleSeries", &tSDataServiceProcessorQuerySingleSeries{handler:handler})
  self128.AddToProcessorMap("fetchSingleSeries", &tSDataServiceProcessorFetchSingleSeries{handler:handler})
  self128.AddToProcessorMap("querySingleSeriesByTimestamp", &tSDataServiceProcessorQuerySingleSeriesByTimestamp{handler:handler})
  self128.AddToProcessorMap("fetchSingleSeriesByTimestamp", &tSDataServiceProcessorFetchSingleSeriesByTimestamp{handler:handler})
  self128.AddToProcessorMap("endQuery", &tSDataServiceProcessorEndQuery{handler:handler})
  self128.AddToProcessorMap("getAllPaths", &tSDataServiceProcessorGetAllPaths{handler:handler})
  self128.AddToProcessorMap("getAllDevices", &tSDataServiceProcessorGetAllDevices{handler:handler})
  self128.AddToProcessorMap("getNodeList", &tSDataServiceProcessorGetNodeList{handler:handler})
  self128.AddToProcessorMap("getChildNodePathInNextLevel", &tSDataServiceProcessorGetChildNodePathInNextLevel{handler:handler})
  self128.AddToProcessorMap("getAllMeasurementSchema", &tSDataServiceProcessorGetAllMeasurementSchema{handler:handler})
  self128.AddToProcessorMap("getAggrResult", &tSDataServiceProcessorGetAggrResult_{handler:handler})
  self128.AddToProcessorMap("getUnregisteredTimeseries", &tSDataServiceProcessorGetUnregisteredTimeseries{handler:handler})
  self128.AddToProcessorMap("pullSnapshot", &tSDataServiceProcessorPullSnapshot{handler:handler})
  self128.AddToProcessorMap("getGroupByExecutor", &tSDataServiceProcessorGetGroupByExecutor{handler:handler})
  self128.AddToProcessorMap("getGroupByResult", &tSDataServiceProcessorGetGroupByResult_{handler:handler})
  self128.AddToProcessorMap("pullTimeSeriesSchema", &tSDataServiceProcessorPullTimeSeriesSchema{handler:handler})
  self128.AddToProcessorMap("pullMeasurementSchema", &tSDataServiceProcessorPullMeasurementSchema{handler:handler})
  self128.AddToProcessorMap("previousFill", &tSDataServiceProcessorPreviousFill{handler:handler})
  self128.AddToProcessorMap("last", &tSDataServiceProcessorLast{handler:handler})
  self128.AddToProcessorMap("getPathCount", &tSDataServiceProcessorGetPathCount{handler:handler})
  self128.AddToProcessorMap("onSnapshotApplied", &tSDataServiceProcessorOnSnapshotApplied{handler:handler})
  return self128
}

type tSDataServiceProcessorQuerySingleSeries struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorQuerySingleSeries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceQuerySingleSeriesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("querySingleSeries", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceQuerySingleSeriesResult{}
var retval Long
  var err2 error
  if retval, err2 = p.handler.QuerySingleSeries(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing querySingleSeries: " + err2.Error())
    oprot.WriteMessageBegin("querySingleSeries", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("querySingleSeries", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorFetchSingleSeries struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorFetchSingleSeries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceFetchSingleSeriesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchSingleSeries", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceFetchSingleSeriesResult{}
var retval []byte
  var err2 error
  if retval, err2 = p.handler.FetchSingleSeries(ctx, args.Header, args.ReaderId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchSingleSeries: " + err2.Error())
    oprot.WriteMessageBegin("fetchSingleSeries", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchSingleSeries", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorQuerySingleSeriesByTimestamp struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorQuerySingleSeriesByTimestamp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceQuerySingleSeriesByTimestampArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("querySingleSeriesByTimestamp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceQuerySingleSeriesByTimestampResult{}
var retval Long
  var err2 error
  if retval, err2 = p.handler.QuerySingleSeriesByTimestamp(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing querySingleSeriesByTimestamp: " + err2.Error())
    oprot.WriteMessageBegin("querySingleSeriesByTimestamp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("querySingleSeriesByTimestamp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorFetchSingleSeriesByTimestamp struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorFetchSingleSeriesByTimestamp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceFetchSingleSeriesByTimestampArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("fetchSingleSeriesByTimestamp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceFetchSingleSeriesByTimestampResult{}
var retval []byte
  var err2 error
  if retval, err2 = p.handler.FetchSingleSeriesByTimestamp(ctx, args.Header, args.ReaderId, args.Timestamp); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing fetchSingleSeriesByTimestamp: " + err2.Error())
    oprot.WriteMessageBegin("fetchSingleSeriesByTimestamp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("fetchSingleSeriesByTimestamp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorEndQuery struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorEndQuery) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceEndQueryArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("endQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceEndQueryResult{}
  var err2 error
  if err2 = p.handler.EndQuery(ctx, args.Header, args.ThisNode, args.QueryId); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing endQuery: " + err2.Error())
    oprot.WriteMessageBegin("endQuery", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("endQuery", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorGetAllPaths struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorGetAllPaths) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceGetAllPathsArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllPaths", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceGetAllPathsResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllPaths(ctx, args.Header, args.Path); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllPaths: " + err2.Error())
    oprot.WriteMessageBegin("getAllPaths", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllPaths", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorGetAllDevices struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorGetAllDevices) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceGetAllDevicesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllDevices", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceGetAllDevicesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetAllDevices(ctx, args.Header, args.Path); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllDevices: " + err2.Error())
    oprot.WriteMessageBegin("getAllDevices", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllDevices", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorGetNodeList struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorGetNodeList) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceGetNodeListArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getNodeList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceGetNodeListResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetNodeList(ctx, args.Header, args.Path, args.NodeLevel); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getNodeList: " + err2.Error())
    oprot.WriteMessageBegin("getNodeList", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getNodeList", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorGetChildNodePathInNextLevel struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorGetChildNodePathInNextLevel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceGetChildNodePathInNextLevelArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getChildNodePathInNextLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceGetChildNodePathInNextLevelResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetChildNodePathInNextLevel(ctx, args.Header, args.Path); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getChildNodePathInNextLevel: " + err2.Error())
    oprot.WriteMessageBegin("getChildNodePathInNextLevel", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getChildNodePathInNextLevel", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorGetAllMeasurementSchema struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorGetAllMeasurementSchema) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceGetAllMeasurementSchemaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAllMeasurementSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceGetAllMeasurementSchemaResult{}
var retval []byte
  var err2 error
  if retval, err2 = p.handler.GetAllMeasurementSchema(ctx, args.Header, args.PlanBinary); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAllMeasurementSchema: " + err2.Error())
    oprot.WriteMessageBegin("getAllMeasurementSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAllMeasurementSchema", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorGetAggrResult_ struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorGetAggrResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceGetAggrResultArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getAggrResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceGetAggrResultResult{}
var retval [][]byte
  var err2 error
  if retval, err2 = p.handler.GetAggrResult_(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getAggrResult: " + err2.Error())
    oprot.WriteMessageBegin("getAggrResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getAggrResult", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorGetUnregisteredTimeseries struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorGetUnregisteredTimeseries) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceGetUnregisteredTimeseriesArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getUnregisteredTimeseries", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceGetUnregisteredTimeseriesResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.GetUnregisteredTimeseries(ctx, args.Header, args.TimeseriesList); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getUnregisteredTimeseries: " + err2.Error())
    oprot.WriteMessageBegin("getUnregisteredTimeseries", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getUnregisteredTimeseries", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorPullSnapshot struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorPullSnapshot) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServicePullSnapshotArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("pullSnapshot", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServicePullSnapshotResult{}
var retval *PullSnapshotResp
  var err2 error
  if retval, err2 = p.handler.PullSnapshot(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pullSnapshot: " + err2.Error())
    oprot.WriteMessageBegin("pullSnapshot", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("pullSnapshot", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorGetGroupByExecutor struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorGetGroupByExecutor) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceGetGroupByExecutorArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGroupByExecutor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceGetGroupByExecutorResult{}
var retval Long
  var err2 error
  if retval, err2 = p.handler.GetGroupByExecutor(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupByExecutor: " + err2.Error())
    oprot.WriteMessageBegin("getGroupByExecutor", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getGroupByExecutor", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorGetGroupByResult_ struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorGetGroupByResult_) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceGetGroupByResultArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getGroupByResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceGetGroupByResultResult{}
var retval [][]byte
  var err2 error
  if retval, err2 = p.handler.GetGroupByResult_(ctx, args.Header, args.ExecutorId, args.StartTime, args.EndTime); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getGroupByResult: " + err2.Error())
    oprot.WriteMessageBegin("getGroupByResult", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("getGroupByResult", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorPullTimeSeriesSchema struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorPullTimeSeriesSchema) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServicePullTimeSeriesSchemaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("pullTimeSeriesSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServicePullTimeSeriesSchemaResult{}
var retval *PullSchemaResp
  var err2 error
  if retval, err2 = p.handler.PullTimeSeriesSchema(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pullTimeSeriesSchema: " + err2.Error())
    oprot.WriteMessageBegin("pullTimeSeriesSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("pullTimeSeriesSchema", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorPullMeasurementSchema struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorPullMeasurementSchema) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServicePullMeasurementSchemaArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("pullMeasurementSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServicePullMeasurementSchemaResult{}
var retval *PullSchemaResp
  var err2 error
  if retval, err2 = p.handler.PullMeasurementSchema(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing pullMeasurementSchema: " + err2.Error())
    oprot.WriteMessageBegin("pullMeasurementSchema", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("pullMeasurementSchema", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorPreviousFill struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorPreviousFill) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServicePreviousFillArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("previousFill", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServicePreviousFillResult{}
var retval []byte
  var err2 error
  if retval, err2 = p.handler.PreviousFill(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing previousFill: " + err2.Error())
    oprot.WriteMessageBegin("previousFill", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("previousFill", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorLast struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorLast) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceLastArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("last", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceLastResult{}
var retval []byte
  var err2 error
  if retval, err2 = p.handler.Last(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing last: " + err2.Error())
    oprot.WriteMessageBegin("last", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("last", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorGetPathCount struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorGetPathCount) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceGetPathCountArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("getPathCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceGetPathCountResult{}
var retval Int
  var err2 error
  if retval, err2 = p.handler.GetPathCount(ctx, args.Header, args.PathsToQuery, args.Level); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getPathCount: " + err2.Error())
    oprot.WriteMessageBegin("getPathCount", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("getPathCount", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSDataServiceProcessorOnSnapshotApplied struct {
  handler TSDataService
}

func (p *tSDataServiceProcessorOnSnapshotApplied) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSDataServiceOnSnapshotAppliedArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("onSnapshotApplied", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSDataServiceOnSnapshotAppliedResult{}
var retval bool
  var err2 error
  if retval, err2 = p.handler.OnSnapshotApplied(ctx, args.Header, args.Slots); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing onSnapshotApplied: " + err2.Error())
    oprot.WriteMessageBegin("onSnapshotApplied", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("onSnapshotApplied", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type TSDataServiceQuerySingleSeriesArgs struct {
  Request *SingleSeriesQueryRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTSDataServiceQuerySingleSeriesArgs() *TSDataServiceQuerySingleSeriesArgs {
  return &TSDataServiceQuerySingleSeriesArgs{}
}

var TSDataServiceQuerySingleSeriesArgs_Request_DEFAULT *SingleSeriesQueryRequest
func (p *TSDataServiceQuerySingleSeriesArgs) GetRequest() *SingleSeriesQueryRequest {
  if !p.IsSetRequest() {
    return TSDataServiceQuerySingleSeriesArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TSDataServiceQuerySingleSeriesArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TSDataServiceQuerySingleSeriesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceQuerySingleSeriesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &SingleSeriesQueryRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TSDataServiceQuerySingleSeriesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("querySingleSeries_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceQuerySingleSeriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TSDataServiceQuerySingleSeriesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceQuerySingleSeriesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceQuerySingleSeriesResult struct {
  Success *Long `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceQuerySingleSeriesResult() *TSDataServiceQuerySingleSeriesResult {
  return &TSDataServiceQuerySingleSeriesResult{}
}

var TSDataServiceQuerySingleSeriesResult_Success_DEFAULT Long
func (p *TSDataServiceQuerySingleSeriesResult) GetSuccess() Long {
  if !p.IsSetSuccess() {
    return TSDataServiceQuerySingleSeriesResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TSDataServiceQuerySingleSeriesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceQuerySingleSeriesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceQuerySingleSeriesResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Long(v)
  p.Success = &temp
}
  return nil
}

func (p *TSDataServiceQuerySingleSeriesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("querySingleSeries_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceQuerySingleSeriesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceQuerySingleSeriesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceQuerySingleSeriesResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - ReaderId
type TSDataServiceFetchSingleSeriesArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  ReaderId Long `thrift:"readerId,2" db:"readerId" json:"readerId"`
}

func NewTSDataServiceFetchSingleSeriesArgs() *TSDataServiceFetchSingleSeriesArgs {
  return &TSDataServiceFetchSingleSeriesArgs{}
}

var TSDataServiceFetchSingleSeriesArgs_Header_DEFAULT *Node
func (p *TSDataServiceFetchSingleSeriesArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceFetchSingleSeriesArgs_Header_DEFAULT
  }
return p.Header
}

func (p *TSDataServiceFetchSingleSeriesArgs) GetReaderId() Long {
  return p.ReaderId
}
func (p *TSDataServiceFetchSingleSeriesArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceFetchSingleSeriesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceFetchSingleSeriesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceFetchSingleSeriesArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Long(v)
  p.ReaderId = temp
}
  return nil
}

func (p *TSDataServiceFetchSingleSeriesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchSingleSeries_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceFetchSingleSeriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceFetchSingleSeriesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("readerId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:readerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReaderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.readerId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:readerId: ", p), err) }
  return err
}

func (p *TSDataServiceFetchSingleSeriesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceFetchSingleSeriesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceFetchSingleSeriesResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceFetchSingleSeriesResult() *TSDataServiceFetchSingleSeriesResult {
  return &TSDataServiceFetchSingleSeriesResult{}
}

var TSDataServiceFetchSingleSeriesResult_Success_DEFAULT []byte

func (p *TSDataServiceFetchSingleSeriesResult) GetSuccess() []byte {
  return p.Success
}
func (p *TSDataServiceFetchSingleSeriesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceFetchSingleSeriesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceFetchSingleSeriesResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *TSDataServiceFetchSingleSeriesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchSingleSeries_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceFetchSingleSeriesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceFetchSingleSeriesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceFetchSingleSeriesResult(%+v)", *p)
}

// Attributes:
//  - Request
type TSDataServiceQuerySingleSeriesByTimestampArgs struct {
  Request *SingleSeriesQueryRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTSDataServiceQuerySingleSeriesByTimestampArgs() *TSDataServiceQuerySingleSeriesByTimestampArgs {
  return &TSDataServiceQuerySingleSeriesByTimestampArgs{}
}

var TSDataServiceQuerySingleSeriesByTimestampArgs_Request_DEFAULT *SingleSeriesQueryRequest
func (p *TSDataServiceQuerySingleSeriesByTimestampArgs) GetRequest() *SingleSeriesQueryRequest {
  if !p.IsSetRequest() {
    return TSDataServiceQuerySingleSeriesByTimestampArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TSDataServiceQuerySingleSeriesByTimestampArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TSDataServiceQuerySingleSeriesByTimestampArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceQuerySingleSeriesByTimestampArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &SingleSeriesQueryRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TSDataServiceQuerySingleSeriesByTimestampArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("querySingleSeriesByTimestamp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceQuerySingleSeriesByTimestampArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TSDataServiceQuerySingleSeriesByTimestampArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceQuerySingleSeriesByTimestampArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceQuerySingleSeriesByTimestampResult struct {
  Success *Long `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceQuerySingleSeriesByTimestampResult() *TSDataServiceQuerySingleSeriesByTimestampResult {
  return &TSDataServiceQuerySingleSeriesByTimestampResult{}
}

var TSDataServiceQuerySingleSeriesByTimestampResult_Success_DEFAULT Long
func (p *TSDataServiceQuerySingleSeriesByTimestampResult) GetSuccess() Long {
  if !p.IsSetSuccess() {
    return TSDataServiceQuerySingleSeriesByTimestampResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TSDataServiceQuerySingleSeriesByTimestampResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceQuerySingleSeriesByTimestampResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceQuerySingleSeriesByTimestampResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Long(v)
  p.Success = &temp
}
  return nil
}

func (p *TSDataServiceQuerySingleSeriesByTimestampResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("querySingleSeriesByTimestamp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceQuerySingleSeriesByTimestampResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceQuerySingleSeriesByTimestampResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceQuerySingleSeriesByTimestampResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - ReaderId
//  - Timestamp
type TSDataServiceFetchSingleSeriesByTimestampArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  ReaderId Long `thrift:"readerId,2" db:"readerId" json:"readerId"`
  Timestamp Long `thrift:"timestamp,3" db:"timestamp" json:"timestamp"`
}

func NewTSDataServiceFetchSingleSeriesByTimestampArgs() *TSDataServiceFetchSingleSeriesByTimestampArgs {
  return &TSDataServiceFetchSingleSeriesByTimestampArgs{}
}

var TSDataServiceFetchSingleSeriesByTimestampArgs_Header_DEFAULT *Node
func (p *TSDataServiceFetchSingleSeriesByTimestampArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceFetchSingleSeriesByTimestampArgs_Header_DEFAULT
  }
return p.Header
}

func (p *TSDataServiceFetchSingleSeriesByTimestampArgs) GetReaderId() Long {
  return p.ReaderId
}

func (p *TSDataServiceFetchSingleSeriesByTimestampArgs) GetTimestamp() Long {
  return p.Timestamp
}
func (p *TSDataServiceFetchSingleSeriesByTimestampArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceFetchSingleSeriesByTimestampArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceFetchSingleSeriesByTimestampArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceFetchSingleSeriesByTimestampArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Long(v)
  p.ReaderId = temp
}
  return nil
}

func (p *TSDataServiceFetchSingleSeriesByTimestampArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Long(v)
  p.Timestamp = temp
}
  return nil
}

func (p *TSDataServiceFetchSingleSeriesByTimestampArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchSingleSeriesByTimestamp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceFetchSingleSeriesByTimestampArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceFetchSingleSeriesByTimestampArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("readerId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:readerId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ReaderId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.readerId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:readerId: ", p), err) }
  return err
}

func (p *TSDataServiceFetchSingleSeriesByTimestampArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err) }
  if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err) }
  return err
}

func (p *TSDataServiceFetchSingleSeriesByTimestampArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceFetchSingleSeriesByTimestampArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceFetchSingleSeriesByTimestampResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceFetchSingleSeriesByTimestampResult() *TSDataServiceFetchSingleSeriesByTimestampResult {
  return &TSDataServiceFetchSingleSeriesByTimestampResult{}
}

var TSDataServiceFetchSingleSeriesByTimestampResult_Success_DEFAULT []byte

func (p *TSDataServiceFetchSingleSeriesByTimestampResult) GetSuccess() []byte {
  return p.Success
}
func (p *TSDataServiceFetchSingleSeriesByTimestampResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceFetchSingleSeriesByTimestampResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceFetchSingleSeriesByTimestampResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *TSDataServiceFetchSingleSeriesByTimestampResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("fetchSingleSeriesByTimestamp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceFetchSingleSeriesByTimestampResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceFetchSingleSeriesByTimestampResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceFetchSingleSeriesByTimestampResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - ThisNode
//  - QueryId
type TSDataServiceEndQueryArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  ThisNode *Node `thrift:"thisNode,2" db:"thisNode" json:"thisNode"`
  QueryId Long `thrift:"queryId,3" db:"queryId" json:"queryId"`
}

func NewTSDataServiceEndQueryArgs() *TSDataServiceEndQueryArgs {
  return &TSDataServiceEndQueryArgs{}
}

var TSDataServiceEndQueryArgs_Header_DEFAULT *Node
func (p *TSDataServiceEndQueryArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceEndQueryArgs_Header_DEFAULT
  }
return p.Header
}
var TSDataServiceEndQueryArgs_ThisNode_DEFAULT *Node
func (p *TSDataServiceEndQueryArgs) GetThisNode() *Node {
  if !p.IsSetThisNode() {
    return TSDataServiceEndQueryArgs_ThisNode_DEFAULT
  }
return p.ThisNode
}

func (p *TSDataServiceEndQueryArgs) GetQueryId() Long {
  return p.QueryId
}
func (p *TSDataServiceEndQueryArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceEndQueryArgs) IsSetThisNode() bool {
  return p.ThisNode != nil
}

func (p *TSDataServiceEndQueryArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceEndQueryArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceEndQueryArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.ThisNode = &Node{}
  if err := p.ThisNode.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ThisNode), err)
  }
  return nil
}

func (p *TSDataServiceEndQueryArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Long(v)
  p.QueryId = temp
}
  return nil
}

func (p *TSDataServiceEndQueryArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("endQuery_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceEndQueryArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceEndQueryArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("thisNode", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:thisNode: ", p), err) }
  if err := p.ThisNode.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ThisNode), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:thisNode: ", p), err) }
  return err
}

func (p *TSDataServiceEndQueryArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("queryId", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:queryId: ", p), err) }
  if err := oprot.WriteI64(int64(p.QueryId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.queryId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:queryId: ", p), err) }
  return err
}

func (p *TSDataServiceEndQueryArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceEndQueryArgs(%+v)", *p)
}

type TSDataServiceEndQueryResult struct {
}

func NewTSDataServiceEndQueryResult() *TSDataServiceEndQueryResult {
  return &TSDataServiceEndQueryResult{}
}

func (p *TSDataServiceEndQueryResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceEndQueryResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("endQuery_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceEndQueryResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceEndQueryResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - Path
type TSDataServiceGetAllPathsArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  Path []string `thrift:"path,2" db:"path" json:"path"`
}

func NewTSDataServiceGetAllPathsArgs() *TSDataServiceGetAllPathsArgs {
  return &TSDataServiceGetAllPathsArgs{}
}

var TSDataServiceGetAllPathsArgs_Header_DEFAULT *Node
func (p *TSDataServiceGetAllPathsArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceGetAllPathsArgs_Header_DEFAULT
  }
return p.Header
}

func (p *TSDataServiceGetAllPathsArgs) GetPath() []string {
  return p.Path
}
func (p *TSDataServiceGetAllPathsArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceGetAllPathsArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetAllPathsArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceGetAllPathsArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Path =  tSlice
  for i := 0; i < size; i ++ {
var _elem129 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem129 = v
}
    p.Path = append(p.Path, _elem129)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSDataServiceGetAllPathsArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllPaths_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetAllPathsArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceGetAllPathsArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Path)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Path {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *TSDataServiceGetAllPathsArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetAllPathsArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceGetAllPathsResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceGetAllPathsResult() *TSDataServiceGetAllPathsResult {
  return &TSDataServiceGetAllPathsResult{}
}

var TSDataServiceGetAllPathsResult_Success_DEFAULT []string

func (p *TSDataServiceGetAllPathsResult) GetSuccess() []string {
  return p.Success
}
func (p *TSDataServiceGetAllPathsResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceGetAllPathsResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetAllPathsResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem130 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem130 = v
}
    p.Success = append(p.Success, _elem130)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSDataServiceGetAllPathsResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllPaths_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetAllPathsResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceGetAllPathsResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetAllPathsResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - Path
type TSDataServiceGetAllDevicesArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  Path []string `thrift:"path,2" db:"path" json:"path"`
}

func NewTSDataServiceGetAllDevicesArgs() *TSDataServiceGetAllDevicesArgs {
  return &TSDataServiceGetAllDevicesArgs{}
}

var TSDataServiceGetAllDevicesArgs_Header_DEFAULT *Node
func (p *TSDataServiceGetAllDevicesArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceGetAllDevicesArgs_Header_DEFAULT
  }
return p.Header
}

func (p *TSDataServiceGetAllDevicesArgs) GetPath() []string {
  return p.Path
}
func (p *TSDataServiceGetAllDevicesArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceGetAllDevicesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetAllDevicesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceGetAllDevicesArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Path =  tSlice
  for i := 0; i < size; i ++ {
var _elem131 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem131 = v
}
    p.Path = append(p.Path, _elem131)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSDataServiceGetAllDevicesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllDevices_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetAllDevicesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceGetAllDevicesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Path)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Path {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *TSDataServiceGetAllDevicesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetAllDevicesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceGetAllDevicesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceGetAllDevicesResult() *TSDataServiceGetAllDevicesResult {
  return &TSDataServiceGetAllDevicesResult{}
}

var TSDataServiceGetAllDevicesResult_Success_DEFAULT []string

func (p *TSDataServiceGetAllDevicesResult) GetSuccess() []string {
  return p.Success
}
func (p *TSDataServiceGetAllDevicesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceGetAllDevicesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetAllDevicesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem132 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem132 = v
}
    p.Success = append(p.Success, _elem132)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TSDataServiceGetAllDevicesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllDevices_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetAllDevicesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if reflect.DeepEqual(p.Success[i],p.Success[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success[i]))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceGetAllDevicesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetAllDevicesResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - Path
//  - NodeLevel
type TSDataServiceGetNodeListArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  Path string `thrift:"path,2" db:"path" json:"path"`
  NodeLevel Int `thrift:"nodeLevel,3" db:"nodeLevel" json:"nodeLevel"`
}

func NewTSDataServiceGetNodeListArgs() *TSDataServiceGetNodeListArgs {
  return &TSDataServiceGetNodeListArgs{}
}

var TSDataServiceGetNodeListArgs_Header_DEFAULT *Node
func (p *TSDataServiceGetNodeListArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceGetNodeListArgs_Header_DEFAULT
  }
return p.Header
}

func (p *TSDataServiceGetNodeListArgs) GetPath() string {
  return p.Path
}

func (p *TSDataServiceGetNodeListArgs) GetNodeLevel() Int {
  return p.NodeLevel
}
func (p *TSDataServiceGetNodeListArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceGetNodeListArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetNodeListArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceGetNodeListArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *TSDataServiceGetNodeListArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Int(v)
  p.NodeLevel = temp
}
  return nil
}

func (p *TSDataServiceGetNodeListArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getNodeList_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetNodeListArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceGetNodeListArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *TSDataServiceGetNodeListArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("nodeLevel", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:nodeLevel: ", p), err) }
  if err := oprot.WriteI32(int32(p.NodeLevel)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.nodeLevel (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:nodeLevel: ", p), err) }
  return err
}

func (p *TSDataServiceGetNodeListArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetNodeListArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceGetNodeListResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceGetNodeListResult() *TSDataServiceGetNodeListResult {
  return &TSDataServiceGetNodeListResult{}
}

var TSDataServiceGetNodeListResult_Success_DEFAULT []string

func (p *TSDataServiceGetNodeListResult) GetSuccess() []string {
  return p.Success
}
func (p *TSDataServiceGetNodeListResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceGetNodeListResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetNodeListResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem133 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem133 = v
}
    p.Success = append(p.Success, _elem133)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSDataServiceGetNodeListResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getNodeList_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetNodeListResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceGetNodeListResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetNodeListResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - Path
type TSDataServiceGetChildNodePathInNextLevelArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  Path string `thrift:"path,2" db:"path" json:"path"`
}

func NewTSDataServiceGetChildNodePathInNextLevelArgs() *TSDataServiceGetChildNodePathInNextLevelArgs {
  return &TSDataServiceGetChildNodePathInNextLevelArgs{}
}

var TSDataServiceGetChildNodePathInNextLevelArgs_Header_DEFAULT *Node
func (p *TSDataServiceGetChildNodePathInNextLevelArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceGetChildNodePathInNextLevelArgs_Header_DEFAULT
  }
return p.Header
}

func (p *TSDataServiceGetChildNodePathInNextLevelArgs) GetPath() string {
  return p.Path
}
func (p *TSDataServiceGetChildNodePathInNextLevelArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceGetChildNodePathInNextLevelArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetChildNodePathInNextLevelArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceGetChildNodePathInNextLevelArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Path = v
}
  return nil
}

func (p *TSDataServiceGetChildNodePathInNextLevelArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChildNodePathInNextLevel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetChildNodePathInNextLevelArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceGetChildNodePathInNextLevelArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("path", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:path: ", p), err) }
  if err := oprot.WriteString(string(p.Path)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.path (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:path: ", p), err) }
  return err
}

func (p *TSDataServiceGetChildNodePathInNextLevelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetChildNodePathInNextLevelArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceGetChildNodePathInNextLevelResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceGetChildNodePathInNextLevelResult() *TSDataServiceGetChildNodePathInNextLevelResult {
  return &TSDataServiceGetChildNodePathInNextLevelResult{}
}

var TSDataServiceGetChildNodePathInNextLevelResult_Success_DEFAULT []string

func (p *TSDataServiceGetChildNodePathInNextLevelResult) GetSuccess() []string {
  return p.Success
}
func (p *TSDataServiceGetChildNodePathInNextLevelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceGetChildNodePathInNextLevelResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.SET {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetChildNodePathInNextLevelResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadSetBegin()
  if err != nil {
    return thrift.PrependError("error reading set begin: ", err)
  }
  tSet := make([]string, 0, size)
  p.Success =  tSet
  for i := 0; i < size; i ++ {
var _elem134 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem134 = v
}
    p.Success = append(p.Success, _elem134)
  }
  if err := iprot.ReadSetEnd(); err != nil {
    return thrift.PrependError("error reading set end: ", err)
  }
  return nil
}

func (p *TSDataServiceGetChildNodePathInNextLevelResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getChildNodePathInNextLevel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetChildNodePathInNextLevelResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.SET, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteSetBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing set begin: ", err)
    }
    for i := 0; i<len(p.Success); i++ {
      for j := i+1; j<len(p.Success); j++ {
        if reflect.DeepEqual(p.Success[i],p.Success[j]) { 
          return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.Success[i]))
        }
      }
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteSetEnd(); err != nil {
      return thrift.PrependError("error writing set end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceGetChildNodePathInNextLevelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetChildNodePathInNextLevelResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - PlanBinary
type TSDataServiceGetAllMeasurementSchemaArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  PlanBinary []byte `thrift:"planBinary,2" db:"planBinary" json:"planBinary"`
}

func NewTSDataServiceGetAllMeasurementSchemaArgs() *TSDataServiceGetAllMeasurementSchemaArgs {
  return &TSDataServiceGetAllMeasurementSchemaArgs{}
}

var TSDataServiceGetAllMeasurementSchemaArgs_Header_DEFAULT *Node
func (p *TSDataServiceGetAllMeasurementSchemaArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceGetAllMeasurementSchemaArgs_Header_DEFAULT
  }
return p.Header
}

func (p *TSDataServiceGetAllMeasurementSchemaArgs) GetPlanBinary() []byte {
  return p.PlanBinary
}
func (p *TSDataServiceGetAllMeasurementSchemaArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceGetAllMeasurementSchemaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetAllMeasurementSchemaArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceGetAllMeasurementSchemaArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.PlanBinary = v
}
  return nil
}

func (p *TSDataServiceGetAllMeasurementSchemaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllMeasurementSchema_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetAllMeasurementSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceGetAllMeasurementSchemaArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("planBinary", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:planBinary: ", p), err) }
  if err := oprot.WriteBinary(p.PlanBinary); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.planBinary (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:planBinary: ", p), err) }
  return err
}

func (p *TSDataServiceGetAllMeasurementSchemaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetAllMeasurementSchemaArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceGetAllMeasurementSchemaResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceGetAllMeasurementSchemaResult() *TSDataServiceGetAllMeasurementSchemaResult {
  return &TSDataServiceGetAllMeasurementSchemaResult{}
}

var TSDataServiceGetAllMeasurementSchemaResult_Success_DEFAULT []byte

func (p *TSDataServiceGetAllMeasurementSchemaResult) GetSuccess() []byte {
  return p.Success
}
func (p *TSDataServiceGetAllMeasurementSchemaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceGetAllMeasurementSchemaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetAllMeasurementSchemaResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *TSDataServiceGetAllMeasurementSchemaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAllMeasurementSchema_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetAllMeasurementSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceGetAllMeasurementSchemaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetAllMeasurementSchemaResult(%+v)", *p)
}

// Attributes:
//  - Request
type TSDataServiceGetAggrResultArgs struct {
  Request *GetAggrResultRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTSDataServiceGetAggrResultArgs() *TSDataServiceGetAggrResultArgs {
  return &TSDataServiceGetAggrResultArgs{}
}

var TSDataServiceGetAggrResultArgs_Request_DEFAULT *GetAggrResultRequest
func (p *TSDataServiceGetAggrResultArgs) GetRequest() *GetAggrResultRequest {
  if !p.IsSetRequest() {
    return TSDataServiceGetAggrResultArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TSDataServiceGetAggrResultArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TSDataServiceGetAggrResultArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetAggrResultArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &GetAggrResultRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TSDataServiceGetAggrResultArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAggrResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetAggrResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TSDataServiceGetAggrResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetAggrResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceGetAggrResultResult struct {
  Success [][]byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceGetAggrResultResult() *TSDataServiceGetAggrResultResult {
  return &TSDataServiceGetAggrResultResult{}
}

var TSDataServiceGetAggrResultResult_Success_DEFAULT [][]byte

func (p *TSDataServiceGetAggrResultResult) GetSuccess() [][]byte {
  return p.Success
}
func (p *TSDataServiceGetAggrResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceGetAggrResultResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetAggrResultResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem135 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem135 = v
}
    p.Success = append(p.Success, _elem135)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSDataServiceGetAggrResultResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getAggrResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetAggrResultResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceGetAggrResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetAggrResultResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - TimeseriesList
type TSDataServiceGetUnregisteredTimeseriesArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  TimeseriesList []string `thrift:"timeseriesList,2" db:"timeseriesList" json:"timeseriesList"`
}

func NewTSDataServiceGetUnregisteredTimeseriesArgs() *TSDataServiceGetUnregisteredTimeseriesArgs {
  return &TSDataServiceGetUnregisteredTimeseriesArgs{}
}

var TSDataServiceGetUnregisteredTimeseriesArgs_Header_DEFAULT *Node
func (p *TSDataServiceGetUnregisteredTimeseriesArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceGetUnregisteredTimeseriesArgs_Header_DEFAULT
  }
return p.Header
}

func (p *TSDataServiceGetUnregisteredTimeseriesArgs) GetTimeseriesList() []string {
  return p.TimeseriesList
}
func (p *TSDataServiceGetUnregisteredTimeseriesArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceGetUnregisteredTimeseriesArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetUnregisteredTimeseriesArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceGetUnregisteredTimeseriesArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.TimeseriesList =  tSlice
  for i := 0; i < size; i ++ {
var _elem136 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem136 = v
}
    p.TimeseriesList = append(p.TimeseriesList, _elem136)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSDataServiceGetUnregisteredTimeseriesArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUnregisteredTimeseries_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetUnregisteredTimeseriesArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceGetUnregisteredTimeseriesArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("timeseriesList", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timeseriesList: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.TimeseriesList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TimeseriesList {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timeseriesList: ", p), err) }
  return err
}

func (p *TSDataServiceGetUnregisteredTimeseriesArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetUnregisteredTimeseriesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceGetUnregisteredTimeseriesResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceGetUnregisteredTimeseriesResult() *TSDataServiceGetUnregisteredTimeseriesResult {
  return &TSDataServiceGetUnregisteredTimeseriesResult{}
}

var TSDataServiceGetUnregisteredTimeseriesResult_Success_DEFAULT []string

func (p *TSDataServiceGetUnregisteredTimeseriesResult) GetSuccess() []string {
  return p.Success
}
func (p *TSDataServiceGetUnregisteredTimeseriesResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceGetUnregisteredTimeseriesResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetUnregisteredTimeseriesResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem137 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem137 = v
}
    p.Success = append(p.Success, _elem137)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSDataServiceGetUnregisteredTimeseriesResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getUnregisteredTimeseries_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetUnregisteredTimeseriesResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceGetUnregisteredTimeseriesResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetUnregisteredTimeseriesResult(%+v)", *p)
}

// Attributes:
//  - Request
type TSDataServicePullSnapshotArgs struct {
  Request *PullSnapshotRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTSDataServicePullSnapshotArgs() *TSDataServicePullSnapshotArgs {
  return &TSDataServicePullSnapshotArgs{}
}

var TSDataServicePullSnapshotArgs_Request_DEFAULT *PullSnapshotRequest
func (p *TSDataServicePullSnapshotArgs) GetRequest() *PullSnapshotRequest {
  if !p.IsSetRequest() {
    return TSDataServicePullSnapshotArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TSDataServicePullSnapshotArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TSDataServicePullSnapshotArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServicePullSnapshotArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &PullSnapshotRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TSDataServicePullSnapshotArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("pullSnapshot_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServicePullSnapshotArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TSDataServicePullSnapshotArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServicePullSnapshotArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServicePullSnapshotResult struct {
  Success *PullSnapshotResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServicePullSnapshotResult() *TSDataServicePullSnapshotResult {
  return &TSDataServicePullSnapshotResult{}
}

var TSDataServicePullSnapshotResult_Success_DEFAULT *PullSnapshotResp
func (p *TSDataServicePullSnapshotResult) GetSuccess() *PullSnapshotResp {
  if !p.IsSetSuccess() {
    return TSDataServicePullSnapshotResult_Success_DEFAULT
  }
return p.Success
}
func (p *TSDataServicePullSnapshotResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServicePullSnapshotResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServicePullSnapshotResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PullSnapshotResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TSDataServicePullSnapshotResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("pullSnapshot_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServicePullSnapshotResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServicePullSnapshotResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServicePullSnapshotResult(%+v)", *p)
}

// Attributes:
//  - Request
type TSDataServiceGetGroupByExecutorArgs struct {
  Request *GroupByRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTSDataServiceGetGroupByExecutorArgs() *TSDataServiceGetGroupByExecutorArgs {
  return &TSDataServiceGetGroupByExecutorArgs{}
}

var TSDataServiceGetGroupByExecutorArgs_Request_DEFAULT *GroupByRequest
func (p *TSDataServiceGetGroupByExecutorArgs) GetRequest() *GroupByRequest {
  if !p.IsSetRequest() {
    return TSDataServiceGetGroupByExecutorArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TSDataServiceGetGroupByExecutorArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TSDataServiceGetGroupByExecutorArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetGroupByExecutorArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &GroupByRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TSDataServiceGetGroupByExecutorArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupByExecutor_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetGroupByExecutorArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TSDataServiceGetGroupByExecutorArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetGroupByExecutorArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceGetGroupByExecutorResult struct {
  Success *Long `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceGetGroupByExecutorResult() *TSDataServiceGetGroupByExecutorResult {
  return &TSDataServiceGetGroupByExecutorResult{}
}

var TSDataServiceGetGroupByExecutorResult_Success_DEFAULT Long
func (p *TSDataServiceGetGroupByExecutorResult) GetSuccess() Long {
  if !p.IsSetSuccess() {
    return TSDataServiceGetGroupByExecutorResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TSDataServiceGetGroupByExecutorResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceGetGroupByExecutorResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetGroupByExecutorResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Long(v)
  p.Success = &temp
}
  return nil
}

func (p *TSDataServiceGetGroupByExecutorResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupByExecutor_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetGroupByExecutorResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceGetGroupByExecutorResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetGroupByExecutorResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - ExecutorId
//  - StartTime
//  - EndTime
type TSDataServiceGetGroupByResultArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  ExecutorId Long `thrift:"executorId,2" db:"executorId" json:"executorId"`
  StartTime Long `thrift:"startTime,3" db:"startTime" json:"startTime"`
  EndTime Long `thrift:"endTime,4" db:"endTime" json:"endTime"`
}

func NewTSDataServiceGetGroupByResultArgs() *TSDataServiceGetGroupByResultArgs {
  return &TSDataServiceGetGroupByResultArgs{}
}

var TSDataServiceGetGroupByResultArgs_Header_DEFAULT *Node
func (p *TSDataServiceGetGroupByResultArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceGetGroupByResultArgs_Header_DEFAULT
  }
return p.Header
}

func (p *TSDataServiceGetGroupByResultArgs) GetExecutorId() Long {
  return p.ExecutorId
}

func (p *TSDataServiceGetGroupByResultArgs) GetStartTime() Long {
  return p.StartTime
}

func (p *TSDataServiceGetGroupByResultArgs) GetEndTime() Long {
  return p.EndTime
}
func (p *TSDataServiceGetGroupByResultArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceGetGroupByResultArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetGroupByResultArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceGetGroupByResultArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  temp := Long(v)
  p.ExecutorId = temp
}
  return nil
}

func (p *TSDataServiceGetGroupByResultArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Long(v)
  p.StartTime = temp
}
  return nil
}

func (p *TSDataServiceGetGroupByResultArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  temp := Long(v)
  p.EndTime = temp
}
  return nil
}

func (p *TSDataServiceGetGroupByResultArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupByResult_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetGroupByResultArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceGetGroupByResultArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("executorId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:executorId: ", p), err) }
  if err := oprot.WriteI64(int64(p.ExecutorId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.executorId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:executorId: ", p), err) }
  return err
}

func (p *TSDataServiceGetGroupByResultArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err) }
  return err
}

func (p *TSDataServiceGetGroupByResultArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("endTime", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:endTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.EndTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.endTime (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:endTime: ", p), err) }
  return err
}

func (p *TSDataServiceGetGroupByResultArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetGroupByResultArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceGetGroupByResultResult struct {
  Success [][]byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceGetGroupByResultResult() *TSDataServiceGetGroupByResultResult {
  return &TSDataServiceGetGroupByResultResult{}
}

var TSDataServiceGetGroupByResultResult_Success_DEFAULT [][]byte

func (p *TSDataServiceGetGroupByResultResult) GetSuccess() [][]byte {
  return p.Success
}
func (p *TSDataServiceGetGroupByResultResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceGetGroupByResultResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetGroupByResultResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem138 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem138 = v
}
    p.Success = append(p.Success, _elem138)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSDataServiceGetGroupByResultResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getGroupByResult_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetGroupByResultResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteBinary(v); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceGetGroupByResultResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetGroupByResultResult(%+v)", *p)
}

// Attributes:
//  - Request
type TSDataServicePullTimeSeriesSchemaArgs struct {
  Request *PullSchemaRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTSDataServicePullTimeSeriesSchemaArgs() *TSDataServicePullTimeSeriesSchemaArgs {
  return &TSDataServicePullTimeSeriesSchemaArgs{}
}

var TSDataServicePullTimeSeriesSchemaArgs_Request_DEFAULT *PullSchemaRequest
func (p *TSDataServicePullTimeSeriesSchemaArgs) GetRequest() *PullSchemaRequest {
  if !p.IsSetRequest() {
    return TSDataServicePullTimeSeriesSchemaArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TSDataServicePullTimeSeriesSchemaArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TSDataServicePullTimeSeriesSchemaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServicePullTimeSeriesSchemaArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &PullSchemaRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TSDataServicePullTimeSeriesSchemaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("pullTimeSeriesSchema_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServicePullTimeSeriesSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TSDataServicePullTimeSeriesSchemaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServicePullTimeSeriesSchemaArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServicePullTimeSeriesSchemaResult struct {
  Success *PullSchemaResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServicePullTimeSeriesSchemaResult() *TSDataServicePullTimeSeriesSchemaResult {
  return &TSDataServicePullTimeSeriesSchemaResult{}
}

var TSDataServicePullTimeSeriesSchemaResult_Success_DEFAULT *PullSchemaResp
func (p *TSDataServicePullTimeSeriesSchemaResult) GetSuccess() *PullSchemaResp {
  if !p.IsSetSuccess() {
    return TSDataServicePullTimeSeriesSchemaResult_Success_DEFAULT
  }
return p.Success
}
func (p *TSDataServicePullTimeSeriesSchemaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServicePullTimeSeriesSchemaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServicePullTimeSeriesSchemaResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PullSchemaResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TSDataServicePullTimeSeriesSchemaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("pullTimeSeriesSchema_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServicePullTimeSeriesSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServicePullTimeSeriesSchemaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServicePullTimeSeriesSchemaResult(%+v)", *p)
}

// Attributes:
//  - Request
type TSDataServicePullMeasurementSchemaArgs struct {
  Request *PullSchemaRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTSDataServicePullMeasurementSchemaArgs() *TSDataServicePullMeasurementSchemaArgs {
  return &TSDataServicePullMeasurementSchemaArgs{}
}

var TSDataServicePullMeasurementSchemaArgs_Request_DEFAULT *PullSchemaRequest
func (p *TSDataServicePullMeasurementSchemaArgs) GetRequest() *PullSchemaRequest {
  if !p.IsSetRequest() {
    return TSDataServicePullMeasurementSchemaArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TSDataServicePullMeasurementSchemaArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TSDataServicePullMeasurementSchemaArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServicePullMeasurementSchemaArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &PullSchemaRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TSDataServicePullMeasurementSchemaArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("pullMeasurementSchema_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServicePullMeasurementSchemaArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TSDataServicePullMeasurementSchemaArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServicePullMeasurementSchemaArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServicePullMeasurementSchemaResult struct {
  Success *PullSchemaResp `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServicePullMeasurementSchemaResult() *TSDataServicePullMeasurementSchemaResult {
  return &TSDataServicePullMeasurementSchemaResult{}
}

var TSDataServicePullMeasurementSchemaResult_Success_DEFAULT *PullSchemaResp
func (p *TSDataServicePullMeasurementSchemaResult) GetSuccess() *PullSchemaResp {
  if !p.IsSetSuccess() {
    return TSDataServicePullMeasurementSchemaResult_Success_DEFAULT
  }
return p.Success
}
func (p *TSDataServicePullMeasurementSchemaResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServicePullMeasurementSchemaResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServicePullMeasurementSchemaResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &PullSchemaResp{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TSDataServicePullMeasurementSchemaResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("pullMeasurementSchema_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServicePullMeasurementSchemaResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServicePullMeasurementSchemaResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServicePullMeasurementSchemaResult(%+v)", *p)
}

// Attributes:
//  - Request
type TSDataServicePreviousFillArgs struct {
  Request *PreviousFillRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTSDataServicePreviousFillArgs() *TSDataServicePreviousFillArgs {
  return &TSDataServicePreviousFillArgs{}
}

var TSDataServicePreviousFillArgs_Request_DEFAULT *PreviousFillRequest
func (p *TSDataServicePreviousFillArgs) GetRequest() *PreviousFillRequest {
  if !p.IsSetRequest() {
    return TSDataServicePreviousFillArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TSDataServicePreviousFillArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TSDataServicePreviousFillArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServicePreviousFillArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &PreviousFillRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TSDataServicePreviousFillArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("previousFill_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServicePreviousFillArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TSDataServicePreviousFillArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServicePreviousFillArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServicePreviousFillResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServicePreviousFillResult() *TSDataServicePreviousFillResult {
  return &TSDataServicePreviousFillResult{}
}

var TSDataServicePreviousFillResult_Success_DEFAULT []byte

func (p *TSDataServicePreviousFillResult) GetSuccess() []byte {
  return p.Success
}
func (p *TSDataServicePreviousFillResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServicePreviousFillResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServicePreviousFillResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *TSDataServicePreviousFillResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("previousFill_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServicePreviousFillResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServicePreviousFillResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServicePreviousFillResult(%+v)", *p)
}

// Attributes:
//  - Request
type TSDataServiceLastArgs struct {
  Request *LastQueryRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTSDataServiceLastArgs() *TSDataServiceLastArgs {
  return &TSDataServiceLastArgs{}
}

var TSDataServiceLastArgs_Request_DEFAULT *LastQueryRequest
func (p *TSDataServiceLastArgs) GetRequest() *LastQueryRequest {
  if !p.IsSetRequest() {
    return TSDataServiceLastArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TSDataServiceLastArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TSDataServiceLastArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceLastArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &LastQueryRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TSDataServiceLastArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("last_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceLastArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TSDataServiceLastArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceLastArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceLastResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceLastResult() *TSDataServiceLastResult {
  return &TSDataServiceLastResult{}
}

var TSDataServiceLastResult_Success_DEFAULT []byte

func (p *TSDataServiceLastResult) GetSuccess() []byte {
  return p.Success
}
func (p *TSDataServiceLastResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceLastResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceLastResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *TSDataServiceLastResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("last_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceLastResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceLastResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceLastResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - PathsToQuery
//  - Level
type TSDataServiceGetPathCountArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  PathsToQuery []string `thrift:"pathsToQuery,2" db:"pathsToQuery" json:"pathsToQuery"`
  Level Int `thrift:"level,3" db:"level" json:"level"`
}

func NewTSDataServiceGetPathCountArgs() *TSDataServiceGetPathCountArgs {
  return &TSDataServiceGetPathCountArgs{}
}

var TSDataServiceGetPathCountArgs_Header_DEFAULT *Node
func (p *TSDataServiceGetPathCountArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceGetPathCountArgs_Header_DEFAULT
  }
return p.Header
}

func (p *TSDataServiceGetPathCountArgs) GetPathsToQuery() []string {
  return p.PathsToQuery
}

func (p *TSDataServiceGetPathCountArgs) GetLevel() Int {
  return p.Level
}
func (p *TSDataServiceGetPathCountArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceGetPathCountArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetPathCountArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceGetPathCountArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.PathsToQuery =  tSlice
  for i := 0; i < size; i ++ {
var _elem139 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem139 = v
}
    p.PathsToQuery = append(p.PathsToQuery, _elem139)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSDataServiceGetPathCountArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := Int(v)
  p.Level = temp
}
  return nil
}

func (p *TSDataServiceGetPathCountArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPathCount_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetPathCountArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceGetPathCountArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("pathsToQuery", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:pathsToQuery: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.PathsToQuery)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.PathsToQuery {
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:pathsToQuery: ", p), err) }
  return err
}

func (p *TSDataServiceGetPathCountArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("level", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:level: ", p), err) }
  if err := oprot.WriteI32(int32(p.Level)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.level (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:level: ", p), err) }
  return err
}

func (p *TSDataServiceGetPathCountArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetPathCountArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceGetPathCountResult struct {
  Success *Int `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceGetPathCountResult() *TSDataServiceGetPathCountResult {
  return &TSDataServiceGetPathCountResult{}
}

var TSDataServiceGetPathCountResult_Success_DEFAULT Int
func (p *TSDataServiceGetPathCountResult) GetSuccess() Int {
  if !p.IsSetSuccess() {
    return TSDataServiceGetPathCountResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TSDataServiceGetPathCountResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceGetPathCountResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceGetPathCountResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Int(v)
  p.Success = &temp
}
  return nil
}

func (p *TSDataServiceGetPathCountResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("getPathCount_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceGetPathCountResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceGetPathCountResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceGetPathCountResult(%+v)", *p)
}

// Attributes:
//  - Header
//  - Slots
type TSDataServiceOnSnapshotAppliedArgs struct {
  Header *Node `thrift:"header,1" db:"header" json:"header"`
  Slots []Int `thrift:"slots,2" db:"slots" json:"slots"`
}

func NewTSDataServiceOnSnapshotAppliedArgs() *TSDataServiceOnSnapshotAppliedArgs {
  return &TSDataServiceOnSnapshotAppliedArgs{}
}

var TSDataServiceOnSnapshotAppliedArgs_Header_DEFAULT *Node
func (p *TSDataServiceOnSnapshotAppliedArgs) GetHeader() *Node {
  if !p.IsSetHeader() {
    return TSDataServiceOnSnapshotAppliedArgs_Header_DEFAULT
  }
return p.Header
}

func (p *TSDataServiceOnSnapshotAppliedArgs) GetSlots() []Int {
  return p.Slots
}
func (p *TSDataServiceOnSnapshotAppliedArgs) IsSetHeader() bool {
  return p.Header != nil
}

func (p *TSDataServiceOnSnapshotAppliedArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceOnSnapshotAppliedArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Header = &Node{}
  if err := p.Header.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Header), err)
  }
  return nil
}

func (p *TSDataServiceOnSnapshotAppliedArgs)  ReadField2(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]Int, 0, size)
  p.Slots =  tSlice
  for i := 0; i < size; i ++ {
var _elem140 Int
    if v, err := iprot.ReadI32(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    temp := Int(v)
    _elem140 = temp
}
    p.Slots = append(p.Slots, _elem140)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSDataServiceOnSnapshotAppliedArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onSnapshotApplied_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceOnSnapshotAppliedArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("header", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:header: ", p), err) }
  if err := p.Header.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Header), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:header: ", p), err) }
  return err
}

func (p *TSDataServiceOnSnapshotAppliedArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("slots", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:slots: ", p), err) }
  if err := oprot.WriteListBegin(thrift.I32, len(p.Slots)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Slots {
    if err := oprot.WriteI32(int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:slots: ", p), err) }
  return err
}

func (p *TSDataServiceOnSnapshotAppliedArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceOnSnapshotAppliedArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSDataServiceOnSnapshotAppliedResult struct {
  Success *bool `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSDataServiceOnSnapshotAppliedResult() *TSDataServiceOnSnapshotAppliedResult {
  return &TSDataServiceOnSnapshotAppliedResult{}
}

var TSDataServiceOnSnapshotAppliedResult_Success_DEFAULT bool
func (p *TSDataServiceOnSnapshotAppliedResult) GetSuccess() bool {
  if !p.IsSetSuccess() {
    return TSDataServiceOnSnapshotAppliedResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TSDataServiceOnSnapshotAppliedResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSDataServiceOnSnapshotAppliedResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSDataServiceOnSnapshotAppliedResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *TSDataServiceOnSnapshotAppliedResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("onSnapshotApplied_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSDataServiceOnSnapshotAppliedResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.BOOL, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBool(bool(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSDataServiceOnSnapshotAppliedResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSDataServiceOnSnapshotAppliedResult(%+v)", *p)
}


type TSMetaService interface {
RaftService

  // Node which is not leader will call this method to try to add itself into the cluster as a new node.
  // <br>For the receiver,
  // If the local node is leader, it'll check whether the cluster can add this new node;
  // otherwise, the local node will transfer the request to the leader.
  // 
  // @param node a new node that needs to be added
  // 
  // 
  // Parameters:
  //  - Node
  //  - StartUpStatus
  AddNode(ctx context.Context, node *Node, startUpStatus *StartUpStatus) (r *AddNodeResponse, err error)
  // Parameters:
  //  - StartUpStatus
  CheckStatus(ctx context.Context, startUpStatus *StartUpStatus) (r *CheckStatusResponse, err error)
  // Remove a node from the cluster. If the node is not in the cluster or the cluster size will
  // less than replication number, the request will be rejected.
  // return -1(RESPONSE_AGREE) or -3(RESPONSE_REJECT) or -9(RESPONSE_CLUSTER_TOO_SMALL)
  // 
  // 
  // Parameters:
  //  - Node
  RemoveNode(ctx context.Context, node *Node) (r Long, err error)
  // When a node is removed from the cluster, if it is not the meta leader, it cannot receive
  // the commit command by heartbeat since it has been removed, so the leader should tell it
  // directly that it is no longer in the cluster.
  // 
  Exile(ctx context.Context) (err error)
  QueryNodeStatus(ctx context.Context) (r *TNodeStatus, err error)
  CheckAlive(ctx context.Context) (r *Node, err error)
}

type TSMetaServiceClient struct {
  *RaftServiceClient
}

func NewTSMetaServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TSMetaServiceClient {
  return &TSMetaServiceClient{RaftServiceClient: NewRaftServiceClientFactory(t, f)}}

func NewTSMetaServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TSMetaServiceClient {
  return &TSMetaServiceClient{RaftServiceClient: NewRaftServiceClientProtocol(t, iprot, oprot)}
}

func NewTSMetaServiceClient(c thrift.TClient) *TSMetaServiceClient {
  return &TSMetaServiceClient{
    RaftServiceClient: NewRaftServiceClient(c),
  }
}

// Node which is not leader will call this method to try to add itself into the cluster as a new node.
// <br>For the receiver,
// If the local node is leader, it'll check whether the cluster can add this new node;
// otherwise, the local node will transfer the request to the leader.
// 
// @param node a new node that needs to be added
// 
// 
// Parameters:
//  - Node
//  - StartUpStatus
func (p *TSMetaServiceClient) AddNode(ctx context.Context, node *Node, startUpStatus *StartUpStatus) (r *AddNodeResponse, err error) {
  var _args368 TSMetaServiceAddNodeArgs
  _args368.Node = node
  _args368.StartUpStatus = startUpStatus
  var _result369 TSMetaServiceAddNodeResult
  if err = p.Client_().Call(ctx, "addNode", &_args368, &_result369); err != nil {
    return
  }
  return _result369.GetSuccess(), nil
}

// Parameters:
//  - StartUpStatus
func (p *TSMetaServiceClient) CheckStatus(ctx context.Context, startUpStatus *StartUpStatus) (r *CheckStatusResponse, err error) {
  var _args370 TSMetaServiceCheckStatusArgs
  _args370.StartUpStatus = startUpStatus
  var _result371 TSMetaServiceCheckStatusResult
  if err = p.Client_().Call(ctx, "checkStatus", &_args370, &_result371); err != nil {
    return
  }
  return _result371.GetSuccess(), nil
}

// Remove a node from the cluster. If the node is not in the cluster or the cluster size will
// less than replication number, the request will be rejected.
// return -1(RESPONSE_AGREE) or -3(RESPONSE_REJECT) or -9(RESPONSE_CLUSTER_TOO_SMALL)
// 
// 
// Parameters:
//  - Node
func (p *TSMetaServiceClient) RemoveNode(ctx context.Context, node *Node) (r Long, err error) {
  var _args372 TSMetaServiceRemoveNodeArgs
  _args372.Node = node
  var _result373 TSMetaServiceRemoveNodeResult
  if err = p.Client_().Call(ctx, "removeNode", &_args372, &_result373); err != nil {
    return
  }
  return _result373.GetSuccess(), nil
}

// When a node is removed from the cluster, if it is not the meta leader, it cannot receive
// the commit command by heartbeat since it has been removed, so the leader should tell it
// directly that it is no longer in the cluster.
// 
func (p *TSMetaServiceClient) Exile(ctx context.Context) (err error) {
  var _args374 TSMetaServiceExileArgs
  var _result375 TSMetaServiceExileResult
  if err = p.Client_().Call(ctx, "exile", &_args374, &_result375); err != nil {
    return
  }
  return nil
}

func (p *TSMetaServiceClient) QueryNodeStatus(ctx context.Context) (r *TNodeStatus, err error) {
  var _args376 TSMetaServiceQueryNodeStatusArgs
  var _result377 TSMetaServiceQueryNodeStatusResult
  if err = p.Client_().Call(ctx, "queryNodeStatus", &_args376, &_result377); err != nil {
    return
  }
  return _result377.GetSuccess(), nil
}

func (p *TSMetaServiceClient) CheckAlive(ctx context.Context) (r *Node, err error) {
  var _args378 TSMetaServiceCheckAliveArgs
  var _result379 TSMetaServiceCheckAliveResult
  if err = p.Client_().Call(ctx, "checkAlive", &_args378, &_result379); err != nil {
    return
  }
  return _result379.GetSuccess(), nil
}

type TSMetaServiceProcessor struct {
  *RaftServiceProcessor
}

func NewTSMetaServiceProcessor(handler TSMetaService) *TSMetaServiceProcessor {
  self380 := &TSMetaServiceProcessor{NewRaftServiceProcessor(handler)}
  self380.AddToProcessorMap("addNode", &tSMetaServiceProcessorAddNode{handler:handler})
  self380.AddToProcessorMap("checkStatus", &tSMetaServiceProcessorCheckStatus{handler:handler})
  self380.AddToProcessorMap("removeNode", &tSMetaServiceProcessorRemoveNode{handler:handler})
  self380.AddToProcessorMap("exile", &tSMetaServiceProcessorExile{handler:handler})
  self380.AddToProcessorMap("queryNodeStatus", &tSMetaServiceProcessorQueryNodeStatus{handler:handler})
  self380.AddToProcessorMap("checkAlive", &tSMetaServiceProcessorCheckAlive{handler:handler})
  return self380
}

type tSMetaServiceProcessorAddNode struct {
  handler TSMetaService
}

func (p *tSMetaServiceProcessorAddNode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSMetaServiceAddNodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("addNode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSMetaServiceAddNodeResult{}
var retval *AddNodeResponse
  var err2 error
  if retval, err2 = p.handler.AddNode(ctx, args.Node, args.StartUpStatus); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing addNode: " + err2.Error())
    oprot.WriteMessageBegin("addNode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("addNode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSMetaServiceProcessorCheckStatus struct {
  handler TSMetaService
}

func (p *tSMetaServiceProcessorCheckStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSMetaServiceCheckStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSMetaServiceCheckStatusResult{}
var retval *CheckStatusResponse
  var err2 error
  if retval, err2 = p.handler.CheckStatus(ctx, args.StartUpStatus); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkStatus: " + err2.Error())
    oprot.WriteMessageBegin("checkStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("checkStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSMetaServiceProcessorRemoveNode struct {
  handler TSMetaService
}

func (p *tSMetaServiceProcessorRemoveNode) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSMetaServiceRemoveNodeArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("removeNode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSMetaServiceRemoveNodeResult{}
var retval Long
  var err2 error
  if retval, err2 = p.handler.RemoveNode(ctx, args.Node); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing removeNode: " + err2.Error())
    oprot.WriteMessageBegin("removeNode", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("removeNode", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSMetaServiceProcessorExile struct {
  handler TSMetaService
}

func (p *tSMetaServiceProcessorExile) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSMetaServiceExileArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("exile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSMetaServiceExileResult{}
  var err2 error
  if err2 = p.handler.Exile(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing exile: " + err2.Error())
    oprot.WriteMessageBegin("exile", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("exile", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSMetaServiceProcessorQueryNodeStatus struct {
  handler TSMetaService
}

func (p *tSMetaServiceProcessorQueryNodeStatus) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSMetaServiceQueryNodeStatusArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("queryNodeStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSMetaServiceQueryNodeStatusResult{}
var retval *TNodeStatus
  var err2 error
  if retval, err2 = p.handler.QueryNodeStatus(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing queryNodeStatus: " + err2.Error())
    oprot.WriteMessageBegin("queryNodeStatus", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("queryNodeStatus", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tSMetaServiceProcessorCheckAlive struct {
  handler TSMetaService
}

func (p *tSMetaServiceProcessorCheckAlive) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TSMetaServiceCheckAliveArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkAlive", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TSMetaServiceCheckAliveResult{}
var retval *Node
  var err2 error
  if retval, err2 = p.handler.CheckAlive(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkAlive: " + err2.Error())
    oprot.WriteMessageBegin("checkAlive", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("checkAlive", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Node
//  - StartUpStatus
type TSMetaServiceAddNodeArgs struct {
  Node *Node `thrift:"node,1" db:"node" json:"node"`
  StartUpStatus *StartUpStatus `thrift:"startUpStatus,2" db:"startUpStatus" json:"startUpStatus"`
}

func NewTSMetaServiceAddNodeArgs() *TSMetaServiceAddNodeArgs {
  return &TSMetaServiceAddNodeArgs{}
}

var TSMetaServiceAddNodeArgs_Node_DEFAULT *Node
func (p *TSMetaServiceAddNodeArgs) GetNode() *Node {
  if !p.IsSetNode() {
    return TSMetaServiceAddNodeArgs_Node_DEFAULT
  }
return p.Node
}
var TSMetaServiceAddNodeArgs_StartUpStatus_DEFAULT *StartUpStatus
func (p *TSMetaServiceAddNodeArgs) GetStartUpStatus() *StartUpStatus {
  if !p.IsSetStartUpStatus() {
    return TSMetaServiceAddNodeArgs_StartUpStatus_DEFAULT
  }
return p.StartUpStatus
}
func (p *TSMetaServiceAddNodeArgs) IsSetNode() bool {
  return p.Node != nil
}

func (p *TSMetaServiceAddNodeArgs) IsSetStartUpStatus() bool {
  return p.StartUpStatus != nil
}

func (p *TSMetaServiceAddNodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceAddNodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Node = &Node{}
  if err := p.Node.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *TSMetaServiceAddNodeArgs)  ReadField2(iprot thrift.TProtocol) error {
  p.StartUpStatus = &StartUpStatus{}
  if err := p.StartUpStatus.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartUpStatus), err)
  }
  return nil
}

func (p *TSMetaServiceAddNodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addNode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceAddNodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := p.Node.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *TSMetaServiceAddNodeArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startUpStatus", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startUpStatus: ", p), err) }
  if err := p.StartUpStatus.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartUpStatus), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startUpStatus: ", p), err) }
  return err
}

func (p *TSMetaServiceAddNodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceAddNodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSMetaServiceAddNodeResult struct {
  Success *AddNodeResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSMetaServiceAddNodeResult() *TSMetaServiceAddNodeResult {
  return &TSMetaServiceAddNodeResult{}
}

var TSMetaServiceAddNodeResult_Success_DEFAULT *AddNodeResponse
func (p *TSMetaServiceAddNodeResult) GetSuccess() *AddNodeResponse {
  if !p.IsSetSuccess() {
    return TSMetaServiceAddNodeResult_Success_DEFAULT
  }
return p.Success
}
func (p *TSMetaServiceAddNodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSMetaServiceAddNodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceAddNodeResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AddNodeResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TSMetaServiceAddNodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("addNode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceAddNodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSMetaServiceAddNodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceAddNodeResult(%+v)", *p)
}

// Attributes:
//  - StartUpStatus
type TSMetaServiceCheckStatusArgs struct {
  StartUpStatus *StartUpStatus `thrift:"startUpStatus,1" db:"startUpStatus" json:"startUpStatus"`
}

func NewTSMetaServiceCheckStatusArgs() *TSMetaServiceCheckStatusArgs {
  return &TSMetaServiceCheckStatusArgs{}
}

var TSMetaServiceCheckStatusArgs_StartUpStatus_DEFAULT *StartUpStatus
func (p *TSMetaServiceCheckStatusArgs) GetStartUpStatus() *StartUpStatus {
  if !p.IsSetStartUpStatus() {
    return TSMetaServiceCheckStatusArgs_StartUpStatus_DEFAULT
  }
return p.StartUpStatus
}
func (p *TSMetaServiceCheckStatusArgs) IsSetStartUpStatus() bool {
  return p.StartUpStatus != nil
}

func (p *TSMetaServiceCheckStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceCheckStatusArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.StartUpStatus = &StartUpStatus{}
  if err := p.StartUpStatus.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.StartUpStatus), err)
  }
  return nil
}

func (p *TSMetaServiceCheckStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceCheckStatusArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("startUpStatus", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:startUpStatus: ", p), err) }
  if err := p.StartUpStatus.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.StartUpStatus), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:startUpStatus: ", p), err) }
  return err
}

func (p *TSMetaServiceCheckStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceCheckStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSMetaServiceCheckStatusResult struct {
  Success *CheckStatusResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSMetaServiceCheckStatusResult() *TSMetaServiceCheckStatusResult {
  return &TSMetaServiceCheckStatusResult{}
}

var TSMetaServiceCheckStatusResult_Success_DEFAULT *CheckStatusResponse
func (p *TSMetaServiceCheckStatusResult) GetSuccess() *CheckStatusResponse {
  if !p.IsSetSuccess() {
    return TSMetaServiceCheckStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *TSMetaServiceCheckStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSMetaServiceCheckStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceCheckStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &CheckStatusResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TSMetaServiceCheckStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceCheckStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSMetaServiceCheckStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceCheckStatusResult(%+v)", *p)
}

// Attributes:
//  - Node
type TSMetaServiceRemoveNodeArgs struct {
  Node *Node `thrift:"node,1" db:"node" json:"node"`
}

func NewTSMetaServiceRemoveNodeArgs() *TSMetaServiceRemoveNodeArgs {
  return &TSMetaServiceRemoveNodeArgs{}
}

var TSMetaServiceRemoveNodeArgs_Node_DEFAULT *Node
func (p *TSMetaServiceRemoveNodeArgs) GetNode() *Node {
  if !p.IsSetNode() {
    return TSMetaServiceRemoveNodeArgs_Node_DEFAULT
  }
return p.Node
}
func (p *TSMetaServiceRemoveNodeArgs) IsSetNode() bool {
  return p.Node != nil
}

func (p *TSMetaServiceRemoveNodeArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceRemoveNodeArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Node = &Node{}
  if err := p.Node.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Node), err)
  }
  return nil
}

func (p *TSMetaServiceRemoveNodeArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeNode_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceRemoveNodeArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("node", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:node: ", p), err) }
  if err := p.Node.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Node), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:node: ", p), err) }
  return err
}

func (p *TSMetaServiceRemoveNodeArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceRemoveNodeArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSMetaServiceRemoveNodeResult struct {
  Success *Long `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSMetaServiceRemoveNodeResult() *TSMetaServiceRemoveNodeResult {
  return &TSMetaServiceRemoveNodeResult{}
}

var TSMetaServiceRemoveNodeResult_Success_DEFAULT Long
func (p *TSMetaServiceRemoveNodeResult) GetSuccess() Long {
  if !p.IsSetSuccess() {
    return TSMetaServiceRemoveNodeResult_Success_DEFAULT
  }
return *p.Success
}
func (p *TSMetaServiceRemoveNodeResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSMetaServiceRemoveNodeResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceRemoveNodeResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  temp := Long(v)
  p.Success = &temp
}
  return nil
}

func (p *TSMetaServiceRemoveNodeResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("removeNode_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceRemoveNodeResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I64, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI64(int64(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSMetaServiceRemoveNodeResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceRemoveNodeResult(%+v)", *p)
}

type TSMetaServiceExileArgs struct {
}

func NewTSMetaServiceExileArgs() *TSMetaServiceExileArgs {
  return &TSMetaServiceExileArgs{}
}

func (p *TSMetaServiceExileArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceExileArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("exile_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceExileArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceExileArgs(%+v)", *p)
}

type TSMetaServiceExileResult struct {
}

func NewTSMetaServiceExileResult() *TSMetaServiceExileResult {
  return &TSMetaServiceExileResult{}
}

func (p *TSMetaServiceExileResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceExileResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("exile_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceExileResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceExileResult(%+v)", *p)
}

type TSMetaServiceQueryNodeStatusArgs struct {
}

func NewTSMetaServiceQueryNodeStatusArgs() *TSMetaServiceQueryNodeStatusArgs {
  return &TSMetaServiceQueryNodeStatusArgs{}
}

func (p *TSMetaServiceQueryNodeStatusArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceQueryNodeStatusArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryNodeStatus_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceQueryNodeStatusArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceQueryNodeStatusArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSMetaServiceQueryNodeStatusResult struct {
  Success *TNodeStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSMetaServiceQueryNodeStatusResult() *TSMetaServiceQueryNodeStatusResult {
  return &TSMetaServiceQueryNodeStatusResult{}
}

var TSMetaServiceQueryNodeStatusResult_Success_DEFAULT *TNodeStatus
func (p *TSMetaServiceQueryNodeStatusResult) GetSuccess() *TNodeStatus {
  if !p.IsSetSuccess() {
    return TSMetaServiceQueryNodeStatusResult_Success_DEFAULT
  }
return p.Success
}
func (p *TSMetaServiceQueryNodeStatusResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSMetaServiceQueryNodeStatusResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceQueryNodeStatusResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TNodeStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TSMetaServiceQueryNodeStatusResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("queryNodeStatus_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceQueryNodeStatusResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSMetaServiceQueryNodeStatusResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceQueryNodeStatusResult(%+v)", *p)
}

type TSMetaServiceCheckAliveArgs struct {
}

func NewTSMetaServiceCheckAliveArgs() *TSMetaServiceCheckAliveArgs {
  return &TSMetaServiceCheckAliveArgs{}
}

func (p *TSMetaServiceCheckAliveArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceCheckAliveArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkAlive_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceCheckAliveArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceCheckAliveArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TSMetaServiceCheckAliveResult struct {
  Success *Node `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTSMetaServiceCheckAliveResult() *TSMetaServiceCheckAliveResult {
  return &TSMetaServiceCheckAliveResult{}
}

var TSMetaServiceCheckAliveResult_Success_DEFAULT *Node
func (p *TSMetaServiceCheckAliveResult) GetSuccess() *Node {
  if !p.IsSetSuccess() {
    return TSMetaServiceCheckAliveResult_Success_DEFAULT
  }
return p.Success
}
func (p *TSMetaServiceCheckAliveResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TSMetaServiceCheckAliveResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSMetaServiceCheckAliveResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Node{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TSMetaServiceCheckAliveResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkAlive_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSMetaServiceCheckAliveResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TSMetaServiceCheckAliveResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSMetaServiceCheckAliveResult(%+v)", *p)
}


