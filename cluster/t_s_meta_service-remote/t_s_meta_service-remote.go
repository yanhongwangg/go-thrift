// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"context"
	"flag"
	"fmt"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
	"github.com/apache/thrift/lib/go/thrift"
	"rpc"
	"cluster"
)

var _ = rpc.GoUnusedProtection__
var _ = cluster.GoUnusedProtection__

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  AddNodeResponse addNode(Node node, StartUpStatus startUpStatus)")
  fmt.Fprintln(os.Stderr, "  CheckStatusResponse checkStatus(StartUpStatus startUpStatus)")
  fmt.Fprintln(os.Stderr, "  long removeNode(Node node)")
  fmt.Fprintln(os.Stderr, "  void exile()")
  fmt.Fprintln(os.Stderr, "  TNodeStatus queryNodeStatus()")
  fmt.Fprintln(os.Stderr, "  Node checkAlive()")
  fmt.Fprintln(os.Stderr, "  HeartBeatResponse sendHeartbeat(HeartBeatRequest request)")
  fmt.Fprintln(os.Stderr, "  long startElection(ElectionRequest request)")
  fmt.Fprintln(os.Stderr, "  long appendEntries(AppendEntriesRequest request)")
  fmt.Fprintln(os.Stderr, "  long appendEntry(AppendEntryRequest request)")
  fmt.Fprintln(os.Stderr, "  void sendSnapshot(SendSnapshotRequest request)")
  fmt.Fprintln(os.Stderr, "  TSStatus executeNonQueryPlan(ExecutNonQueryReq request)")
  fmt.Fprintln(os.Stderr, "  long requestCommitIndex(Node header)")
  fmt.Fprintln(os.Stderr, "  string readFile(string filePath, i64 offset, i32 length)")
  fmt.Fprintln(os.Stderr, "  bool matchTerm(long index, long term, Node header)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

type httpHeaders map[string]string

func (h httpHeaders) String() string {
  var m map[string]string = h
  return fmt.Sprintf("%s", m)
}

func (h httpHeaders) Set(value string) error {
  parts := strings.Split(value, ": ")
  if len(parts) != 2 {
    return fmt.Errorf("header should be of format 'Key: Value'")
  }
  h[parts[0]] = parts[1]
  return nil
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  headers := make(httpHeaders)
  var parsedUrl *url.URL
  var trans thrift.TTransport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host and port")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Var(headers, "H", "Headers to set on the http(s) request (e.g. -H \"Key: Value\")")
  flag.Parse()
  
  if len(urlString) > 0 {
    var err error
    parsedUrl, err = url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http" || parsedUrl.Scheme == "https"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewTHttpClient(parsedUrl.String())
    if len(headers) > 0 {
      httptrans := trans.(*thrift.THttpClient)
      for key, value := range headers {
        httptrans.SetHeader(key, value)
      }
    }
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewTFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.TProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewTCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewTJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  iprot := protocolFactory.GetProtocol(trans)
  oprot := protocolFactory.GetProtocol(trans)
  client := cluster.NewTSMetaServiceClient(thrift.NewTStandardClient(iprot, oprot))
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "addNode":
    if flag.NArg() - 1 != 2 {
      fmt.Fprintln(os.Stderr, "AddNode requires 2 args")
      flag.Usage()
    }
    arg381 := flag.Arg(1)
    mbTrans382 := thrift.NewTMemoryBufferLen(len(arg381))
    defer mbTrans382.Close()
    _, err383 := mbTrans382.WriteString(arg381)
    if err383 != nil {
      Usage()
      return
    }
    factory384 := thrift.NewTJSONProtocolFactory()
    jsProt385 := factory384.GetProtocol(mbTrans382)
    argvalue0 := cluster.NewNode()
    err386 := argvalue0.Read(jsProt385)
    if err386 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    arg387 := flag.Arg(2)
    mbTrans388 := thrift.NewTMemoryBufferLen(len(arg387))
    defer mbTrans388.Close()
    _, err389 := mbTrans388.WriteString(arg387)
    if err389 != nil {
      Usage()
      return
    }
    factory390 := thrift.NewTJSONProtocolFactory()
    jsProt391 := factory390.GetProtocol(mbTrans388)
    argvalue1 := cluster.NewStartUpStatus()
    err392 := argvalue1.Read(jsProt391)
    if err392 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    fmt.Print(client.AddNode(context.Background(), value0, value1))
    fmt.Print("\n")
    break
  case "checkStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckStatus requires 1 args")
      flag.Usage()
    }
    arg393 := flag.Arg(1)
    mbTrans394 := thrift.NewTMemoryBufferLen(len(arg393))
    defer mbTrans394.Close()
    _, err395 := mbTrans394.WriteString(arg393)
    if err395 != nil {
      Usage()
      return
    }
    factory396 := thrift.NewTJSONProtocolFactory()
    jsProt397 := factory396.GetProtocol(mbTrans394)
    argvalue0 := cluster.NewStartUpStatus()
    err398 := argvalue0.Read(jsProt397)
    if err398 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckStatus(context.Background(), value0))
    fmt.Print("\n")
    break
  case "removeNode":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveNode requires 1 args")
      flag.Usage()
    }
    arg399 := flag.Arg(1)
    mbTrans400 := thrift.NewTMemoryBufferLen(len(arg399))
    defer mbTrans400.Close()
    _, err401 := mbTrans400.WriteString(arg399)
    if err401 != nil {
      Usage()
      return
    }
    factory402 := thrift.NewTJSONProtocolFactory()
    jsProt403 := factory402.GetProtocol(mbTrans400)
    argvalue0 := cluster.NewNode()
    err404 := argvalue0.Read(jsProt403)
    if err404 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveNode(context.Background(), value0))
    fmt.Print("\n")
    break
  case "exile":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "Exile requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.Exile(context.Background()))
    fmt.Print("\n")
    break
  case "queryNodeStatus":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "QueryNodeStatus requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.QueryNodeStatus(context.Background()))
    fmt.Print("\n")
    break
  case "checkAlive":
    if flag.NArg() - 1 != 0 {
      fmt.Fprintln(os.Stderr, "CheckAlive requires 0 args")
      flag.Usage()
    }
    fmt.Print(client.CheckAlive(context.Background()))
    fmt.Print("\n")
    break
  case "sendHeartbeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendHeartbeat requires 1 args")
      flag.Usage()
    }
    arg405 := flag.Arg(1)
    mbTrans406 := thrift.NewTMemoryBufferLen(len(arg405))
    defer mbTrans406.Close()
    _, err407 := mbTrans406.WriteString(arg405)
    if err407 != nil {
      Usage()
      return
    }
    factory408 := thrift.NewTJSONProtocolFactory()
    jsProt409 := factory408.GetProtocol(mbTrans406)
    argvalue0 := cluster.NewHeartBeatRequest()
    err410 := argvalue0.Read(jsProt409)
    if err410 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendHeartbeat(context.Background(), value0))
    fmt.Print("\n")
    break
  case "startElection":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StartElection requires 1 args")
      flag.Usage()
    }
    arg411 := flag.Arg(1)
    mbTrans412 := thrift.NewTMemoryBufferLen(len(arg411))
    defer mbTrans412.Close()
    _, err413 := mbTrans412.WriteString(arg411)
    if err413 != nil {
      Usage()
      return
    }
    factory414 := thrift.NewTJSONProtocolFactory()
    jsProt415 := factory414.GetProtocol(mbTrans412)
    argvalue0 := cluster.NewElectionRequest()
    err416 := argvalue0.Read(jsProt415)
    if err416 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StartElection(context.Background(), value0))
    fmt.Print("\n")
    break
  case "appendEntries":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AppendEntries requires 1 args")
      flag.Usage()
    }
    arg417 := flag.Arg(1)
    mbTrans418 := thrift.NewTMemoryBufferLen(len(arg417))
    defer mbTrans418.Close()
    _, err419 := mbTrans418.WriteString(arg417)
    if err419 != nil {
      Usage()
      return
    }
    factory420 := thrift.NewTJSONProtocolFactory()
    jsProt421 := factory420.GetProtocol(mbTrans418)
    argvalue0 := cluster.NewAppendEntriesRequest()
    err422 := argvalue0.Read(jsProt421)
    if err422 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AppendEntries(context.Background(), value0))
    fmt.Print("\n")
    break
  case "appendEntry":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AppendEntry requires 1 args")
      flag.Usage()
    }
    arg423 := flag.Arg(1)
    mbTrans424 := thrift.NewTMemoryBufferLen(len(arg423))
    defer mbTrans424.Close()
    _, err425 := mbTrans424.WriteString(arg423)
    if err425 != nil {
      Usage()
      return
    }
    factory426 := thrift.NewTJSONProtocolFactory()
    jsProt427 := factory426.GetProtocol(mbTrans424)
    argvalue0 := cluster.NewAppendEntryRequest()
    err428 := argvalue0.Read(jsProt427)
    if err428 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AppendEntry(context.Background(), value0))
    fmt.Print("\n")
    break
  case "sendSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SendSnapshot requires 1 args")
      flag.Usage()
    }
    arg429 := flag.Arg(1)
    mbTrans430 := thrift.NewTMemoryBufferLen(len(arg429))
    defer mbTrans430.Close()
    _, err431 := mbTrans430.WriteString(arg429)
    if err431 != nil {
      Usage()
      return
    }
    factory432 := thrift.NewTJSONProtocolFactory()
    jsProt433 := factory432.GetProtocol(mbTrans430)
    argvalue0 := cluster.NewSendSnapshotRequest()
    err434 := argvalue0.Read(jsProt433)
    if err434 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SendSnapshot(context.Background(), value0))
    fmt.Print("\n")
    break
  case "executeNonQueryPlan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ExecuteNonQueryPlan requires 1 args")
      flag.Usage()
    }
    arg435 := flag.Arg(1)
    mbTrans436 := thrift.NewTMemoryBufferLen(len(arg435))
    defer mbTrans436.Close()
    _, err437 := mbTrans436.WriteString(arg435)
    if err437 != nil {
      Usage()
      return
    }
    factory438 := thrift.NewTJSONProtocolFactory()
    jsProt439 := factory438.GetProtocol(mbTrans436)
    argvalue0 := cluster.NewExecutNonQueryReq()
    err440 := argvalue0.Read(jsProt439)
    if err440 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ExecuteNonQueryPlan(context.Background(), value0))
    fmt.Print("\n")
    break
  case "requestCommitIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RequestCommitIndex requires 1 args")
      flag.Usage()
    }
    arg441 := flag.Arg(1)
    mbTrans442 := thrift.NewTMemoryBufferLen(len(arg441))
    defer mbTrans442.Close()
    _, err443 := mbTrans442.WriteString(arg441)
    if err443 != nil {
      Usage()
      return
    }
    factory444 := thrift.NewTJSONProtocolFactory()
    jsProt445 := factory444.GetProtocol(mbTrans442)
    argvalue0 := cluster.NewNode()
    err446 := argvalue0.Read(jsProt445)
    if err446 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RequestCommitIndex(context.Background(), value0))
    fmt.Print("\n")
    break
  case "readFile":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "ReadFile requires 3 args")
      flag.Usage()
    }
    argvalue0 := flag.Arg(1)
    value0 := argvalue0
    argvalue1, err448 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err448 != nil {
      Usage()
      return
    }
    value1 := argvalue1
    tmp2, err449 := (strconv.Atoi(flag.Arg(3)))
    if err449 != nil {
      Usage()
      return
    }
    argvalue2 := int32(tmp2)
    value2 := argvalue2
    fmt.Print(client.ReadFile(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "matchTerm":
    if flag.NArg() - 1 != 3 {
      fmt.Fprintln(os.Stderr, "MatchTerm requires 3 args")
      flag.Usage()
    }
    argvalue0, err450 := (strconv.ParseInt(flag.Arg(1), 10, 64))
    if err450 != nil {
      Usage()
      return
    }
    value0 := cluster.Long(argvalue0)
    argvalue1, err451 := (strconv.ParseInt(flag.Arg(2), 10, 64))
    if err451 != nil {
      Usage()
      return
    }
    value1 := cluster.Long(argvalue1)
    arg452 := flag.Arg(3)
    mbTrans453 := thrift.NewTMemoryBufferLen(len(arg452))
    defer mbTrans453.Close()
    _, err454 := mbTrans453.WriteString(arg452)
    if err454 != nil {
      Usage()
      return
    }
    factory455 := thrift.NewTJSONProtocolFactory()
    jsProt456 := factory455.GetProtocol(mbTrans453)
    argvalue2 := cluster.NewNode()
    err457 := argvalue2.Read(jsProt456)
    if err457 != nil {
      Usage()
      return
    }
    value2 := argvalue2
    fmt.Print(client.MatchTerm(context.Background(), value0, value1, value2))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
