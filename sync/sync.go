// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package sync

import(
	"bytes"
	"context"
	"reflect"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Code
//  - Msg
type SyncStatus struct {
  Code int32 `thrift:"code,1,required" db:"code" json:"code"`
  Msg string `thrift:"msg,2,required" db:"msg" json:"msg"`
}

func NewSyncStatus() *SyncStatus {
  return &SyncStatus{}
}


func (p *SyncStatus) GetCode() int32 {
  return p.Code
}

func (p *SyncStatus) GetMsg() string {
  return p.Msg
}
func (p *SyncStatus) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetCode bool = false;
  var issetMsg bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetCode = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetMsg = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetCode{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Code is not set"));
  }
  if !issetMsg{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Msg is not set"));
  }
  return nil
}

func (p *SyncStatus)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *SyncStatus)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *SyncStatus) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SyncStatus"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncStatus) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *SyncStatus) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("msg", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:msg: ", p), err) }
  if err := oprot.WriteString(string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:msg: ", p), err) }
  return err
}

func (p *SyncStatus) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncStatus(%+v)", *p)
}

// Attributes:
//  - Address
//  - UUID
//  - PartitionInterval
//  - Version
type ConfirmInfo struct {
  Address string `thrift:"address,1" db:"address" json:"address"`
  UUID string `thrift:"uuid,2" db:"uuid" json:"uuid"`
  PartitionInterval int64 `thrift:"partitionInterval,3" db:"partitionInterval" json:"partitionInterval"`
  Version string `thrift:"version,4" db:"version" json:"version"`
}

func NewConfirmInfo() *ConfirmInfo {
  return &ConfirmInfo{}
}


func (p *ConfirmInfo) GetAddress() string {
  return p.Address
}

func (p *ConfirmInfo) GetUUID() string {
  return p.UUID
}

func (p *ConfirmInfo) GetPartitionInterval() int64 {
  return p.PartitionInterval
}

func (p *ConfirmInfo) GetVersion() string {
  return p.Version
}
func (p *ConfirmInfo) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ConfirmInfo)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Address = v
}
  return nil
}

func (p *ConfirmInfo)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.UUID = v
}
  return nil
}

func (p *ConfirmInfo)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PartitionInterval = v
}
  return nil
}

func (p *ConfirmInfo)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *ConfirmInfo) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ConfirmInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ConfirmInfo) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("address", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:address: ", p), err) }
  if err := oprot.WriteString(string(p.Address)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.address (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:address: ", p), err) }
  return err
}

func (p *ConfirmInfo) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("uuid", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:uuid: ", p), err) }
  if err := oprot.WriteString(string(p.UUID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.uuid (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:uuid: ", p), err) }
  return err
}

func (p *ConfirmInfo) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("partitionInterval", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:partitionInterval: ", p), err) }
  if err := oprot.WriteI64(int64(p.PartitionInterval)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.partitionInterval (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:partitionInterval: ", p), err) }
  return err
}

func (p *ConfirmInfo) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("version", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:version: ", p), err) }
  if err := oprot.WriteString(string(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:version: ", p), err) }
  return err
}

func (p *ConfirmInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ConfirmInfo(%+v)", *p)
}

type SyncService interface {
  // Parameters:
  //  - Info
  Check(ctx context.Context, info *ConfirmInfo) (r *SyncStatus, err error)
  StartSync(ctx context.Context) (r *SyncStatus, err error)
  // Parameters:
  //  - StorageGroupName
  Init(ctx context.Context, storageGroupName string) (r *SyncStatus, err error)
  // Parameters:
  //  - FileName
  SyncDeletedFileName(ctx context.Context, fileName string) (r *SyncStatus, err error)
  // Parameters:
  //  - Filename
  InitSyncData(ctx context.Context, filename string) (r *SyncStatus, err error)
  // Parameters:
  //  - Buff
  SyncData(ctx context.Context, buff []byte) (r *SyncStatus, err error)
  // Parameters:
  //  - Md5
  CheckDataMD5(ctx context.Context, md5 string) (r *SyncStatus, err error)
  EndSync(ctx context.Context) (r *SyncStatus, err error)
}

type SyncServiceClient struct {
  c thrift.TClient
}

func NewSyncServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *SyncServiceClient {
  return &SyncServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewSyncServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *SyncServiceClient {
  return &SyncServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewSyncServiceClient(c thrift.TClient) *SyncServiceClient {
  return &SyncServiceClient{
    c: c,
  }
}

func (p *SyncServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Info
func (p *SyncServiceClient) Check(ctx context.Context, info *ConfirmInfo) (r *SyncStatus, err error) {
  var _args0 SyncServiceCheckArgs
  _args0.Info = info
  var _result1 SyncServiceCheckResult
  if err = p.Client_().Call(ctx, "check", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

func (p *SyncServiceClient) StartSync(ctx context.Context) (r *SyncStatus, err error) {
  var _args2 SyncServiceStartSyncArgs
  var _result3 SyncServiceStartSyncResult
  if err = p.Client_().Call(ctx, "startSync", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - StorageGroupName
func (p *SyncServiceClient) Init(ctx context.Context, storageGroupName string) (r *SyncStatus, err error) {
  var _args4 SyncServiceInitArgs
  _args4.StorageGroupName = storageGroupName
  var _result5 SyncServiceInitResult
  if err = p.Client_().Call(ctx, "init", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - FileName
func (p *SyncServiceClient) SyncDeletedFileName(ctx context.Context, fileName string) (r *SyncStatus, err error) {
  var _args6 SyncServiceSyncDeletedFileNameArgs
  _args6.FileName = fileName
  var _result7 SyncServiceSyncDeletedFileNameResult
  if err = p.Client_().Call(ctx, "syncDeletedFileName", &_args6, &_result7); err != nil {
    return
  }
  return _result7.GetSuccess(), nil
}

// Parameters:
//  - Filename
func (p *SyncServiceClient) InitSyncData(ctx context.Context, filename string) (r *SyncStatus, err error) {
  var _args8 SyncServiceInitSyncDataArgs
  _args8.Filename = filename
  var _result9 SyncServiceInitSyncDataResult
  if err = p.Client_().Call(ctx, "initSyncData", &_args8, &_result9); err != nil {
    return
  }
  return _result9.GetSuccess(), nil
}

// Parameters:
//  - Buff
func (p *SyncServiceClient) SyncData(ctx context.Context, buff []byte) (r *SyncStatus, err error) {
  var _args10 SyncServiceSyncDataArgs
  _args10.Buff = buff
  var _result11 SyncServiceSyncDataResult
  if err = p.Client_().Call(ctx, "syncData", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - Md5
func (p *SyncServiceClient) CheckDataMD5(ctx context.Context, md5 string) (r *SyncStatus, err error) {
  var _args12 SyncServiceCheckDataMD5Args
  _args12.Md5 = md5
  var _result13 SyncServiceCheckDataMD5Result
  if err = p.Client_().Call(ctx, "checkDataMD5", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

func (p *SyncServiceClient) EndSync(ctx context.Context) (r *SyncStatus, err error) {
  var _args14 SyncServiceEndSyncArgs
  var _result15 SyncServiceEndSyncResult
  if err = p.Client_().Call(ctx, "endSync", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

type SyncServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler SyncService
}

func (p *SyncServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *SyncServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *SyncServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewSyncServiceProcessor(handler SyncService) *SyncServiceProcessor {

  self16 := &SyncServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self16.processorMap["check"] = &syncServiceProcessorCheck{handler:handler}
  self16.processorMap["startSync"] = &syncServiceProcessorStartSync{handler:handler}
  self16.processorMap["init"] = &syncServiceProcessorInit{handler:handler}
  self16.processorMap["syncDeletedFileName"] = &syncServiceProcessorSyncDeletedFileName{handler:handler}
  self16.processorMap["initSyncData"] = &syncServiceProcessorInitSyncData{handler:handler}
  self16.processorMap["syncData"] = &syncServiceProcessorSyncData{handler:handler}
  self16.processorMap["checkDataMD5"] = &syncServiceProcessorCheckDataMD5{handler:handler}
  self16.processorMap["endSync"] = &syncServiceProcessorEndSync{handler:handler}
return self16
}

func (p *SyncServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x17.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x17

}

type syncServiceProcessorCheck struct {
  handler SyncService
}

func (p *syncServiceProcessorCheck) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SyncServiceCheckArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("check", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SyncServiceCheckResult{}
var retval *SyncStatus
  var err2 error
  if retval, err2 = p.handler.Check(ctx, args.Info); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing check: " + err2.Error())
    oprot.WriteMessageBegin("check", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("check", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type syncServiceProcessorStartSync struct {
  handler SyncService
}

func (p *syncServiceProcessorStartSync) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SyncServiceStartSyncArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("startSync", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SyncServiceStartSyncResult{}
var retval *SyncStatus
  var err2 error
  if retval, err2 = p.handler.StartSync(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startSync: " + err2.Error())
    oprot.WriteMessageBegin("startSync", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("startSync", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type syncServiceProcessorInit struct {
  handler SyncService
}

func (p *syncServiceProcessorInit) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SyncServiceInitArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("init", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SyncServiceInitResult{}
var retval *SyncStatus
  var err2 error
  if retval, err2 = p.handler.Init(ctx, args.StorageGroupName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing init: " + err2.Error())
    oprot.WriteMessageBegin("init", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("init", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type syncServiceProcessorSyncDeletedFileName struct {
  handler SyncService
}

func (p *syncServiceProcessorSyncDeletedFileName) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SyncServiceSyncDeletedFileNameArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("syncDeletedFileName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SyncServiceSyncDeletedFileNameResult{}
var retval *SyncStatus
  var err2 error
  if retval, err2 = p.handler.SyncDeletedFileName(ctx, args.FileName); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncDeletedFileName: " + err2.Error())
    oprot.WriteMessageBegin("syncDeletedFileName", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("syncDeletedFileName", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type syncServiceProcessorInitSyncData struct {
  handler SyncService
}

func (p *syncServiceProcessorInitSyncData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SyncServiceInitSyncDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("initSyncData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SyncServiceInitSyncDataResult{}
var retval *SyncStatus
  var err2 error
  if retval, err2 = p.handler.InitSyncData(ctx, args.Filename); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing initSyncData: " + err2.Error())
    oprot.WriteMessageBegin("initSyncData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("initSyncData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type syncServiceProcessorSyncData struct {
  handler SyncService
}

func (p *syncServiceProcessorSyncData) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SyncServiceSyncDataArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("syncData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SyncServiceSyncDataResult{}
var retval *SyncStatus
  var err2 error
  if retval, err2 = p.handler.SyncData(ctx, args.Buff); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing syncData: " + err2.Error())
    oprot.WriteMessageBegin("syncData", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("syncData", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type syncServiceProcessorCheckDataMD5 struct {
  handler SyncService
}

func (p *syncServiceProcessorCheckDataMD5) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SyncServiceCheckDataMD5Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("checkDataMD5", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SyncServiceCheckDataMD5Result{}
var retval *SyncStatus
  var err2 error
  if retval, err2 = p.handler.CheckDataMD5(ctx, args.Md5); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing checkDataMD5: " + err2.Error())
    oprot.WriteMessageBegin("checkDataMD5", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("checkDataMD5", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type syncServiceProcessorEndSync struct {
  handler SyncService
}

func (p *syncServiceProcessorEndSync) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := SyncServiceEndSyncArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("endSync", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := SyncServiceEndSyncResult{}
var retval *SyncStatus
  var err2 error
  if retval, err2 = p.handler.EndSync(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing endSync: " + err2.Error())
    oprot.WriteMessageBegin("endSync", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("endSync", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Info
type SyncServiceCheckArgs struct {
  Info *ConfirmInfo
}

func NewSyncServiceCheckArgs() *SyncServiceCheckArgs {
  return &SyncServiceCheckArgs{}
}

var SyncServiceCheckArgs_Info_DEFAULT *ConfirmInfo
func (p *SyncServiceCheckArgs) GetInfo() *ConfirmInfo {
  if !p.IsSetInfo() {
    return SyncServiceCheckArgs_Info_DEFAULT
  }
return p.Info
}
func (p *SyncServiceCheckArgs) IsSetInfo() bool {
  return p.Info != nil
}

func (p *SyncServiceCheckArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case -1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField_1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceCheckArgs)  ReadField_1(iprot thrift.TProtocol) error {
  p.Info = &ConfirmInfo{}
  if err := p.Info.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Info), err)
  }
  return nil
}

func (p *SyncServiceCheckArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("check_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField_1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceCheckArgs) writeField_1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("info", thrift.STRUCT, -1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error -1:info: ", p), err) }
  if err := p.Info.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Info), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error -1:info: ", p), err) }
  return err
}

func (p *SyncServiceCheckArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceCheckArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SyncServiceCheckResult struct {
  Success *SyncStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSyncServiceCheckResult() *SyncServiceCheckResult {
  return &SyncServiceCheckResult{}
}

var SyncServiceCheckResult_Success_DEFAULT *SyncStatus
func (p *SyncServiceCheckResult) GetSuccess() *SyncStatus {
  if !p.IsSetSuccess() {
    return SyncServiceCheckResult_Success_DEFAULT
  }
return p.Success
}
func (p *SyncServiceCheckResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SyncServiceCheckResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceCheckResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SyncStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SyncServiceCheckResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("check_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceCheckResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SyncServiceCheckResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceCheckResult(%+v)", *p)
}

type SyncServiceStartSyncArgs struct {
}

func NewSyncServiceStartSyncArgs() *SyncServiceStartSyncArgs {
  return &SyncServiceStartSyncArgs{}
}

func (p *SyncServiceStartSyncArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceStartSyncArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startSync_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceStartSyncArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceStartSyncArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SyncServiceStartSyncResult struct {
  Success *SyncStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSyncServiceStartSyncResult() *SyncServiceStartSyncResult {
  return &SyncServiceStartSyncResult{}
}

var SyncServiceStartSyncResult_Success_DEFAULT *SyncStatus
func (p *SyncServiceStartSyncResult) GetSuccess() *SyncStatus {
  if !p.IsSetSuccess() {
    return SyncServiceStartSyncResult_Success_DEFAULT
  }
return p.Success
}
func (p *SyncServiceStartSyncResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SyncServiceStartSyncResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceStartSyncResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SyncStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SyncServiceStartSyncResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startSync_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceStartSyncResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SyncServiceStartSyncResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceStartSyncResult(%+v)", *p)
}

// Attributes:
//  - StorageGroupName
type SyncServiceInitArgs struct {
  StorageGroupName string `thrift:"storageGroupName,1" db:"storageGroupName" json:"storageGroupName"`
}

func NewSyncServiceInitArgs() *SyncServiceInitArgs {
  return &SyncServiceInitArgs{}
}


func (p *SyncServiceInitArgs) GetStorageGroupName() string {
  return p.StorageGroupName
}
func (p *SyncServiceInitArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceInitArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StorageGroupName = v
}
  return nil
}

func (p *SyncServiceInitArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("init_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceInitArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("storageGroupName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:storageGroupName: ", p), err) }
  if err := oprot.WriteString(string(p.StorageGroupName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.storageGroupName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:storageGroupName: ", p), err) }
  return err
}

func (p *SyncServiceInitArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceInitArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SyncServiceInitResult struct {
  Success *SyncStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSyncServiceInitResult() *SyncServiceInitResult {
  return &SyncServiceInitResult{}
}

var SyncServiceInitResult_Success_DEFAULT *SyncStatus
func (p *SyncServiceInitResult) GetSuccess() *SyncStatus {
  if !p.IsSetSuccess() {
    return SyncServiceInitResult_Success_DEFAULT
  }
return p.Success
}
func (p *SyncServiceInitResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SyncServiceInitResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceInitResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SyncStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SyncServiceInitResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("init_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceInitResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SyncServiceInitResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceInitResult(%+v)", *p)
}

// Attributes:
//  - FileName
type SyncServiceSyncDeletedFileNameArgs struct {
  FileName string `thrift:"fileName,1" db:"fileName" json:"fileName"`
}

func NewSyncServiceSyncDeletedFileNameArgs() *SyncServiceSyncDeletedFileNameArgs {
  return &SyncServiceSyncDeletedFileNameArgs{}
}


func (p *SyncServiceSyncDeletedFileNameArgs) GetFileName() string {
  return p.FileName
}
func (p *SyncServiceSyncDeletedFileNameArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceSyncDeletedFileNameArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FileName = v
}
  return nil
}

func (p *SyncServiceSyncDeletedFileNameArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("syncDeletedFileName_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceSyncDeletedFileNameArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("fileName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileName: ", p), err) }
  if err := oprot.WriteString(string(p.FileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileName: ", p), err) }
  return err
}

func (p *SyncServiceSyncDeletedFileNameArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceSyncDeletedFileNameArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SyncServiceSyncDeletedFileNameResult struct {
  Success *SyncStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSyncServiceSyncDeletedFileNameResult() *SyncServiceSyncDeletedFileNameResult {
  return &SyncServiceSyncDeletedFileNameResult{}
}

var SyncServiceSyncDeletedFileNameResult_Success_DEFAULT *SyncStatus
func (p *SyncServiceSyncDeletedFileNameResult) GetSuccess() *SyncStatus {
  if !p.IsSetSuccess() {
    return SyncServiceSyncDeletedFileNameResult_Success_DEFAULT
  }
return p.Success
}
func (p *SyncServiceSyncDeletedFileNameResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SyncServiceSyncDeletedFileNameResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceSyncDeletedFileNameResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SyncStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SyncServiceSyncDeletedFileNameResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("syncDeletedFileName_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceSyncDeletedFileNameResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SyncServiceSyncDeletedFileNameResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceSyncDeletedFileNameResult(%+v)", *p)
}

// Attributes:
//  - Filename
type SyncServiceInitSyncDataArgs struct {
  Filename string `thrift:"filename,1" db:"filename" json:"filename"`
}

func NewSyncServiceInitSyncDataArgs() *SyncServiceInitSyncDataArgs {
  return &SyncServiceInitSyncDataArgs{}
}


func (p *SyncServiceInitSyncDataArgs) GetFilename() string {
  return p.Filename
}
func (p *SyncServiceInitSyncDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceInitSyncDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Filename = v
}
  return nil
}

func (p *SyncServiceInitSyncDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("initSyncData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceInitSyncDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("filename", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:filename: ", p), err) }
  if err := oprot.WriteString(string(p.Filename)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.filename (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:filename: ", p), err) }
  return err
}

func (p *SyncServiceInitSyncDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceInitSyncDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SyncServiceInitSyncDataResult struct {
  Success *SyncStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSyncServiceInitSyncDataResult() *SyncServiceInitSyncDataResult {
  return &SyncServiceInitSyncDataResult{}
}

var SyncServiceInitSyncDataResult_Success_DEFAULT *SyncStatus
func (p *SyncServiceInitSyncDataResult) GetSuccess() *SyncStatus {
  if !p.IsSetSuccess() {
    return SyncServiceInitSyncDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *SyncServiceInitSyncDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SyncServiceInitSyncDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceInitSyncDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SyncStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SyncServiceInitSyncDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("initSyncData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceInitSyncDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SyncServiceInitSyncDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceInitSyncDataResult(%+v)", *p)
}

// Attributes:
//  - Buff
type SyncServiceSyncDataArgs struct {
  Buff []byte `thrift:"buff,1" db:"buff" json:"buff"`
}

func NewSyncServiceSyncDataArgs() *SyncServiceSyncDataArgs {
  return &SyncServiceSyncDataArgs{}
}


func (p *SyncServiceSyncDataArgs) GetBuff() []byte {
  return p.Buff
}
func (p *SyncServiceSyncDataArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceSyncDataArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Buff = v
}
  return nil
}

func (p *SyncServiceSyncDataArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("syncData_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceSyncDataArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buff", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:buff: ", p), err) }
  if err := oprot.WriteBinary(p.Buff); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buff (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:buff: ", p), err) }
  return err
}

func (p *SyncServiceSyncDataArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceSyncDataArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SyncServiceSyncDataResult struct {
  Success *SyncStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSyncServiceSyncDataResult() *SyncServiceSyncDataResult {
  return &SyncServiceSyncDataResult{}
}

var SyncServiceSyncDataResult_Success_DEFAULT *SyncStatus
func (p *SyncServiceSyncDataResult) GetSuccess() *SyncStatus {
  if !p.IsSetSuccess() {
    return SyncServiceSyncDataResult_Success_DEFAULT
  }
return p.Success
}
func (p *SyncServiceSyncDataResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SyncServiceSyncDataResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceSyncDataResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SyncStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SyncServiceSyncDataResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("syncData_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceSyncDataResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SyncServiceSyncDataResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceSyncDataResult(%+v)", *p)
}

// Attributes:
//  - Md5
type SyncServiceCheckDataMD5Args struct {
  Md5 string `thrift:"md5,1" db:"md5" json:"md5"`
}

func NewSyncServiceCheckDataMD5Args() *SyncServiceCheckDataMD5Args {
  return &SyncServiceCheckDataMD5Args{}
}


func (p *SyncServiceCheckDataMD5Args) GetMd5() string {
  return p.Md5
}
func (p *SyncServiceCheckDataMD5Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceCheckDataMD5Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Md5 = v
}
  return nil
}

func (p *SyncServiceCheckDataMD5Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkDataMD5_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceCheckDataMD5Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("md5", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:md5: ", p), err) }
  if err := oprot.WriteString(string(p.Md5)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.md5 (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:md5: ", p), err) }
  return err
}

func (p *SyncServiceCheckDataMD5Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceCheckDataMD5Args(%+v)", *p)
}

// Attributes:
//  - Success
type SyncServiceCheckDataMD5Result struct {
  Success *SyncStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSyncServiceCheckDataMD5Result() *SyncServiceCheckDataMD5Result {
  return &SyncServiceCheckDataMD5Result{}
}

var SyncServiceCheckDataMD5Result_Success_DEFAULT *SyncStatus
func (p *SyncServiceCheckDataMD5Result) GetSuccess() *SyncStatus {
  if !p.IsSetSuccess() {
    return SyncServiceCheckDataMD5Result_Success_DEFAULT
  }
return p.Success
}
func (p *SyncServiceCheckDataMD5Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SyncServiceCheckDataMD5Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceCheckDataMD5Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SyncStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SyncServiceCheckDataMD5Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("checkDataMD5_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceCheckDataMD5Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SyncServiceCheckDataMD5Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceCheckDataMD5Result(%+v)", *p)
}

type SyncServiceEndSyncArgs struct {
}

func NewSyncServiceEndSyncArgs() *SyncServiceEndSyncArgs {
  return &SyncServiceEndSyncArgs{}
}

func (p *SyncServiceEndSyncArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceEndSyncArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("endSync_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceEndSyncArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceEndSyncArgs(%+v)", *p)
}

// Attributes:
//  - Success
type SyncServiceEndSyncResult struct {
  Success *SyncStatus `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewSyncServiceEndSyncResult() *SyncServiceEndSyncResult {
  return &SyncServiceEndSyncResult{}
}

var SyncServiceEndSyncResult_Success_DEFAULT *SyncStatus
func (p *SyncServiceEndSyncResult) GetSuccess() *SyncStatus {
  if !p.IsSetSuccess() {
    return SyncServiceEndSyncResult_Success_DEFAULT
  }
return p.Success
}
func (p *SyncServiceEndSyncResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *SyncServiceEndSyncResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SyncServiceEndSyncResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SyncStatus{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *SyncServiceEndSyncResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("endSync_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SyncServiceEndSyncResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *SyncServiceEndSyncResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SyncServiceEndSyncResult(%+v)", *p)
}


